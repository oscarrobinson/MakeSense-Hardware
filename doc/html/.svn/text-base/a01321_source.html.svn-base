<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>Contiki 2.6: platform/native/contiki-main.c Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />



</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">Contiki 2.6
   
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.html"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.html"><span>Modules</span></a></li>
      <li><a href="annotated.html"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li><a href="dirs.html"><span>Directories</span></a></li>
      <li><a href="examples.html"><span>Examples</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>Globals</span></a></li>
    </ul>
  </div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="dir_da81161b528b307837d2c2604d1aafcb.html">platform</a>      </li>
      <li class="navelem"><a class="el" href="dir_c75ac1e4e14634c19e7ca977500868ed.html">native</a>      </li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">contiki-main.c</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment"> * Copyright (c) 2002, Adam Dunkels.</span>
<a name="l00003"></a>00003 <span class="comment"> * All rights reserved.</span>
<a name="l00004"></a>00004 <span class="comment"> *</span>
<a name="l00005"></a>00005 <span class="comment"> * Redistribution and use in source and binary forms, with or without</span>
<a name="l00006"></a>00006 <span class="comment"> * modification, are permitted provided that the following conditions</span>
<a name="l00007"></a>00007 <span class="comment"> * are met:</span>
<a name="l00008"></a>00008 <span class="comment"> * 1. Redistributions of source code must retain the above copyright</span>
<a name="l00009"></a>00009 <span class="comment"> *    notice, this list of conditions and the following disclaimer.</span>
<a name="l00010"></a>00010 <span class="comment"> * 2. Redistributions in binary form must reproduce the above</span>
<a name="l00011"></a>00011 <span class="comment"> *    copyright notice, this list of conditions and the following</span>
<a name="l00012"></a>00012 <span class="comment"> *    disclaimer in the documentation and/or other materials provided</span>
<a name="l00013"></a>00013 <span class="comment"> *    with the distribution.</span>
<a name="l00014"></a>00014 <span class="comment"> * 3. The name of the author may not be used to endorse or promote</span>
<a name="l00015"></a>00015 <span class="comment"> *    products derived from this software without specific prior</span>
<a name="l00016"></a>00016 <span class="comment"> *    written permission.</span>
<a name="l00017"></a>00017 <span class="comment"> *</span>
<a name="l00018"></a>00018 <span class="comment"> * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS&#39;&#39; AND ANY EXPRESS</span>
<a name="l00019"></a>00019 <span class="comment"> * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED</span>
<a name="l00020"></a>00020 <span class="comment"> * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE</span>
<a name="l00021"></a>00021 <span class="comment"> * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY</span>
<a name="l00022"></a>00022 <span class="comment"> * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</span>
<a name="l00023"></a>00023 <span class="comment"> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE</span>
<a name="l00024"></a>00024 <span class="comment"> * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS</span>
<a name="l00025"></a>00025 <span class="comment"> * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,</span>
<a name="l00026"></a>00026 <span class="comment"> * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING</span>
<a name="l00027"></a>00027 <span class="comment"> * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS</span>
<a name="l00028"></a>00028 <span class="comment"> * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</span>
<a name="l00029"></a>00029 <span class="comment"> *</span>
<a name="l00030"></a>00030 <span class="comment"> * This file is part of the Contiki OS</span>
<a name="l00031"></a>00031 <span class="comment"> *</span>
<a name="l00032"></a>00032 <span class="comment"> */</span>
<a name="l00033"></a>00033 
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;stdio.h&gt;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;string.h&gt;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &lt;unistd.h&gt;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &lt;sys/select.h&gt;</span>
<a name="l00038"></a>00038 
<a name="l00039"></a>00039 <span class="preprocessor">#ifdef __CYGWIN__</span>
<a name="l00040"></a>00040 <span class="preprocessor"></span><span class="preprocessor">#include &quot;net/wpcap-drv.h&quot;</span>
<a name="l00041"></a>00041 <span class="preprocessor">#endif </span><span class="comment">/* __CYGWIN__ */</span>
<a name="l00042"></a>00042 
<a name="l00043"></a>00043 <span class="preprocessor">#include &quot;contiki.h&quot;</span>
<a name="l00044"></a>00044 <span class="preprocessor">#include &quot;<a class="code" href="a00303.html" title="Include file for the Contiki low-layer network stack (NETSTACK)">net/netstack.h</a>&quot;</span>
<a name="l00045"></a>00045 
<a name="l00046"></a>00046 <span class="preprocessor">#include &quot;<a class="code" href="a00177.html" title="Generic serial I/O process header filer.">dev/serial-line.h</a>&quot;</span>
<a name="l00047"></a>00047 
<a name="l00048"></a>00048 <span class="preprocessor">#include &quot;<a class="code" href="a00435.html" title="Header file for the uIP TCP/IP stack.">net/uip.h</a>&quot;</span>
<a name="l00049"></a>00049 
<a name="l00050"></a>00050 <span class="preprocessor">#include &quot;dev/button-sensor.h&quot;</span>
<a name="l00051"></a>00051 <span class="preprocessor">#include &quot;dev/pir-sensor.h&quot;</span>
<a name="l00052"></a>00052 <span class="preprocessor">#include &quot;dev/vib-sensor.h&quot;</span>
<a name="l00053"></a>00053 
<a name="l00054"></a>00054 <span class="preprocessor">#if WITH_UIP6</span>
<a name="l00055"></a>00055 <span class="preprocessor"></span><span class="preprocessor">#include &quot;<a class="code" href="a00415.html" title="Network interface and stateless autoconfiguration (RFC 4862)">net/uip-ds6.h</a>&quot;</span>
<a name="l00056"></a>00056 <span class="preprocessor">#endif </span><span class="comment">/* WITH_UIP6 */</span>
<a name="l00057"></a>00057 
<a name="l00058"></a>00058 <span class="preprocessor">#include &quot;<a class="code" href="a00317.html" title="Header file for the Rime stack.">net/rime.h</a>&quot;</span>
<a name="l00059"></a>00059 
<a name="l00060"></a>00060 <span class="preprocessor">#ifdef SELECT_CONF_MAX</span>
<a name="l00061"></a>00061 <span class="preprocessor"></span><span class="preprocessor">#define SELECT_MAX SELECT_CONF_MAX</span>
<a name="l00062"></a>00062 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00063"></a>00063 <span class="preprocessor"></span><span class="preprocessor">#define SELECT_MAX 8</span>
<a name="l00064"></a>00064 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00065"></a>00065 <span class="preprocessor"></span>
<a name="l00066"></a>00066 <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">struct </span>select_callback *select_callback[SELECT_MAX];
<a name="l00067"></a>00067 <span class="keyword">static</span> <span class="keywordtype">int</span> select_max = 0;
<a name="l00068"></a>00068 
<a name="l00069"></a>00069 SENSORS(&amp;pir_sensor, &amp;vib_sensor, &amp;button_sensor);
<a name="l00070"></a>00070 
<a name="l00071"></a>00071 <span class="keyword">static</span> uint8_t serial_id[] = {0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08};
<a name="l00072"></a>00072 <span class="keyword">static</span> uint16_t node_id = 0x0102;
<a name="l00073"></a>00073 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00074"></a>00074 <span class="keywordtype">int</span>
<a name="l00075"></a>00075 select_set_callback(<span class="keywordtype">int</span> fd, <span class="keyword">const</span> <span class="keyword">struct</span> select_callback *callback)
<a name="l00076"></a>00076 {
<a name="l00077"></a>00077   <span class="keywordtype">int</span> i;
<a name="l00078"></a>00078   <span class="keywordflow">if</span>(fd &gt;= 0 &amp;&amp; fd &lt; SELECT_MAX) {
<a name="l00079"></a>00079     <span class="comment">/* Check that the callback functions are set */</span>
<a name="l00080"></a>00080     <span class="keywordflow">if</span>(callback != <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a> &amp;&amp;
<a name="l00081"></a>00081        (callback-&gt;set_fd == <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a> || callback-&gt;handle_fd == <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>)) {
<a name="l00082"></a>00082       callback = <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>;
<a name="l00083"></a>00083     }
<a name="l00084"></a>00084 
<a name="l00085"></a>00085     select_callback[fd] = callback;
<a name="l00086"></a>00086 
<a name="l00087"></a>00087     <span class="comment">/* Update fd max */</span>
<a name="l00088"></a>00088     <span class="keywordflow">if</span>(callback != <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>) {
<a name="l00089"></a>00089       <span class="keywordflow">if</span>(fd &gt; select_max) {
<a name="l00090"></a>00090         select_max = fd;
<a name="l00091"></a>00091       }
<a name="l00092"></a>00092     } <span class="keywordflow">else</span> {
<a name="l00093"></a>00093       select_max = 0;
<a name="l00094"></a>00094       <span class="keywordflow">for</span>(i = SELECT_MAX - 1; i &gt; 0; i--) {
<a name="l00095"></a>00095         <span class="keywordflow">if</span>(select_callback[i] != <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>) {
<a name="l00096"></a>00096           select_max = i;
<a name="l00097"></a>00097           <span class="keywordflow">break</span>;
<a name="l00098"></a>00098         }
<a name="l00099"></a>00099       }
<a name="l00100"></a>00100     }
<a name="l00101"></a>00101     <span class="keywordflow">return</span> 1;
<a name="l00102"></a>00102   }
<a name="l00103"></a>00103   <span class="keywordflow">return</span> 0;
<a name="l00104"></a>00104 }
<a name="l00105"></a>00105 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00106"></a>00106 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00107"></a>00107 stdin_set_fd(fd_set *rset, fd_set *wset)
<a name="l00108"></a>00108 {
<a name="l00109"></a>00109   FD_SET(STDIN_FILENO, rset);
<a name="l00110"></a>00110   <span class="keywordflow">return</span> 1;
<a name="l00111"></a>00111 }
<a name="l00112"></a>00112 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00113"></a>00113 stdin_handle_fd(fd_set *rset, fd_set *wset)
<a name="l00114"></a>00114 {
<a name="l00115"></a>00115   <span class="keywordtype">char</span> c;
<a name="l00116"></a>00116   <span class="keywordflow">if</span>(FD_ISSET(STDIN_FILENO, rset)) {
<a name="l00117"></a>00117     <span class="keywordflow">if</span>(read(STDIN_FILENO, &amp;c, 1) &gt; 0) {
<a name="l00118"></a>00118       serial_line_input_byte(c);
<a name="l00119"></a>00119     }
<a name="l00120"></a>00120   }
<a name="l00121"></a>00121 }
<a name="l00122"></a>00122 <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">struct </span>select_callback stdin_fd = {
<a name="l00123"></a>00123   stdin_set_fd, stdin_handle_fd
<a name="l00124"></a>00124 };
<a name="l00125"></a>00125 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00126"></a>00126 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00127"></a>00127 set_rime_addr(<span class="keywordtype">void</span>)
<a name="l00128"></a>00128 {
<a name="l00129"></a>00129   rimeaddr_t addr;
<a name="l00130"></a>00130   <span class="keywordtype">int</span> i;
<a name="l00131"></a>00131 
<a name="l00132"></a>00132   memset(&amp;addr, 0, <span class="keyword">sizeof</span>(rimeaddr_t));
<a name="l00133"></a>00133 <span class="preprocessor">#if UIP_CONF_IPV6</span>
<a name="l00134"></a>00134 <span class="preprocessor"></span>  memcpy(addr.u8, serial_id, <span class="keyword">sizeof</span>(addr.u8));
<a name="l00135"></a>00135 <span class="preprocessor">#else</span>
<a name="l00136"></a>00136 <span class="preprocessor"></span>  <span class="keywordflow">if</span>(node_id == 0) {
<a name="l00137"></a>00137     <span class="keywordflow">for</span>(i = 0; i &lt; <span class="keyword">sizeof</span>(rimeaddr_t); ++i) {
<a name="l00138"></a>00138       addr.u8[i] = serial_id[7 - i];
<a name="l00139"></a>00139     }
<a name="l00140"></a>00140   } <span class="keywordflow">else</span> {
<a name="l00141"></a>00141     addr.u8[0] = node_id &amp; 0xff;
<a name="l00142"></a>00142     addr.u8[1] = node_id &gt;&gt; 8;
<a name="l00143"></a>00143   }
<a name="l00144"></a>00144 <span class="preprocessor">#endif</span>
<a name="l00145"></a>00145 <span class="preprocessor"></span>  <a class="code" href="a01845.html#gac4080b66cb1791df683e694f70ee31f2" title="Set the address of the current node.">rimeaddr_set_node_addr</a>(&amp;addr);
<a name="l00146"></a>00146   printf(<span class="stringliteral">&quot;Rime started with address &quot;</span>);
<a name="l00147"></a>00147   <span class="keywordflow">for</span>(i = 0; i &lt; <span class="keyword">sizeof</span>(addr.u8) - 1; i++) {
<a name="l00148"></a>00148     printf(<span class="stringliteral">&quot;%d.&quot;</span>, addr.u8[i]);
<a name="l00149"></a>00149   }
<a name="l00150"></a>00150   printf(<span class="stringliteral">&quot;%d\n&quot;</span>, addr.u8[i]);
<a name="l00151"></a>00151 }
<a name="l00152"></a>00152 
<a name="l00153"></a>00153 
<a name="l00154"></a>00154 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00155"></a>00155 <span class="keywordtype">int</span> contiki_argc = 0;
<a name="l00156"></a>00156 <span class="keywordtype">char</span> **contiki_argv;
<a name="l00157"></a>00157 
<a name="l00158"></a>00158 <span class="keywordtype">int</span>
<a name="l00159"></a>00159 <a class="code" href="a01924.html#ga840291bc02cba5474a4cb46a9b9566fe" title="This is main...">main</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> **argv)
<a name="l00160"></a>00160 {
<a name="l00161"></a>00161 <span class="preprocessor">#if UIP_CONF_IPV6</span>
<a name="l00162"></a>00162 <span class="preprocessor"></span><span class="preprocessor">#if UIP_CONF_IPV6_RPL</span>
<a name="l00163"></a>00163 <span class="preprocessor"></span>  printf(CONTIKI_VERSION_STRING <span class="stringliteral">&quot; started with IPV6, RPL\n&quot;</span>);
<a name="l00164"></a>00164 <span class="preprocessor">#else</span>
<a name="l00165"></a>00165 <span class="preprocessor"></span>  printf(CONTIKI_VERSION_STRING <span class="stringliteral">&quot; started with IPV6\n&quot;</span>);
<a name="l00166"></a>00166 <span class="preprocessor">#endif</span>
<a name="l00167"></a>00167 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00168"></a>00168 <span class="preprocessor"></span>  printf(CONTIKI_VERSION_STRING <span class="stringliteral">&quot; started\n&quot;</span>);
<a name="l00169"></a>00169 <span class="preprocessor">#endif</span>
<a name="l00170"></a>00170 <span class="preprocessor"></span>
<a name="l00171"></a>00171   <span class="comment">/* crappy way of remembering and accessing argc/v */</span>
<a name="l00172"></a>00172   contiki_argc = argc;
<a name="l00173"></a>00173   contiki_argv = argv;
<a name="l00174"></a>00174 
<a name="l00175"></a>00175   <span class="comment">/* native under windows is hardcoded to use the first one or two args */</span>
<a name="l00176"></a>00176   <span class="comment">/* for wpcap configuration so this needs to be &quot;removed&quot; from         */</span>
<a name="l00177"></a>00177   <span class="comment">/* contiki_args (used by the native-border-router) */</span>
<a name="l00178"></a>00178 <span class="preprocessor">#ifdef __CYGWIN__</span>
<a name="l00179"></a>00179 <span class="preprocessor"></span>  contiki_argc--;
<a name="l00180"></a>00180   contiki_argv++;
<a name="l00181"></a>00181 <span class="preprocessor">#ifdef UIP_FALLBACK_INTERFACE</span>
<a name="l00182"></a>00182 <span class="preprocessor"></span>  contiki_argc--;
<a name="l00183"></a>00183   contiki_argv++;
<a name="l00184"></a>00184 <span class="preprocessor">#endif</span>
<a name="l00185"></a>00185 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00186"></a>00186 <span class="preprocessor"></span>
<a name="l00187"></a>00187   <a class="code" href="a01866.html#gaab238b68c176e90138159f41af9133f1" title="Initialize the process module.">process_init</a>();
<a name="l00188"></a>00188   <a class="code" href="a01866.html#ga1ecfc797b48072142b3e22ac1f0bbfdd" title="Start a process.">process_start</a>(&amp;etimer_process, <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>);
<a name="l00189"></a>00189   <a class="code" href="a01861.html#ga0b183fdc4a1b4be0630a29dfe4fbf3a2" title="Initialize the callback timer library.">ctimer_init</a>();
<a name="l00190"></a>00190 
<a name="l00191"></a>00191   set_rime_addr();
<a name="l00192"></a>00192 
<a name="l00193"></a>00193   queuebuf_init();
<a name="l00194"></a>00194 
<a name="l00195"></a>00195   netstack_init();
<a name="l00196"></a>00196   printf(<span class="stringliteral">&quot;MAC %s RDC %s NETWORK %s\n&quot;</span>, NETSTACK_MAC.name, NETSTACK_RDC.name, NETSTACK_NETWORK.name);
<a name="l00197"></a>00197 
<a name="l00198"></a>00198 <span class="preprocessor">#if WITH_UIP6</span>
<a name="l00199"></a>00199 <span class="preprocessor"></span>  memcpy(&amp;<a class="code" href="a01926.html#ga89bf167a9f1014d2d78754742eb7e06d" title="Host L2 address.">uip_lladdr</a>.addr, serial_id, <span class="keyword">sizeof</span>(<a class="code" href="a01926.html#ga89bf167a9f1014d2d78754742eb7e06d" title="Host L2 address.">uip_lladdr</a>.addr));
<a name="l00200"></a>00200 
<a name="l00201"></a>00201   <a class="code" href="a01866.html#ga1ecfc797b48072142b3e22ac1f0bbfdd" title="Start a process.">process_start</a>(&amp;tcpip_process, <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>);
<a name="l00202"></a>00202 <span class="preprocessor">#ifdef __CYGWIN__</span>
<a name="l00203"></a>00203 <span class="preprocessor"></span>  <a class="code" href="a01866.html#ga1ecfc797b48072142b3e22ac1f0bbfdd" title="Start a process.">process_start</a>(&amp;wpcap_process, <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>);
<a name="l00204"></a>00204 <span class="preprocessor">#endif</span>
<a name="l00205"></a>00205 <span class="preprocessor"></span>  printf(<span class="stringliteral">&quot;Tentative link-local IPv6 address &quot;</span>);
<a name="l00206"></a>00206   {
<a name="l00207"></a>00207     <a class="code" href="a00100.html" title="*">uip_ds6_addr_t</a> *lladdr;
<a name="l00208"></a>00208     <span class="keywordtype">int</span> i;
<a name="l00209"></a>00209     lladdr = uip_ds6_get_link_local(-1);
<a name="l00210"></a>00210     <span class="keywordflow">for</span>(i = 0; i &lt; 7; ++i) {
<a name="l00211"></a>00211       printf(<span class="stringliteral">&quot;%02x%02x:&quot;</span>, lladdr-&gt;ipaddr.u8[i * 2],
<a name="l00212"></a>00212              lladdr-&gt;ipaddr.u8[i * 2 + 1]);
<a name="l00213"></a>00213     }
<a name="l00214"></a>00214     <span class="comment">/* make it hardcoded... */</span>
<a name="l00215"></a>00215     lladdr-&gt;state = ADDR_AUTOCONF;
<a name="l00216"></a>00216 
<a name="l00217"></a>00217     printf(<span class="stringliteral">&quot;%02x%02x\n&quot;</span>, lladdr-&gt;ipaddr.u8[14], lladdr-&gt;ipaddr.u8[15]);
<a name="l00218"></a>00218   }
<a name="l00219"></a>00219 <span class="preprocessor">#else</span>
<a name="l00220"></a>00220 <span class="preprocessor"></span>  <a class="code" href="a01866.html#ga1ecfc797b48072142b3e22ac1f0bbfdd" title="Start a process.">process_start</a>(&amp;tcpip_process, <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>);
<a name="l00221"></a>00221 <span class="preprocessor">#endif</span>
<a name="l00222"></a>00222 <span class="preprocessor"></span>
<a name="l00223"></a>00223   serial_line_init();
<a name="l00224"></a>00224   
<a name="l00225"></a>00225   autostart_start(autostart_processes);
<a name="l00226"></a>00226   
<a name="l00227"></a>00227   <span class="comment">/* Make standard output unbuffered. */</span>
<a name="l00228"></a>00228   setvbuf(stdout, (<span class="keywordtype">char</span> *)<a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>, _IONBF, 0);
<a name="l00229"></a>00229 
<a name="l00230"></a>00230   select_set_callback(STDIN_FILENO, &amp;stdin_fd);
<a name="l00231"></a>00231   <span class="keywordflow">while</span>(1) {
<a name="l00232"></a>00232     fd_set fdr;
<a name="l00233"></a>00233     fd_set fdw;
<a name="l00234"></a>00234     <span class="keywordtype">int</span> maxfd;
<a name="l00235"></a>00235     <span class="keywordtype">int</span> i;
<a name="l00236"></a>00236     <span class="keywordtype">int</span> retval;
<a name="l00237"></a>00237     <span class="keyword">struct </span>timeval tv;
<a name="l00238"></a>00238 
<a name="l00239"></a>00239     retval = <a class="code" href="a01866.html#ga4968157ca91c28e26075ab78a1a4fb56" title="Run the system once - call poll handlers and process one event.">process_run</a>();
<a name="l00240"></a>00240 
<a name="l00241"></a>00241     tv.tv_sec = 0;
<a name="l00242"></a>00242     tv.tv_usec = retval ? 1 : 1000;
<a name="l00243"></a>00243 
<a name="l00244"></a>00244     FD_ZERO(&amp;fdr);
<a name="l00245"></a>00245     FD_ZERO(&amp;fdw);
<a name="l00246"></a>00246     maxfd = 0;
<a name="l00247"></a>00247     <span class="keywordflow">for</span>(i = 0; i &lt;= select_max; i++) {
<a name="l00248"></a>00248       <span class="keywordflow">if</span>(select_callback[i] != <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a> &amp;&amp; select_callback[i]-&gt;set_fd(&amp;fdr, &amp;fdw)) {
<a name="l00249"></a>00249         maxfd = i;
<a name="l00250"></a>00250       }
<a name="l00251"></a>00251     }
<a name="l00252"></a>00252 
<a name="l00253"></a>00253     retval = select(maxfd + 1, &amp;fdr, &amp;fdw, <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>, &amp;tv);
<a name="l00254"></a>00254     <span class="keywordflow">if</span>(retval &lt; 0) {
<a name="l00255"></a>00255       perror(<span class="stringliteral">&quot;select&quot;</span>);
<a name="l00256"></a>00256     } <span class="keywordflow">else</span> <span class="keywordflow">if</span>(retval &gt; 0) {
<a name="l00257"></a>00257       <span class="comment">/* timeout =&gt; retval == 0 */</span>
<a name="l00258"></a>00258       <span class="keywordflow">for</span>(i = 0; i &lt;= maxfd; i++) {
<a name="l00259"></a>00259         <span class="keywordflow">if</span>(select_callback[i] != <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>) {
<a name="l00260"></a>00260           select_callback[i]-&gt;handle_fd(&amp;fdr, &amp;fdw);
<a name="l00261"></a>00261         }
<a name="l00262"></a>00262       }
<a name="l00263"></a>00263     }
<a name="l00264"></a>00264 
<a name="l00265"></a>00265     <a class="code" href="a01862.html#ga59f4cb712f2bba21ef307bcf67c83118" title="Make the event timer aware that the clock has changed.">etimer_request_poll</a>();
<a name="l00266"></a>00266   }
<a name="l00267"></a>00267 
<a name="l00268"></a>00268   <span class="keywordflow">return</span> 0;
<a name="l00269"></a>00269 }
<a name="l00270"></a>00270 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00271"></a>00271 <span class="keywordtype">void</span>
<a name="l00272"></a>00272 log_message(<span class="keywordtype">char</span> *m1, <span class="keywordtype">char</span> *m2)
<a name="l00273"></a>00273 {
<a name="l00274"></a>00274   printf(<span class="stringliteral">&quot;%s%s\n&quot;</span>, m1, m2);
<a name="l00275"></a>00275 }
<a name="l00276"></a>00276 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00277"></a>00277 <span class="keywordtype">void</span>
<a name="l00278"></a><a class="code" href="a01828.html#gab58e1ceb7cb73ca2bcd73146b6c1b4e7">00278</a> <a class="code" href="a01828.html#gab58e1ceb7cb73ca2bcd73146b6c1b4e7" title="Print out a uIP log message.">uip_log</a>(<span class="keywordtype">char</span> *m)
<a name="l00279"></a>00279 {
<a name="l00280"></a>00280   printf(<span class="stringliteral">&quot;%s\n&quot;</span>, m);
<a name="l00281"></a>00281 }
<a name="l00282"></a>00282 <span class="comment">/*---------------------------------------------------------------------------*/</span>
</pre></div></div><!-- contents -->


<hr class="footer"/><address class="footer"><small>
Generated on Sun Jan 13 2013 10:57:27 for Contiki 2.6 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.7.6.1
</small></address>

</body>
</html>
