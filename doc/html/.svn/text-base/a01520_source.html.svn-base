<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>Contiki 2.6: platform/OrisenPrime/dev/include/bmp085.h Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />



</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">Contiki 2.6
   
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.html"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.html"><span>Modules</span></a></li>
      <li><a href="annotated.html"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li><a href="dirs.html"><span>Directories</span></a></li>
      <li><a href="examples.html"><span>Examples</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>Globals</span></a></li>
    </ul>
  </div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="dir_da81161b528b307837d2c2604d1aafcb.html">platform</a>      </li>
      <li class="navelem"><a class="el" href="dir_61c1519dc7c64251c41b08c597bd4931.html">OrisenPrime</a>      </li>
      <li class="navelem"><a class="el" href="dir_2c3bf02cfca604d79735b3e18babb9e3.html">dev</a>      </li>
      <li class="navelem"><a class="el" href="dir_3ed8e21c8fff4d66fad3d52dbe044e18.html">include</a>      </li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">bmp085.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="a01520.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*  $Date: 2009/10/23 $</span>
<a name="l00002"></a>00002 <span class="comment"> *  $Revision: 1.2 $</span>
<a name="l00003"></a>00003 <span class="comment"> */</span>
<a name="l00004"></a>00004 <span class="comment"></span>
<a name="l00005"></a>00005 <span class="comment">/**</span>
<a name="l00006"></a>00006 <span class="comment"> * \file</span>
<a name="l00007"></a>00007 <span class="comment">        BMP085 Pressure Sensor API</span>
<a name="l00008"></a>00008 <span class="comment"> * Copyright (C) 2009 Bosch Sensortec GmbH</span>
<a name="l00009"></a>00009 <span class="comment"> *  \section intro_sec Introduction</span>
<a name="l00010"></a>00010 <span class="comment"> * BMP085 digital Altimeter Programming Interface</span>
<a name="l00011"></a>00011 <span class="comment"> * The BMP085 API enables quick access to Bosch Sensortec&#39;s digital altimeter.</span>
<a name="l00012"></a>00012 <span class="comment"> * The only mandatory steps are: </span>
<a name="l00013"></a>00013 <span class="comment"> *</span>
<a name="l00014"></a>00014 <span class="comment"> * 1. linking the target application&#39;s communication functions to the API (\ref BMP085_WR_FUNC_PTR, \ref BMP085_RD_FUNC_PTR)</span>
<a name="l00015"></a>00015 <span class="comment"> *</span>
<a name="l00016"></a>00016 <span class="comment"> * 2. calling the bmp085_init() routine, which initializes all necessary data structures for using all functions</span>
<a name="l00017"></a>00017 <span class="comment"> *</span>
<a name="l00018"></a>00018 <span class="comment"> *</span>
<a name="l00019"></a>00019 <span class="comment"> * </span>
<a name="l00020"></a>00020 <span class="comment"> * \section disclaimer_sec Disclaimer</span>
<a name="l00021"></a>00021 <span class="comment"> *</span>
<a name="l00022"></a>00022 <span class="comment">* </span>
<a name="l00023"></a>00023 <span class="comment">* Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); you may not use this file except in </span>
<a name="l00024"></a>00024 <span class="comment">  compliance with the License and the following stipulations. The Apache License , Version 2.0 is applicable unless </span>
<a name="l00025"></a>00025 <span class="comment">  otherwise stated by the stipulations of the disclaimer below. </span>
<a name="l00026"></a>00026 <span class="comment"> </span>
<a name="l00027"></a>00027 <span class="comment">* You may obtain a copy of the License at </span>
<a name="l00028"></a>00028 <span class="comment"></span>
<a name="l00029"></a>00029 <span class="comment">   http://www.apache.org/licenses/LICENSE-2.0</span>
<a name="l00030"></a>00030 <span class="comment">  </span>
<a name="l00031"></a>00031 <span class="comment"> </span>
<a name="l00032"></a>00032 <span class="comment"></span>
<a name="l00033"></a>00033 <span class="comment">Disclaimer </span>
<a name="l00034"></a>00034 <span class="comment"></span>
<a name="l00035"></a>00035 <span class="comment">* Common:</span>
<a name="l00036"></a>00036 <span class="comment">* This Work is developed for the consumer goods industry. It may only be used </span>
<a name="l00037"></a>00037 <span class="comment">* within the parameters of the respective valid product data sheet.  The Work </span>
<a name="l00038"></a>00038 <span class="comment">* provided with the express understanding that there is no warranty of fitness for a particular purpose. </span>
<a name="l00039"></a>00039 <span class="comment">* It is not fit for use in life-sustaining, safety or security sensitive systems or any system or device </span>
<a name="l00040"></a>00040 <span class="comment">* that may lead to bodily harm or property damage if the system or device malfunctions. In addition, </span>
<a name="l00041"></a>00041 <span class="comment">* the Work is not fit for use in products which interact with motor vehicle systems.  </span>
<a name="l00042"></a>00042 <span class="comment">* The resale and/or use of the Work are at the purchaser’s own risk and his own responsibility. The </span>
<a name="l00043"></a>00043 <span class="comment">* examination of fitness for the intended use is the sole responsibility of the Purchaser. </span>
<a name="l00044"></a>00044 <span class="comment">*</span>
<a name="l00045"></a>00045 <span class="comment">* The purchaser shall indemnify Bosch Sensortec from all third party claims, including any claims for </span>
<a name="l00046"></a>00046 <span class="comment">* incidental, or consequential damages, arising from any Work or Derivative Work use not covered by the parameters of </span>
<a name="l00047"></a>00047 <span class="comment">* the respective valid product data sheet or not approved by Bosch Sensortec and reimburse Bosch </span>
<a name="l00048"></a>00048 <span class="comment">* Sensortec for all costs in connection with such claims.</span>
<a name="l00049"></a>00049 <span class="comment">*</span>
<a name="l00050"></a>00050 <span class="comment">* The purchaser must monitor the market for the purchased Work and Derivative Works, particularly with regard to </span>
<a name="l00051"></a>00051 <span class="comment">* product safety and inform Bosch Sensortec without delay of all security relevant incidents.</span>
<a name="l00052"></a>00052 <span class="comment">*</span>
<a name="l00053"></a>00053 <span class="comment">* Engineering Samples are marked with an asterisk (*) or (e). Samples may vary from the valid </span>
<a name="l00054"></a>00054 <span class="comment">* technical specifications of the product series. They are therefore not intended or fit for resale to third </span>
<a name="l00055"></a>00055 <span class="comment">* parties or for use in end products. Their sole purpose is internal client testing. The testing of an </span>
<a name="l00056"></a>00056 <span class="comment">* engineering sample may in no way replace the testing of a product series. Bosch Sensortec </span>
<a name="l00057"></a>00057 <span class="comment">* assumes no liability for the use of engineering samples. By accepting the engineering samples, the </span>
<a name="l00058"></a>00058 <span class="comment">* Purchaser agrees to indemnify Bosch Sensortec from all claims arising from the use of engineering </span>
<a name="l00059"></a>00059 <span class="comment">* samples.</span>
<a name="l00060"></a>00060 <span class="comment">*</span>
<a name="l00061"></a>00061 <span class="comment">* Special:</span>
<a name="l00062"></a>00062 <span class="comment">* This Work and any related information (hereinafter called &quot;Information&quot;) is provided free of charge </span>
<a name="l00063"></a>00063 <span class="comment">* for the sole purpose to support your application work. The Woek and Information is subject to the </span>
<a name="l00064"></a>00064 <span class="comment">* following terms and conditions: </span>
<a name="l00065"></a>00065 <span class="comment">*</span>
<a name="l00066"></a>00066 <span class="comment">* The Work is specifically designed for the exclusive use for Bosch Sensortec products by </span>
<a name="l00067"></a>00067 <span class="comment">* personnel who have special experience and training. Do not use this Work or Derivative Works if you do not have the </span>
<a name="l00068"></a>00068 <span class="comment">* proper experience or training. Do not use this Work or Derivative Works fot other products than Bosch Sensortec products.  </span>
<a name="l00069"></a>00069 <span class="comment">*</span>
<a name="l00070"></a>00070 <span class="comment">* The Information provided is believed to be accurate and reliable. Bosch Sensortec assumes no </span>
<a name="l00071"></a>00071 <span class="comment">* responsibility for the consequences of use of such Information nor for any infringement of patents or </span>
<a name="l00072"></a>00072 <span class="comment">* other rights of third parties which may result from its use. No license is granted by implication or </span>
<a name="l00073"></a>00073 <span class="comment">* otherwise under any patent or patent rights of Bosch. Specifications mentioned in the Information are </span>
<a name="l00074"></a>00074 <span class="comment">* subject to change without notice.</span>
<a name="l00075"></a>00075 <span class="comment">*</span>
<a name="l00076"></a>00076 <span class="comment">*/</span>
<a name="l00077"></a>00077 <span class="comment"></span>
<a name="l00078"></a>00078 <span class="comment"> /** \file bmp085.h</span>
<a name="l00079"></a>00079 <span class="comment">    \brief Header file for all #define constants and function prototypes</span>
<a name="l00080"></a>00080 <span class="comment">  </span>
<a name="l00081"></a>00081 <span class="comment">    </span>
<a name="l00082"></a>00082 <span class="comment">*/</span>
<a name="l00083"></a>00083 
<a name="l00084"></a>00084 
<a name="l00085"></a>00085 
<a name="l00086"></a>00086 <span class="preprocessor">#ifndef __BMP085_H__</span>
<a name="l00087"></a>00087 <span class="preprocessor"></span><span class="preprocessor">#define __BMP085_H__</span>
<a name="l00088"></a>00088 <span class="preprocessor"></span>
<a name="l00089"></a>00089 <span class="comment">// Added by Jagun Kwon (j.kwon@cs.ucl.ac.uk)</span>
<a name="l00090"></a>00090 <span class="keyword">extern</span> <span class="keyword">const</span> <span class="keyword">struct </span>sensors_sensor bmp085_sensor;
<a name="l00091"></a>00091 
<a name="l00092"></a>00092 <span class="comment">// Sensor value types to be returned from value function</span>
<a name="l00093"></a>00093 <span class="preprocessor">#define BMP085_TEMP                     1</span>
<a name="l00094"></a>00094 <span class="preprocessor"></span><span class="preprocessor">#define BMP085_PRESSURE         2</span>
<a name="l00095"></a>00095 <span class="preprocessor"></span>
<a name="l00096"></a>00096 
<a name="l00097"></a>00097 <span class="preprocessor">#define bmp085_calc_temperature(ut)\</span>
<a name="l00098"></a>00098 <span class="preprocessor">                bmp085_get_temperature(ut)</span>
<a name="l00099"></a>00099 <span class="preprocessor"></span>
<a name="l00100"></a>00100 <span class="preprocessor">#define bmp085_calc_pressure(up)\</span>
<a name="l00101"></a>00101 <span class="preprocessor">                bmp085_get_pressure(up)</span>
<a name="l00102"></a>00102 <span class="preprocessor"></span>
<a name="l00103"></a>00103 <span class="preprocessor">#define bmp085_read_ut()\</span>
<a name="l00104"></a>00104 <span class="preprocessor">                bmp085_get_ut()</span>
<a name="l00105"></a>00105 <span class="preprocessor"></span>
<a name="l00106"></a>00106 <span class="preprocessor">#define bmp085_read_up()\</span>
<a name="l00107"></a>00107 <span class="preprocessor">                bmp085_get_up()</span>
<a name="l00108"></a>00108 <span class="preprocessor"></span>
<a name="l00109"></a>00109 <span class="preprocessor">#define bmp085_read_reg(address, data, length)\</span>
<a name="l00110"></a>00110 <span class="preprocessor">                bmp085_get_reg(address, data, length)</span>
<a name="l00111"></a>00111 <span class="preprocessor"></span>
<a name="l00112"></a>00112 <span class="preprocessor">#define bmp085_write_reg(address, data, length)\</span>
<a name="l00113"></a>00113 <span class="preprocessor">                bmp085_set_reg(address, data, length)</span>
<a name="l00114"></a>00114 <span class="preprocessor"></span>
<a name="l00115"></a>00115 <span class="preprocessor">#define bmp085_read_cal_param()\</span>
<a name="l00116"></a>00116 <span class="preprocessor">                bmp085_get_cal_param()</span>
<a name="l00117"></a>00117 <span class="preprocessor"></span>
<a name="l00118"></a>00118 <span class="preprocessor">#define smd500_read_cal_param()\</span>
<a name="l00119"></a>00119 <span class="preprocessor">                smd500_get_cal_param()</span>
<a name="l00120"></a>00120 <span class="preprocessor"></span>
<a name="l00121"></a>00121 <span class="comment"></span>
<a name="l00122"></a>00122 <span class="comment">/**</span>
<a name="l00123"></a>00123 <span class="comment">   define for used read and write macros </span>
<a name="l00124"></a>00124 <span class="comment">*/</span>
<a name="l00125"></a>00125 
<a name="l00126"></a>00126 <span class="comment"></span>
<a name="l00127"></a>00127 <span class="comment">/** Define the calling convention of YOUR bus communication routine.</span>
<a name="l00128"></a>00128 <span class="comment">        \note This includes types of parameters. This example shows the configuration for an SPI bus link.</span>
<a name="l00129"></a>00129 <span class="comment">        </span>
<a name="l00130"></a>00130 <span class="comment"></span>
<a name="l00131"></a>00131 <span class="comment">*/</span>
<a name="l00132"></a>00132 
<a name="l00133"></a>00133 <span class="comment"></span>
<a name="l00134"></a>00134 <span class="comment">/** defines the return parameter type of the BMP085_WR_FUNCTION</span>
<a name="l00135"></a>00135 <span class="comment"></span>
<a name="l00136"></a>00136 <span class="comment">*/</span>
<a name="l00137"></a><a class="code" href="a01520.html#a7def26ebea74af3af18ba113b94922ce">00137</a> <span class="preprocessor">#define BMP085_BUS_WR_RETURN_TYPE char</span>
<a name="l00138"></a>00138 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00139"></a>00139 <span class="comment">/** defines the calling parameter types of the BMP085_WR_FUNCTION</span>
<a name="l00140"></a>00140 <span class="comment"></span>
<a name="l00141"></a>00141 <span class="comment">*/</span>
<a name="l00142"></a><a class="code" href="a01520.html#a614402f73714103a7127b869fae98a76">00142</a> <span class="preprocessor">#define BMP085_BUS_WR_PARAM_TYPES unsigned char,unsigned char,unsigned char *,unsigned char</span>
<a name="l00143"></a>00143 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00144"></a>00144 <span class="comment">/** links the order of parameters defined in BMP085_BUS_WR_PARAM_TYPE to function calls used inside the API</span>
<a name="l00145"></a>00145 <span class="comment"></span>
<a name="l00146"></a>00146 <span class="comment">*/</span>
<a name="l00147"></a><a class="code" href="a01520.html#a145f7a92a84405a3bf032fcc6f1cf195">00147</a> <span class="preprocessor">#define BMP085_BUS_WR_PARAM_ORDER device_addr, register_addr, register_data, write_length</span>
<a name="l00148"></a>00148 <span class="preprocessor"></span>
<a name="l00149"></a>00149 
<a name="l00150"></a>00150 <span class="comment">/* never change this line */</span>
<a name="l00151"></a>00151 <span class="preprocessor">#define BMP085_BUS_WRITE_FUNC(device_addr, register_addr, register_data, write_length)\</span>
<a name="l00152"></a>00152 <span class="preprocessor">           bus_write( device_addr, register_addr, register_data, write_length )</span>
<a name="l00153"></a>00153 <span class="preprocessor"></span>
<a name="l00154"></a>00154 
<a name="l00155"></a>00155 
<a name="l00156"></a>00156 <span class="comment"></span>
<a name="l00157"></a>00157 <span class="comment">/** defines the return parameter type of the BMP085_WR_FUNCTION</span>
<a name="l00158"></a>00158 <span class="comment"></span>
<a name="l00159"></a>00159 <span class="comment">*/</span>
<a name="l00160"></a><a class="code" href="a01520.html#a34418e2e9233ae5944485f0b51c462c1">00160</a> <span class="preprocessor">#define BMP085_BUS_RD_RETURN_TYPE char</span>
<a name="l00161"></a>00161 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00162"></a>00162 <span class="comment">/** defines the calling parameter types of the BMP085_WR_FUNCTION</span>
<a name="l00163"></a>00163 <span class="comment"></span>
<a name="l00164"></a>00164 <span class="comment">*/</span>
<a name="l00165"></a><a class="code" href="a01520.html#ab679e555b117cdbb2b87ef8d4edf3d09">00165</a> <span class="preprocessor">#define BMP085_BUS_RD_PARAM_TYPES unsigned char, unsigned char, unsigned char *, unsigned char</span>
<a name="l00166"></a>00166 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00167"></a>00167 <span class="comment">/** links the order of parameters defined in BMP085_BUS_WR_PARAM_TYPE to function calls used inside the API</span>
<a name="l00168"></a>00168 <span class="comment"></span>
<a name="l00169"></a>00169 <span class="comment">*/</span>
<a name="l00170"></a><a class="code" href="a01520.html#a740266bd119f78f51afcdfc6a12850ab">00170</a> <span class="preprocessor">#define BMP085_BUS_RD_PARAM_ORDER device_addr, register_addr, register_data, read_length</span>
<a name="l00171"></a>00171 <span class="preprocessor"></span>
<a name="l00172"></a>00172 
<a name="l00173"></a>00173 
<a name="l00174"></a>00174 <span class="comment">/* never change this line */</span>
<a name="l00175"></a>00175 <span class="preprocessor">#define BMP085_BUS_READ_FUNC(device_addr, register_addr, register_data, read_length)\</span>
<a name="l00176"></a>00176 <span class="preprocessor">           bus_read( device_addr, register_addr, register_data, read_length )</span>
<a name="l00177"></a>00177 <span class="preprocessor"></span>                   
<a name="l00178"></a>00178                    
<a name="l00179"></a>00179 
<a name="l00180"></a>00180 
<a name="l00181"></a>00181 
<a name="l00182"></a>00182 <span class="comment">/*</span>
<a name="l00183"></a>00183 <span class="comment">        CHIP_TYPE CONSTANTS</span>
<a name="l00184"></a>00184 <span class="comment">*/</span>
<a name="l00185"></a>00185 
<a name="l00186"></a>00186 <span class="preprocessor">#define BMP085_CHIP_ID                  0x55</span>
<a name="l00187"></a>00187 <span class="preprocessor"></span><span class="preprocessor">#define BOSCH_PRESSURE_SMD500   05</span>
<a name="l00188"></a>00188 <span class="preprocessor"></span><span class="preprocessor">#define BOSCH_PRESSURE_BMP085   85</span>
<a name="l00189"></a>00189 <span class="preprocessor"></span>
<a name="l00190"></a>00190 
<a name="l00191"></a>00191 
<a name="l00192"></a>00192 
<a name="l00193"></a>00193 
<a name="l00194"></a>00194 
<a name="l00195"></a>00195 <span class="comment">/*</span>
<a name="l00196"></a>00196 <span class="comment">        BMP085 I2C Address</span>
<a name="l00197"></a>00197 <span class="comment">*/</span>
<a name="l00198"></a>00198 
<a name="l00199"></a>00199 <span class="preprocessor">#define BMP085_I2C_ADDR         (0xEE&gt;&gt;1)</span>
<a name="l00200"></a>00200 <span class="preprocessor"></span>
<a name="l00201"></a>00201 
<a name="l00202"></a>00202 <span class="comment">/*</span>
<a name="l00203"></a>00203 <span class="comment">        SMB380 API error codes</span>
<a name="l00204"></a>00204 <span class="comment">*/</span>
<a name="l00205"></a>00205 
<a name="l00206"></a>00206 <span class="preprocessor">#define E_BMP_NULL_PTR              (char)-127</span>
<a name="l00207"></a>00207 <span class="preprocessor"></span><span class="preprocessor">#define E_BMP_COMM_RES              (char)-1</span>
<a name="l00208"></a>00208 <span class="preprocessor"></span><span class="preprocessor">#define E_BMP_OUT_OF_RANGE              (char)-2</span>
<a name="l00209"></a>00209 <span class="preprocessor"></span><span class="preprocessor">#define E_SENSOR_NOT_DETECTED   (char) 0</span>
<a name="l00210"></a>00210 <span class="preprocessor"></span>
<a name="l00211"></a>00211 <span class="comment">/* </span>
<a name="l00212"></a>00212 <span class="comment"> *      </span>
<a name="l00213"></a>00213 <span class="comment"> *      register definitions    </span>
<a name="l00214"></a>00214 <span class="comment"> *</span>
<a name="l00215"></a>00215 <span class="comment"> */</span>
<a name="l00216"></a>00216 
<a name="l00217"></a>00217 <span class="preprocessor">#define BMP085_PROM_START__ADDR         0xaa</span>
<a name="l00218"></a>00218 <span class="preprocessor"></span><span class="preprocessor">#define BMP085_PROM_DATA__LEN             22</span>
<a name="l00219"></a>00219 <span class="preprocessor"></span>
<a name="l00220"></a>00220 <span class="preprocessor">#define BMP085_CHIP_ID_REG                      0xD0</span>
<a name="l00221"></a>00221 <span class="preprocessor"></span><span class="preprocessor">#define BMP085_VERSION_REG                      0xD1</span>
<a name="l00222"></a>00222 <span class="preprocessor"></span>
<a name="l00223"></a>00223 <span class="preprocessor">#define BMP085_CTRL_MEAS_REG            0xF4</span>
<a name="l00224"></a>00224 <span class="preprocessor"></span><span class="preprocessor">#define BMP085_ADC_OUT_MSB_REG          0xF6</span>
<a name="l00225"></a>00225 <span class="preprocessor"></span><span class="preprocessor">#define BMP085_ADC_OUT_LSB_REG          0xF7</span>
<a name="l00226"></a>00226 <span class="preprocessor"></span>
<a name="l00227"></a>00227 <span class="preprocessor">#define BMP085_SOFT_RESET_REG           0xE0</span>
<a name="l00228"></a>00228 <span class="preprocessor"></span>
<a name="l00229"></a>00229 <span class="preprocessor">#define BMP085_T_MEASURE        0x2E                            // temperature measurent </span>
<a name="l00230"></a>00230 <span class="preprocessor"></span><span class="preprocessor">#define BMP085_P_MEASURE        0x34                            // pressure measurement</span>
<a name="l00231"></a>00231 <span class="preprocessor"></span>
<a name="l00232"></a>00232 <span class="preprocessor">#define BMP085_TEMP_CONVERSION_TIME  5                          // TO be spec&#39;d by GL or SB</span>
<a name="l00233"></a>00233 <span class="preprocessor"></span>
<a name="l00234"></a>00234 
<a name="l00235"></a>00235 <span class="comment">/* SMD500 specific constants */</span>
<a name="l00236"></a>00236 
<a name="l00237"></a>00237 
<a name="l00238"></a>00238 <span class="preprocessor">#define SMD500_PROM_START__ADDR         0xf8</span>
<a name="l00239"></a>00239 <span class="preprocessor"></span><span class="preprocessor">#define SMD500_PROM_DATA__LEN           8</span>
<a name="l00240"></a>00240 <span class="preprocessor"></span>
<a name="l00241"></a>00241 <span class="preprocessor">#define SMD500_PARAM_M1     -2218        //calibration parameter</span>
<a name="l00242"></a>00242 <span class="preprocessor"></span><span class="preprocessor">#define SMD500_PARAM_M2      -457        //calibration parameter</span>
<a name="l00243"></a>00243 <span class="preprocessor"></span><span class="preprocessor">#define SMD500_PARAM_M3     -1984        //calibration parameter</span>
<a name="l00244"></a>00244 <span class="preprocessor"></span><span class="preprocessor">#define SMD500_PARAM_M4      8808        //calibration parameter</span>
<a name="l00245"></a>00245 <span class="preprocessor"></span><span class="preprocessor">#define SMD500_PARAM_M5       496        //calibration parameter</span>
<a name="l00246"></a>00246 <span class="preprocessor"></span><span class="preprocessor">#define SMD500_PARAM_M6      1415        //calibration parameter</span>
<a name="l00247"></a>00247 <span class="preprocessor"></span>
<a name="l00248"></a>00248 <span class="preprocessor">#define SMD500_PARAM_MB     -4955        //calibration parameter</span>
<a name="l00249"></a>00249 <span class="preprocessor"></span><span class="preprocessor">#define SMD500_PARAM_MC     11611        //calibration parameter</span>
<a name="l00250"></a>00250 <span class="preprocessor"></span><span class="preprocessor">#define SMD500_PARAM_MD    -12166        //calibration parameter</span>
<a name="l00251"></a>00251 <span class="preprocessor"></span><span class="preprocessor">#define SMD500_PARAM_ME    -17268        //calibration parameter</span>
<a name="l00252"></a>00252 <span class="preprocessor"></span><span class="preprocessor">#define SMD500_PARAM_MF     -8970        //calibration parameter</span>
<a name="l00253"></a>00253 <span class="preprocessor"></span>
<a name="l00254"></a>00254 <span class="preprocessor">#define SMD500_PARAM_MG      3038        //calibration parameter</span>
<a name="l00255"></a>00255 <span class="preprocessor"></span><span class="preprocessor">#define SMD500_PARAM_MH     -7357        //calibration parameter</span>
<a name="l00256"></a>00256 <span class="preprocessor"></span><span class="preprocessor">#define SMD500_PARAM_MI      3791        //calibration parameter</span>
<a name="l00257"></a>00257 <span class="preprocessor"></span><span class="preprocessor">#define SMD500_PARAM_MJ     64385        //calibration parameter</span>
<a name="l00258"></a>00258 <span class="preprocessor"></span>
<a name="l00259"></a>00259 <span class="preprocessor">#define SMD500_STANDBY          0                               // set the device in stand-by modus to reduce power consumption</span>
<a name="l00260"></a>00260 <span class="preprocessor"></span><span class="preprocessor">#define SMD500_MASTERCLOCK_32768HZ    0x04                              // external Master clock 32.768kHz</span>
<a name="l00261"></a>00261 <span class="preprocessor"></span><span class="preprocessor">#define SMD500_MASTERCLOCK_1MHZ       0                                 // external Master clock 1MHz</span>
<a name="l00262"></a>00262 <span class="preprocessor"></span><span class="preprocessor">#define SMD500_T_RESOLUTION_13BIT     0                         // 13 Bit resolution temperature</span>
<a name="l00263"></a>00263 <span class="preprocessor"></span><span class="preprocessor">#define SMD500_T_RESOLUTION_16BIT     0x80                              // 16 Bit resolution temperature</span>
<a name="l00264"></a>00264 <span class="preprocessor"></span><span class="preprocessor">#define SMD500_T_MEASURE              0x6A                              // temperature measurent </span>
<a name="l00265"></a>00265 <span class="preprocessor"></span><span class="preprocessor">#define SMD500_P_MEASURE              0xF0                              // pressure measurement</span>
<a name="l00266"></a>00266 <span class="preprocessor"></span>
<a name="l00267"></a>00267 <span class="preprocessor">#define SMD500_TEMP_CONVERSION_TIME_13    9</span>
<a name="l00268"></a>00268 <span class="preprocessor"></span><span class="preprocessor">#define SMD500_TEMP_CONVERSION_TIME_16    34</span>
<a name="l00269"></a>00269 <span class="preprocessor"></span> 
<a name="l00270"></a>00270 
<a name="l00271"></a>00271 <span class="comment">/* register write and read delays */</span>
<a name="l00272"></a>00272 
<a name="l00273"></a>00273 <span class="preprocessor">#define BMP085_MDELAY_DATA_TYPE unsigned int</span>
<a name="l00274"></a>00274 <span class="preprocessor"></span><span class="preprocessor">#define BMP085_MDELAY_RETURN_TYPE  void</span>
<a name="l00275"></a>00275 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00276"></a>00276 <span class="comment">/** this structure holds all device specific calibration parameters </span>
<a name="l00277"></a>00277 <span class="comment">*/</span>
<a name="l00278"></a><a class="code" href="a00031.html">00278</a> <span class="keyword">typedef</span> <span class="keyword">struct </span>{
<a name="l00279"></a>00279    <span class="keywordtype">short</span> ac1;
<a name="l00280"></a>00280    <span class="keywordtype">short</span> ac2;
<a name="l00281"></a>00281    <span class="keywordtype">short</span> ac3;
<a name="l00282"></a>00282    <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> ac4;
<a name="l00283"></a>00283    <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> ac5;
<a name="l00284"></a>00284    <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> ac6;
<a name="l00285"></a>00285    <span class="keywordtype">short</span> b1;
<a name="l00286"></a>00286    <span class="keywordtype">short</span> b2;
<a name="l00287"></a>00287    <span class="keywordtype">short</span> mb;
<a name="l00288"></a>00288    <span class="keywordtype">short</span> mc;
<a name="l00289"></a>00289    <span class="keywordtype">short</span> md;                       
<a name="l00290"></a>00290 } <a class="code" href="a00031.html" title="this structure holds all device specific calibration parameters">bmp085_smd500_calibration_param_t</a>;
<a name="l00291"></a>00291 
<a name="l00292"></a>00292 <span class="comment"></span>
<a name="l00293"></a>00293 <span class="comment">/** BMP085 image registers data structure</span>
<a name="l00294"></a>00294 <span class="comment"></span>
<a name="l00295"></a>00295 <span class="comment">*/</span>
<a name="l00296"></a><a class="code" href="a00032.html">00296</a> <span class="keyword">typedef</span> <span class="keyword">struct  </span>{       
<a name="l00297"></a>00297         <a class="code" href="a00031.html" title="this structure holds all device specific calibration parameters">bmp085_smd500_calibration_param_t</a> cal_param;    
<a name="l00298"></a>00298         <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> mode;
<a name="l00299"></a>00299         <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> chip_id,  ml_version,     al_version;
<a name="l00300"></a>00300         <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> dev_addr; 
<a name="l00301"></a>00301         <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> sensortype;
<a name="l00302"></a>00302 
<a name="l00303"></a>00303         <span class="keywordtype">long</span> param_b5;
<a name="l00304"></a>00304         <span class="keywordtype">int</span> number_of_samples;
<a name="l00305"></a>00305         <span class="keywordtype">short</span> oversampling_setting;
<a name="l00306"></a>00306         <span class="keywordtype">short</span> smd500_t_resolution, smd500_masterclock;
<a name="l00307"></a>00307         <a class="code" href="a01520.html#a7def26ebea74af3af18ba113b94922ce" title="define for used read and write macros">BMP085_BUS_WR_RETURN_TYPE</a> (*bus_write)( <a class="code" href="a01520.html#a614402f73714103a7127b869fae98a76" title="defines the calling parameter types of the BMP085_WR_FUNCTION">BMP085_BUS_WR_PARAM_TYPES</a> );
<a name="l00308"></a>00308         <a class="code" href="a01520.html#a34418e2e9233ae5944485f0b51c462c1" title="defines the return parameter type of the BMP085_WR_FUNCTION">BMP085_BUS_RD_RETURN_TYPE</a> (*bus_read)( <a class="code" href="a01520.html#ab679e555b117cdbb2b87ef8d4edf3d09" title="defines the calling parameter types of the BMP085_WR_FUNCTION">BMP085_BUS_RD_PARAM_TYPES</a> );
<a name="l00309"></a>00309         BMP085_MDELAY_RETURN_TYPE (*delay_msec)( BMP085_MDELAY_DATA_TYPE );
<a name="l00310"></a>00310 } <a class="code" href="a00032.html" title="BMP085 image registers data structure.">bmp085_t</a>;
<a name="l00311"></a>00311 
<a name="l00312"></a>00312 
<a name="l00313"></a>00313 
<a name="l00314"></a>00314 
<a name="l00315"></a>00315 
<a name="l00316"></a>00316 
<a name="l00317"></a>00317 
<a name="l00318"></a>00318 
<a name="l00319"></a>00319         
<a name="l00320"></a>00320 <span class="comment">/* </span>
<a name="l00321"></a>00321 <span class="comment"> *      </span>
<a name="l00322"></a>00322 <span class="comment"> *      bit slice positions in registers</span>
<a name="l00323"></a>00323 <span class="comment"> *</span>
<a name="l00324"></a>00324 <span class="comment"> */</span>
<a name="l00325"></a>00325 
<a name="l00326"></a>00326 <span class="preprocessor">#define BMP085_CHIP_ID__POS             0</span>
<a name="l00327"></a>00327 <span class="preprocessor"></span><span class="preprocessor">#define BMP085_CHIP_ID__MSK             0xFF</span>
<a name="l00328"></a>00328 <span class="preprocessor"></span><span class="preprocessor">#define BMP085_CHIP_ID__LEN             8</span>
<a name="l00329"></a>00329 <span class="preprocessor"></span><span class="preprocessor">#define BMP085_CHIP_ID__REG             BMP085_CHIP_ID_REG</span>
<a name="l00330"></a>00330 <span class="preprocessor"></span>
<a name="l00331"></a>00331 
<a name="l00332"></a>00332 <span class="preprocessor">#define BMP085_ML_VERSION__POS          0</span>
<a name="l00333"></a>00333 <span class="preprocessor"></span><span class="preprocessor">#define BMP085_ML_VERSION__LEN          4</span>
<a name="l00334"></a>00334 <span class="preprocessor"></span><span class="preprocessor">#define BMP085_ML_VERSION__MSK          0x0F</span>
<a name="l00335"></a>00335 <span class="preprocessor"></span><span class="preprocessor">#define BMP085_ML_VERSION__REG          BMP085_VERSION_REG</span>
<a name="l00336"></a>00336 <span class="preprocessor"></span>
<a name="l00337"></a>00337 
<a name="l00338"></a>00338 
<a name="l00339"></a>00339 <span class="preprocessor">#define BMP085_AL_VERSION__POS          4</span>
<a name="l00340"></a>00340 <span class="preprocessor"></span><span class="preprocessor">#define BMP085_AL_VERSION__LEN          4</span>
<a name="l00341"></a>00341 <span class="preprocessor"></span><span class="preprocessor">#define BMP085_AL_VERSION__MSK          0xF0</span>
<a name="l00342"></a>00342 <span class="preprocessor"></span><span class="preprocessor">#define BMP085_AL_VERSION__REG          BMP085_VERSION_REG</span>
<a name="l00343"></a>00343 <span class="preprocessor"></span>
<a name="l00344"></a>00344 
<a name="l00345"></a>00345 <span class="comment">/* DATA REGISTERS */</span>
<a name="l00346"></a>00346 
<a name="l00347"></a>00347 
<a name="l00348"></a>00348 
<a name="l00349"></a>00349 <span class="comment">/* LG/HG thresholds are in LSB and depend on RANGE setting */</span>
<a name="l00350"></a>00350 <span class="comment">/* no range check on threshold calculation */</span>
<a name="l00351"></a>00351 
<a name="l00352"></a>00352 
<a name="l00353"></a>00353 
<a name="l00354"></a>00354 <span class="preprocessor">#define BMP085_GET_BITSLICE(regvar, bitname)\</span>
<a name="l00355"></a>00355 <span class="preprocessor">                        (regvar &amp; bitname##__MSK) &gt;&gt; bitname##__POS</span>
<a name="l00356"></a>00356 <span class="preprocessor"></span>
<a name="l00357"></a>00357 
<a name="l00358"></a>00358 <span class="preprocessor">#define BMP085_SET_BITSLICE(regvar, bitname, val)\</span>
<a name="l00359"></a>00359 <span class="preprocessor">                  (regvar &amp; ~bitname##__MSK) | ((val&lt;&lt;bitname##__POS)&amp;bitname##__MSK)  </span>
<a name="l00360"></a>00360 <span class="preprocessor"></span>
<a name="l00361"></a>00361 
<a name="l00362"></a>00362 <span class="comment">/* General Setup Functions */</span>
<a name="l00363"></a>00363 
<a name="l00364"></a>00364 
<a name="l00365"></a>00365 <span class="comment"></span>
<a name="l00366"></a>00366 <span class="comment">/** BMP085_init </span>
<a name="l00367"></a>00367 <span class="comment">   </span>
<a name="l00368"></a>00368 <span class="comment">   input :      Pointer to bmp085_t </span>
<a name="l00369"></a>00369 <span class="comment">   output:  -           </span>
<a name="l00370"></a>00370 <span class="comment">   return:  result of communication function</span>
<a name="l00371"></a>00371 <span class="comment">   notes :   </span>
<a name="l00372"></a>00372 <span class="comment">*/</span>
<a name="l00373"></a>00373 <span class="keywordtype">int</span> <a class="code" href="a01513.html#a7f74a7a6e2111b99fcd9e1241e1458cc" title="initialize BMP085 / SMD500">bmp085_init</a>(<a class="code" href="a00032.html" title="BMP085 image registers data structure.">bmp085_t</a> *);
<a name="l00374"></a>00374 
<a name="l00375"></a>00375 <span class="comment">//short bmp085_calc_temperature(unsigned long ut);</span>
<a name="l00376"></a>00376 <span class="keywordtype">short</span> <a class="code" href="a01513.html#aa101b87ba09ce6336b7749bc7c7e6a65" title="calculate temperature from ut ut was read from the device via I2C and fed into the right calc path fo...">bmp085_get_temperature</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> ut);
<a name="l00377"></a>00377 
<a name="l00378"></a>00378 <span class="comment">//long bmp085_calc_pressure(unsigned long up);</span>
<a name="l00379"></a>00379 <span class="keywordtype">long</span> <a class="code" href="a01513.html#ad0733b490903b80946358da3b829d721" title="calculate pressure from up up was read from the device via I2C and fed into the right calc path for e...">bmp085_get_pressure</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> up);
<a name="l00380"></a>00380 
<a name="l00381"></a>00381 <span class="comment">//unsigned short bmp085_read_ut(void);</span>
<a name="l00382"></a>00382 <span class="comment">//unsigned long  bmp085_read_up(void);</span>
<a name="l00383"></a>00383 <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> <a class="code" href="a01513.html#afec32d8d6f7cf62eb4436931a42001b7" title="read out ut for temperature conversion">bmp085_get_ut</a>(<span class="keywordtype">void</span>);
<a name="l00384"></a>00384 <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>  <a class="code" href="a01513.html#aca83cc950866e8b989aab89cc5a7e7ed" title="read out up for pressure conversion depending on the oversampling ratio setting up can be 16 to 19 bi...">bmp085_get_up</a>(<span class="keywordtype">void</span>);
<a name="l00385"></a>00385 
<a name="l00386"></a>00386 
<a name="l00387"></a>00387 
<a name="l00388"></a>00388 <span class="comment">/* MISC RAW functions */</span>
<a name="l00389"></a>00389 
<a name="l00390"></a>00390 <span class="comment">/* read: address, data-pointer, length */</span>
<a name="l00391"></a>00391 <span class="comment">//char bmp085_read_reg(unsigned char , unsigned char *, unsigned char);</span>
<a name="l00392"></a>00392 <span class="keywordtype">char</span> bmp085_get_reg(<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> , <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *, <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>);
<a name="l00393"></a>00393 
<a name="l00394"></a>00394 <span class="comment">/* write: address, data-pointer, length */</span>
<a name="l00395"></a>00395 <span class="comment">//char bmp085_write_reg(unsigned char , unsigned char*, unsigned char );</span>
<a name="l00396"></a>00396 <span class="keywordtype">char</span> bmp085_set_reg(<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> , <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*, <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> );
<a name="l00397"></a>00397 
<a name="l00398"></a>00398 
<a name="l00399"></a>00399 <span class="comment">/* API internal helper functions */</span>
<a name="l00400"></a>00400 
<a name="l00401"></a>00401 <span class="comment">//int bmp085_read_cal_param(void);</span>
<a name="l00402"></a>00402 <span class="comment">//int smd500_read_cal_param(void);</span>
<a name="l00403"></a>00403 <span class="keywordtype">int</span> <a class="code" href="a01513.html#ac054f72894bde16d413da172178fcec6" title="read out parameters cal_param from BMP085 memory">bmp085_get_cal_param</a>(<span class="keywordtype">void</span>);
<a name="l00404"></a>00404 <span class="keywordtype">int</span> <a class="code" href="a01513.html#adb09d276fe0c45f9d27d5d7430e2612e" title="read out parameters cal_param from SMD500 memory This routine generates parameters from bitsliced dat...">smd500_get_cal_param</a>(<span class="keywordtype">void</span>);
<a name="l00405"></a>00405 
<a name="l00406"></a>00406 
<a name="l00407"></a>00407 <span class="preprocessor">#endif   // __BMP085_H__</span>
<a name="l00408"></a>00408 <span class="preprocessor"></span>
<a name="l00409"></a>00409 
<a name="l00410"></a>00410 
<a name="l00411"></a>00411 
<a name="l00412"></a>00412 
</pre></div></div><!-- contents -->


<hr class="footer"/><address class="footer"><small>
Generated on Sun Jan 13 2013 10:57:27 for Contiki 2.6 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.7.6.1
</small></address>

</body>
</html>
