<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>Contiki 2.6: cpu/cc2430/dev/clock.c Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />



</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">Contiki 2.6
   
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.html"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.html"><span>Modules</span></a></li>
      <li><a href="annotated.html"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li><a href="dirs.html"><span>Directories</span></a></li>
      <li><a href="examples.html"><span>Examples</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>Globals</span></a></li>
    </ul>
  </div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="dir_bd0bc4a94a775a8b7ece71496ffca05e.html">cpu</a>      </li>
      <li class="navelem"><a class="el" href="dir_00802af3c5996426ebace365e6a37d81.html">cc2430</a>      </li>
      <li class="navelem"><a class="el" href="dir_2ac6ef05c3d0db66a619a71f04e7bd65.html">dev</a>      </li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">clock.c</div>  </div>
</div><!--header-->
<div class="contents">
<a href="a00543.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment"> * Copyright (c) 2009, Swedish Institute of Computer Science.</span>
<a name="l00003"></a>00003 <span class="comment"> * All rights reserved.</span>
<a name="l00004"></a>00004 <span class="comment"> *</span>
<a name="l00005"></a>00005 <span class="comment"> * Redistribution and use in source and binary forms, with or without</span>
<a name="l00006"></a>00006 <span class="comment"> * modification, are permitted provided that the following conditions</span>
<a name="l00007"></a>00007 <span class="comment"> * are met:</span>
<a name="l00008"></a>00008 <span class="comment"> * 1. Redistributions of source code must retain the above copyright</span>
<a name="l00009"></a>00009 <span class="comment"> *    notice, this list of conditions and the following disclaimer.</span>
<a name="l00010"></a>00010 <span class="comment"> * 2. Redistributions in binary form must reproduce the above copyright</span>
<a name="l00011"></a>00011 <span class="comment"> *    notice, this list of conditions and the following disclaimer in the</span>
<a name="l00012"></a>00012 <span class="comment"> *    documentation and/or other materials provided with the distribution.</span>
<a name="l00013"></a>00013 <span class="comment"> * 3. Neither the name of the Institute nor the names of its contributors</span>
<a name="l00014"></a>00014 <span class="comment"> *    may be used to endorse or promote products derived from this software</span>
<a name="l00015"></a>00015 <span class="comment"> *    without specific prior written permission.</span>
<a name="l00016"></a>00016 <span class="comment"> *</span>
<a name="l00017"></a>00017 <span class="comment"> * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS&#39;&#39; AND</span>
<a name="l00018"></a>00018 <span class="comment"> * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</span>
<a name="l00019"></a>00019 <span class="comment"> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE</span>
<a name="l00020"></a>00020 <span class="comment"> * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE</span>
<a name="l00021"></a>00021 <span class="comment"> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</span>
<a name="l00022"></a>00022 <span class="comment"> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS</span>
<a name="l00023"></a>00023 <span class="comment"> * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)</span>
<a name="l00024"></a>00024 <span class="comment"> * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT</span>
<a name="l00025"></a>00025 <span class="comment"> * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY</span>
<a name="l00026"></a>00026 <span class="comment"> * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF</span>
<a name="l00027"></a>00027 <span class="comment"> * SUCH DAMAGE.</span>
<a name="l00028"></a>00028 <span class="comment"> *</span>
<a name="l00029"></a>00029 <span class="comment"> * This file is part of the Contiki operating system.</span>
<a name="l00030"></a>00030 <span class="comment"> */</span>
<a name="l00031"></a>00031 <span class="comment"></span>
<a name="l00032"></a>00032 <span class="comment">/**</span>
<a name="l00033"></a>00033 <span class="comment"> * \file</span>
<a name="l00034"></a>00034 <span class="comment"> *         Implementation of the clock functions for the cc243x</span>
<a name="l00035"></a>00035 <span class="comment"> * \author</span>
<a name="l00036"></a>00036 <span class="comment"> *         Zach Shelby (zach@sensinode.com) - original</span>
<a name="l00037"></a>00037 <span class="comment"> *         George Oikonomou - &lt;oikonomou@users.sourceforge.net&gt;</span>
<a name="l00038"></a>00038 <span class="comment"> */</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &quot;sys/clock.h&quot;</span>
<a name="l00040"></a>00040 <span class="preprocessor">#include &quot;<a class="code" href="a00457.html" title="Event timer header file.">sys/etimer.h</a>&quot;</span>
<a name="l00041"></a>00041 <span class="preprocessor">#include &quot;<a class="code" href="a00781.html" title="CC2430 registers header file for CC2430.">cc2430_sfr.h</a>&quot;</span>
<a name="l00042"></a>00042 <span class="preprocessor">#include &quot;<a class="code" href="a00455.html" title="Header file for the energy estimation mechanism.">sys/energest.h</a>&quot;</span>
<a name="l00043"></a>00043 
<a name="l00044"></a>00044 <span class="comment">/* Sleep timer runs on the 32k RC osc. */</span>
<a name="l00045"></a>00045 <span class="comment">/* One clock tick is 7.8 ms */</span>
<a name="l00046"></a>00046 <span class="preprocessor">#define TICK_VAL (32768/128)  </span><span class="comment">/* 256 */</span>
<a name="l00047"></a>00047 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00048"></a>00048 <span class="preprocessor">#if CLOCK_CONF_STACK_FRIENDLY</span>
<a name="l00049"></a>00049 <span class="preprocessor"></span><span class="keyword">volatile</span> __bit sleep_flag;
<a name="l00050"></a>00050 <span class="preprocessor">#else</span>
<a name="l00051"></a>00051 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00052"></a>00052 <span class="preprocessor"></span><span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00053"></a>00053 <span class="comment">/* Used in sleep timer interrupt for calculating the next interrupt time */</span>
<a name="l00054"></a>00054 <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> timer_value;
<a name="l00055"></a>00055 <span class="keyword">static</span> <span class="keyword">volatile</span> __data clock_time_t count = 0; <span class="comment">/* Uptime in ticks */</span>
<a name="l00056"></a>00056 <span class="keyword">static</span> <span class="keyword">volatile</span> __data clock_time_t seconds = 0; <span class="comment">/* Uptime in secs */</span>
<a name="l00057"></a>00057 <span class="comment">/*---------------------------------------------------------------------------*/</span><span class="comment"></span>
<a name="l00058"></a>00058 <span class="comment">/**</span>
<a name="l00059"></a>00059 <span class="comment"> * Each iteration is ~1.0xy usec, so this function delays for roughly len usec</span>
<a name="l00060"></a>00060 <span class="comment"> */</span>
<a name="l00061"></a>00061 <span class="keywordtype">void</span>
<a name="l00062"></a><a class="code" href="a01859.html#gac0603df16193735b2cf4b70d54133356">00062</a> <a class="code" href="a01859.html#gac0603df16193735b2cf4b70d54133356" title="Delay a given number of microseconds.">clock_delay_usec</a>(uint16_t len)
<a name="l00063"></a>00063 {
<a name="l00064"></a>00064   <a class="code" href="a01960.html#gac136489c5ba4794566532004267967f8" title="Disable interrupts, saving the previous state so it can be later restored with RESTORE_INTERRUPTS().">DISABLE_INTERRUPTS</a>();
<a name="l00065"></a>00065   <span class="keywordflow">while</span>(len--) {
<a name="l00066"></a>00066     ASM(nop); ASM(nop);
<a name="l00067"></a>00067     ASM(nop); ASM(nop);
<a name="l00068"></a>00068   }
<a name="l00069"></a>00069   ENABLE_INTERRUPTS();
<a name="l00070"></a>00070 }
<a name="l00071"></a>00071 <span class="comment">/*---------------------------------------------------------------------------*/</span><span class="comment"></span>
<a name="l00072"></a>00072 <span class="comment">/**</span>
<a name="l00073"></a>00073 <span class="comment"> * Wait for a multiple of ~8 ms (a tick)</span>
<a name="l00074"></a>00074 <span class="comment"> */</span>
<a name="l00075"></a>00075 <span class="keywordtype">void</span>
<a name="l00076"></a><a class="code" href="a01859.html#ga82ef3aca786cc000eeece4a7d036b238">00076</a> <a class="code" href="a01859.html#ga82ef3aca786cc000eeece4a7d036b238" title="Wait for a given number of ticks.">clock_wait</a>(clock_time_t i)
<a name="l00077"></a>00077 {
<a name="l00078"></a>00078   clock_time_t start;
<a name="l00079"></a>00079 
<a name="l00080"></a>00080   start = <a class="code" href="a01859.html#ga50c22f9b9d60dd1f9e59b63a3a6676b1" title="Get the current clock time.">clock_time</a>();
<a name="l00081"></a>00081   <span class="keywordflow">while</span>(<a class="code" href="a01859.html#ga50c22f9b9d60dd1f9e59b63a3a6676b1" title="Get the current clock time.">clock_time</a>() - start &lt; (clock_time_t)i);
<a name="l00082"></a>00082 }
<a name="l00083"></a>00083 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00084"></a>00084 CCIF clock_time_t
<a name="l00085"></a><a class="code" href="a01859.html#ga50c22f9b9d60dd1f9e59b63a3a6676b1">00085</a> <a class="code" href="a01859.html#ga50c22f9b9d60dd1f9e59b63a3a6676b1" title="Get the current clock time.">clock_time</a>(<span class="keywordtype">void</span>)
<a name="l00086"></a>00086 {
<a name="l00087"></a>00087   <span class="keywordflow">return</span> count;
<a name="l00088"></a>00088 }
<a name="l00089"></a>00089 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00090"></a>00090 CCIF <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>
<a name="l00091"></a><a class="code" href="a01859.html#ga8bbd5d5a773349139eee79d365af36ab">00091</a> <a class="code" href="a01859.html#ga8bbd5d5a773349139eee79d365af36ab" title="Get the current value of the platform seconds.">clock_seconds</a>(<span class="keywordtype">void</span>)
<a name="l00092"></a>00092 {
<a name="l00093"></a>00093   <span class="keywordflow">return</span> seconds;
<a name="l00094"></a>00094 }
<a name="l00095"></a>00095 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00096"></a>00096 <span class="keywordtype">void</span>
<a name="l00097"></a><a class="code" href="a01859.html#ga78ab77b57cf2e00089f0a3a22508524c">00097</a> <a class="code" href="a01859.html#ga78ab77b57cf2e00089f0a3a22508524c" title="Initialize the clock library.">clock_init</a>(<span class="keywordtype">void</span>)
<a name="l00098"></a>00098 {
<a name="l00099"></a>00099   CLKCON = OSC32K | TICKSPD2 | TICKSPD1; <span class="comment">/* tickspeed 500 kHz for timers[1-4] */</span>
<a name="l00100"></a>00100 
<a name="l00101"></a>00101   <span class="comment">/* Initialize tick value */</span>
<a name="l00102"></a>00102   timer_value = ST0;                              <span class="comment">/* ST low bits [7:0] */</span>
<a name="l00103"></a>00103   timer_value += ((<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> int) ST1) &lt;&lt; 8;  <span class="comment">/* middle bits [15:8] */</span>
<a name="l00104"></a>00104   timer_value += ((<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> int) ST2) &lt;&lt; 16; <span class="comment">/*   high bits [23:16] */</span>
<a name="l00105"></a>00105   timer_value += TICK_VAL;                        <span class="comment">/* Init value 256 */</span>
<a name="l00106"></a>00106   ST2 = (<span class="keywordtype">unsigned</span> char) (timer_value &gt;&gt; 16);
<a name="l00107"></a>00107   ST1 = (<span class="keywordtype">unsigned</span> char) (timer_value &gt;&gt; 8);
<a name="l00108"></a>00108   ST0 = (<span class="keywordtype">unsigned</span> char) timer_value;
<a name="l00109"></a>00109   
<a name="l00110"></a>00110   IEN0_STIE = 1; <span class="comment">/* IEN0.STIE acknowledge Sleep Timer Interrupt */</span>
<a name="l00111"></a>00111 }
<a name="l00112"></a>00112 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00113"></a>00113 <span class="keywordtype">void</span>
<a name="l00114"></a>00114 clock_ISR(<span class="keywordtype">void</span>) __interrupt(ST_VECTOR)
<a name="l00115"></a>00115 {
<a name="l00116"></a>00116   <a class="code" href="a01960.html#gac136489c5ba4794566532004267967f8" title="Disable interrupts, saving the previous state so it can be later restored with RESTORE_INTERRUPTS().">DISABLE_INTERRUPTS</a>();
<a name="l00117"></a>00117   ENERGEST_ON(ENERGEST_TYPE_IRQ);
<a name="l00118"></a>00118 
<a name="l00119"></a>00119   <span class="comment">/*</span>
<a name="l00120"></a>00120 <span class="comment">   * If the Sleep timer throws an interrupt while we are powering down to</span>
<a name="l00121"></a>00121 <span class="comment">   * PM1, we need to abort the power down. Clear SLEEP.MODE, this will signal</span>
<a name="l00122"></a>00122 <span class="comment">   * main() to abort the PM1 transition</span>
<a name="l00123"></a>00123 <span class="comment">   */</span>
<a name="l00124"></a>00124   <a class="code" href="a00765.html#a44e89d523436fcbbf2c56e4fb335d509" title="Constant SLEEP for sub-register SR_TRX_STATUS.">SLEEP</a> &amp;= 0xFC;
<a name="l00125"></a>00125 
<a name="l00126"></a>00126   <span class="comment">/*</span>
<a name="l00127"></a>00127 <span class="comment">   * Read value of the ST0:ST1:ST2, add TICK_VAL and write it back.</span>
<a name="l00128"></a>00128 <span class="comment">   * Next interrupt occurs after the current time + TICK_VAL</span>
<a name="l00129"></a>00129 <span class="comment">   */</span>
<a name="l00130"></a>00130   timer_value = ST0;
<a name="l00131"></a>00131   timer_value += ((<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> int) ST1) &lt;&lt; 8;
<a name="l00132"></a>00132   timer_value += ((<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> int) ST2) &lt;&lt; 16;
<a name="l00133"></a>00133   timer_value += TICK_VAL;
<a name="l00134"></a>00134   ST2 = (<span class="keywordtype">unsigned</span> char) (timer_value &gt;&gt; 16);
<a name="l00135"></a>00135   ST1 = (<span class="keywordtype">unsigned</span> char) (timer_value &gt;&gt; 8);
<a name="l00136"></a>00136   ST0 = (<span class="keywordtype">unsigned</span> char) timer_value;
<a name="l00137"></a>00137   
<a name="l00138"></a>00138   ++count;
<a name="l00139"></a>00139   
<a name="l00140"></a>00140   <span class="comment">/* Make sure the CLOCK_CONF_SECOND is a power of two, to ensure</span>
<a name="l00141"></a>00141 <span class="comment">     that the modulo operation below becomes a logical and and not</span>
<a name="l00142"></a>00142 <span class="comment">     an expensive divide. Algorithm from Wikipedia:</span>
<a name="l00143"></a>00143 <span class="comment">     http://en.wikipedia.org/wiki/Power_of_two */</span>
<a name="l00144"></a>00144 <span class="preprocessor">#if (CLOCK_CONF_SECOND &amp; (CLOCK_CONF_SECOND - 1)) != 0</span>
<a name="l00145"></a>00145 <span class="preprocessor"></span><span class="preprocessor">#error CLOCK_CONF_SECOND must be a power of two (i.e., 1, 2, 4, 8, 16, 32, 64, ...).</span>
<a name="l00146"></a>00146 <span class="preprocessor"></span><span class="preprocessor">#error Change CLOCK_CONF_SECOND in contiki-conf.h.</span>
<a name="l00147"></a>00147 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00148"></a>00148 <span class="preprocessor"></span>  <span class="keywordflow">if</span>(count % CLOCK_CONF_SECOND == 0) {
<a name="l00149"></a>00149     ++seconds;
<a name="l00150"></a>00150   }
<a name="l00151"></a>00151   
<a name="l00152"></a>00152 <span class="preprocessor">#if CLOCK_CONF_STACK_FRIENDLY</span>
<a name="l00153"></a>00153 <span class="preprocessor"></span>  sleep_flag = 1;
<a name="l00154"></a>00154 <span class="preprocessor">#else</span>
<a name="l00155"></a>00155 <span class="preprocessor"></span>  <span class="keywordflow">if</span>(<a class="code" href="a01862.html#ga1cc1db9f408e7c26035399ceb9ee1c5b" title="Check if there are any non-expired event timers.">etimer_pending</a>()
<a name="l00156"></a>00156       &amp;&amp; (<a class="code" href="a01862.html#ga904ba7c454cdf40eceaa010ed861006c" title="Get next event timer expiration time.">etimer_next_expiration_time</a>() - count - 1) &gt; MAX_TICKS) {
<a name="l00157"></a>00157     <a class="code" href="a01862.html#ga59f4cb712f2bba21ef307bcf67c83118" title="Make the event timer aware that the clock has changed.">etimer_request_poll</a>();
<a name="l00158"></a>00158   }
<a name="l00159"></a>00159 <span class="preprocessor">#endif</span>
<a name="l00160"></a>00160 <span class="preprocessor"></span>  
<a name="l00161"></a>00161   IRCON_STIF = 0;
<a name="l00162"></a>00162   ENERGEST_OFF(ENERGEST_TYPE_IRQ);
<a name="l00163"></a>00163   ENABLE_INTERRUPTS();
<a name="l00164"></a>00164 }
<a name="l00165"></a>00165 <span class="comment">/*---------------------------------------------------------------------------*/</span>
</pre></div></div><!-- contents -->


<hr class="footer"/><address class="footer"><small>
Generated on Sun Jan 13 2013 10:57:24 for Contiki 2.6 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.7.6.1
</small></address>

</body>
</html>
