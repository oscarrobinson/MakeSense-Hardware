<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>Contiki 2.6: core/net/mac/csma.c Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />



</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">Contiki 2.6
   
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.html"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.html"><span>Modules</span></a></li>
      <li><a href="annotated.html"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li><a href="dirs.html"><span>Directories</span></a></li>
      <li><a href="examples.html"><span>Examples</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>Globals</span></a></li>
    </ul>
  </div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="dir_3b4aaa38be606d755c8f09da5f4b54fc.html">core</a>      </li>
      <li class="navelem"><a class="el" href="dir_e85a2b0fd2c84e4058315392b52d2635.html">net</a>      </li>
      <li class="navelem"><a class="el" href="dir_71544f394909677a989812da1f0356b5.html">mac</a>      </li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">csma.c</div>  </div>
</div><!--header-->
<div class="contents">
<a href="a00263.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment"> * Copyright (c) 2010, Swedish Institute of Computer Science.</span>
<a name="l00003"></a>00003 <span class="comment"> * All rights reserved.</span>
<a name="l00004"></a>00004 <span class="comment"> *</span>
<a name="l00005"></a>00005 <span class="comment"> * Redistribution and use in source and binary forms, with or without</span>
<a name="l00006"></a>00006 <span class="comment"> * modification, are permitted provided that the following conditions</span>
<a name="l00007"></a>00007 <span class="comment"> * are met:</span>
<a name="l00008"></a>00008 <span class="comment"> * 1. Redistributions of source code must retain the above copyright</span>
<a name="l00009"></a>00009 <span class="comment"> *    notice, this list of conditions and the following disclaimer.</span>
<a name="l00010"></a>00010 <span class="comment"> * 2. Redistributions in binary form must reproduce the above copyright</span>
<a name="l00011"></a>00011 <span class="comment"> *    notice, this list of conditions and the following disclaimer in the</span>
<a name="l00012"></a>00012 <span class="comment"> *    documentation and/or other materials provided with the distribution.</span>
<a name="l00013"></a>00013 <span class="comment"> * 3. Neither the name of the Institute nor the names of its contributors</span>
<a name="l00014"></a>00014 <span class="comment"> *    may be used to endorse or promote products derived from this software</span>
<a name="l00015"></a>00015 <span class="comment"> *    without specific prior written permission.</span>
<a name="l00016"></a>00016 <span class="comment"> *</span>
<a name="l00017"></a>00017 <span class="comment"> * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS&#39;&#39; AND</span>
<a name="l00018"></a>00018 <span class="comment"> * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</span>
<a name="l00019"></a>00019 <span class="comment"> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE</span>
<a name="l00020"></a>00020 <span class="comment"> * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE</span>
<a name="l00021"></a>00021 <span class="comment"> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</span>
<a name="l00022"></a>00022 <span class="comment"> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS</span>
<a name="l00023"></a>00023 <span class="comment"> * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)</span>
<a name="l00024"></a>00024 <span class="comment"> * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT</span>
<a name="l00025"></a>00025 <span class="comment"> * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY</span>
<a name="l00026"></a>00026 <span class="comment"> * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF</span>
<a name="l00027"></a>00027 <span class="comment"> * SUCH DAMAGE.</span>
<a name="l00028"></a>00028 <span class="comment"> *</span>
<a name="l00029"></a>00029 <span class="comment"> * This file is part of the Contiki operating system.</span>
<a name="l00030"></a>00030 <span class="comment"> *</span>
<a name="l00031"></a>00031 <span class="comment"> * $Id: csma.c,v 1.27 2011/01/25 14:24:38 adamdunkels Exp $</span>
<a name="l00032"></a>00032 <span class="comment"> */</span>
<a name="l00033"></a>00033 <span class="comment"></span>
<a name="l00034"></a>00034 <span class="comment">/**</span>
<a name="l00035"></a>00035 <span class="comment"> * \file</span>
<a name="l00036"></a>00036 <span class="comment"> *         A Carrier Sense Multiple Access (CSMA) MAC layer</span>
<a name="l00037"></a>00037 <span class="comment"> * \author</span>
<a name="l00038"></a>00038 <span class="comment"> *         Adam Dunkels &lt;adam@sics.se&gt;</span>
<a name="l00039"></a>00039 <span class="comment"> */</span>
<a name="l00040"></a>00040 
<a name="l00041"></a>00041 <span class="preprocessor">#include &quot;<a class="code" href="a00264.html" title="A MAC stack protocol that performs retransmissions when the underlying MAC layer has problems with co...">net/mac/csma.h</a>&quot;</span>
<a name="l00042"></a>00042 <span class="preprocessor">#include &quot;<a class="code" href="a00305.html" title="Header file for the Rime buffer (packetbuf) management.">net/packetbuf.h</a>&quot;</span>
<a name="l00043"></a>00043 <span class="preprocessor">#include &quot;<a class="code" href="a00311.html" title="Header file for the Rime queue buffer management.">net/queuebuf.h</a>&quot;</span>
<a name="l00044"></a>00044 
<a name="l00045"></a>00045 <span class="preprocessor">#include &quot;<a class="code" href="a00452.html" title="Header file for the callback timer.">sys/ctimer.h</a>&quot;</span>
<a name="l00046"></a>00046 <span class="preprocessor">#include &quot;sys/clock.h&quot;</span>
<a name="l00047"></a>00047 
<a name="l00048"></a>00048 <span class="preprocessor">#include &quot;lib/random.h&quot;</span>
<a name="l00049"></a>00049 
<a name="l00050"></a>00050 <span class="preprocessor">#include &quot;<a class="code" href="a00303.html" title="Include file for the Contiki low-layer network stack (NETSTACK)">net/netstack.h</a>&quot;</span>
<a name="l00051"></a>00051 
<a name="l00052"></a>00052 <span class="preprocessor">#include &quot;<a class="code" href="a00209.html" title="Linked list manipulation routines.">lib/list.h</a>&quot;</span>
<a name="l00053"></a>00053 <span class="preprocessor">#include &quot;<a class="code" href="a00215.html" title="Memory block allocation routines.">lib/memb.h</a>&quot;</span>
<a name="l00054"></a>00054 
<a name="l00055"></a>00055 <span class="preprocessor">#include &lt;string.h&gt;</span>
<a name="l00056"></a>00056 
<a name="l00057"></a>00057 <span class="preprocessor">#include &lt;stdio.h&gt;</span>
<a name="l00058"></a>00058 
<a name="l00059"></a>00059 <span class="preprocessor">#define DEBUG 0</span>
<a name="l00060"></a>00060 <span class="preprocessor"></span><span class="preprocessor">#if DEBUG</span>
<a name="l00061"></a>00061 <span class="preprocessor"></span><span class="preprocessor">#include &lt;stdio.h&gt;</span>
<a name="l00062"></a>00062 <span class="preprocessor">#define PRINTF(...) printf(__VA_ARGS__)</span>
<a name="l00063"></a>00063 <span class="preprocessor"></span><span class="preprocessor">#else </span><span class="comment">/* DEBUG */</span>
<a name="l00064"></a>00064 <span class="preprocessor">#define PRINTF(...)</span>
<a name="l00065"></a>00065 <span class="preprocessor"></span><span class="preprocessor">#endif </span><span class="comment">/* DEBUG */</span>
<a name="l00066"></a>00066 
<a name="l00067"></a>00067 <span class="preprocessor">#ifndef CSMA_MAX_MAC_TRANSMISSIONS</span>
<a name="l00068"></a>00068 <span class="preprocessor"></span><span class="preprocessor">#ifdef CSMA_CONF_MAX_MAC_TRANSMISSIONS</span>
<a name="l00069"></a>00069 <span class="preprocessor"></span><span class="preprocessor">#define CSMA_MAX_MAC_TRANSMISSIONS CSMA_CONF_MAX_MAC_TRANSMISSIONS</span>
<a name="l00070"></a>00070 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00071"></a>00071 <span class="preprocessor"></span><span class="preprocessor">#define CSMA_MAX_MAC_TRANSMISSIONS 3</span>
<a name="l00072"></a>00072 <span class="preprocessor"></span><span class="preprocessor">#endif </span><span class="comment">/* CSMA_CONF_MAX_MAC_TRANSMISSIONS */</span>
<a name="l00073"></a>00073 <span class="preprocessor">#endif </span><span class="comment">/* CSMA_MAX_MAC_TRANSMISSIONS */</span>
<a name="l00074"></a>00074 
<a name="l00075"></a>00075 <span class="preprocessor">#if CSMA_MAX_MAC_TRANSMISSIONS &lt; 1</span>
<a name="l00076"></a>00076 <span class="preprocessor"></span><span class="preprocessor">#error CSMA_CONF_MAX_MAC_TRANSMISSIONS must be at least 1.</span>
<a name="l00077"></a>00077 <span class="preprocessor"></span><span class="preprocessor">#error Change CSMA_CONF_MAX_MAC_TRANSMISSIONS in contiki-conf.h or in your Makefile.</span>
<a name="l00078"></a>00078 <span class="preprocessor"></span><span class="preprocessor">#endif </span><span class="comment">/* CSMA_CONF_MAX_MAC_TRANSMISSIONS &lt; 1 */</span>
<a name="l00079"></a>00079 
<a name="l00080"></a>00080 <span class="comment">/* Packet metadata */</span>
<a name="l00081"></a>00081 <span class="keyword">struct </span>qbuf_metadata {
<a name="l00082"></a>00082   mac_callback_t sent;
<a name="l00083"></a>00083   <span class="keywordtype">void</span> *cptr;
<a name="l00084"></a>00084   uint8_t max_transmissions;
<a name="l00085"></a>00085 };
<a name="l00086"></a>00086 
<a name="l00087"></a>00087 <span class="comment">/* Every neighbor has its own packet queue */</span>
<a name="l00088"></a>00088 <span class="keyword">struct </span>neighbor_queue {
<a name="l00089"></a>00089   <span class="keyword">struct </span>neighbor_queue *next;
<a name="l00090"></a>00090   rimeaddr_t addr;
<a name="l00091"></a>00091   <span class="keyword">struct </span>ctimer transmit_timer;
<a name="l00092"></a>00092   uint8_t transmissions;
<a name="l00093"></a>00093   uint8_t collisions, deferrals;
<a name="l00094"></a>00094   <a class="code" href="a01878.html#gab5acb500a887e1957292f3dddc5c9b79" title="Declare a linked list inside a structure declaraction.">LIST_STRUCT</a>(queued_packet_list);
<a name="l00095"></a>00095 };
<a name="l00096"></a>00096 
<a name="l00097"></a>00097 <span class="comment">/* The maximum number of co-existing neighbor queues */</span>
<a name="l00098"></a>00098 <span class="preprocessor">#ifdef CSMA_CONF_MAX_NEIGHBOR_QUEUES</span>
<a name="l00099"></a>00099 <span class="preprocessor"></span><span class="preprocessor">#define CSMA_MAX_NEIGHBOR_QUEUES CSMA_CONF_MAX_NEIGHBOR_QUEUES</span>
<a name="l00100"></a>00100 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00101"></a>00101 <span class="preprocessor"></span><span class="preprocessor">#define CSMA_MAX_NEIGHBOR_QUEUES 2</span>
<a name="l00102"></a>00102 <span class="preprocessor"></span><span class="preprocessor">#endif </span><span class="comment">/* CSMA_CONF_MAX_NEIGHBOR_QUEUES */</span>
<a name="l00103"></a>00103 
<a name="l00104"></a>00104 <span class="preprocessor">#define MAX_QUEUED_PACKETS QUEUEBUF_NUM</span>
<a name="l00105"></a>00105 <span class="preprocessor"></span><a class="code" href="a01880.html#gaf31774d02a69fd3f1c2b282454438cba" title="Declare a memory block.">MEMB</a>(neighbor_memb, <span class="keyword">struct</span> neighbor_queue, CSMA_MAX_NEIGHBOR_QUEUES);
<a name="l00106"></a>00106 <a class="code" href="a01880.html#gaf31774d02a69fd3f1c2b282454438cba" title="Declare a memory block.">MEMB</a>(packet_memb, <span class="keyword">struct</span> rdc_buf_list, MAX_QUEUED_PACKETS);
<a name="l00107"></a>00107 <a class="code" href="a01880.html#gaf31774d02a69fd3f1c2b282454438cba" title="Declare a memory block.">MEMB</a>(metadata_memb, <span class="keyword">struct</span> qbuf_metadata, MAX_QUEUED_PACKETS);
<a name="l00108"></a>00108 <a class="code" href="a01878.html#ga1e61a00c396ab8bd4141f54772e310ce" title="Declare a linked list.">LIST</a>(neighbor_list);
<a name="l00109"></a>00109 
<a name="l00110"></a>00110 <span class="keyword">static</span> <span class="keywordtype">void</span> packet_sent(<span class="keywordtype">void</span> *ptr, <span class="keywordtype">int</span> status, <span class="keywordtype">int</span> num_transmissions);
<a name="l00111"></a>00111 <span class="keyword">static</span> <span class="keywordtype">void</span> transmit_packet_list(<span class="keywordtype">void</span> *ptr);
<a name="l00112"></a>00112 
<a name="l00113"></a>00113 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00114"></a>00114 <span class="keyword">static</span> <span class="keyword">struct</span>
<a name="l00115"></a>00115 neighbor_queue *neighbor_queue_from_addr(<span class="keyword">const</span> rimeaddr_t *addr) {
<a name="l00116"></a>00116   <span class="keyword">struct </span>neighbor_queue *n = <a class="code" href="a01878.html#gacc0723982dcfcc54cfa6ba932ee63051" title="Get a pointer to the first element of a list.">list_head</a>(neighbor_list);
<a name="l00117"></a>00117   <span class="keywordflow">while</span>(n != <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>) {
<a name="l00118"></a>00118     <span class="keywordflow">if</span>(<a class="code" href="a01845.html#gaed118d3d8fe7e7ac9d6d00988268357e" title="Compare two Rime addresses.">rimeaddr_cmp</a>(&amp;n-&gt;addr, addr)) {
<a name="l00119"></a>00119       <span class="keywordflow">return</span> n;
<a name="l00120"></a>00120     }
<a name="l00121"></a>00121     n = <a class="code" href="a01878.html#gae9c13698f6fd8620561f0d1124ec8cdf" title="Get the next item following this item.">list_item_next</a>(n);
<a name="l00122"></a>00122   }
<a name="l00123"></a>00123   <span class="keywordflow">return</span> <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>;
<a name="l00124"></a>00124 }
<a name="l00125"></a>00125 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00126"></a>00126 <span class="keyword">static</span> clock_time_t
<a name="l00127"></a>00127 default_timebase(<span class="keywordtype">void</span>)
<a name="l00128"></a>00128 {
<a name="l00129"></a>00129   clock_time_t time;
<a name="l00130"></a>00130   <span class="comment">/* The retransmission time must be proportional to the channel</span>
<a name="l00131"></a>00131 <span class="comment">     check interval of the underlying radio duty cycling layer. */</span>
<a name="l00132"></a>00132   time = NETSTACK_RDC.<a class="code" href="a00074.html#ad23ce4d601bb33cdcab875647f7cd093" title="Returns the channel check interval, expressed in clock_time_t ticks.">channel_check_interval</a>();
<a name="l00133"></a>00133 
<a name="l00134"></a>00134   <span class="comment">/* If the radio duty cycle has no channel check interval (i.e., it</span>
<a name="l00135"></a>00135 <span class="comment">     does not turn the radio off), we make the retransmission time</span>
<a name="l00136"></a>00136 <span class="comment">     proportional to the configured MAC channel check rate. */</span>
<a name="l00137"></a>00137   <span class="keywordflow">if</span>(time == 0) {
<a name="l00138"></a>00138     time = <a class="code" href="a01859.html#gae3ced0551b26c9b99cb45a86f34d100a" title="A second, measured in system clock time.">CLOCK_SECOND</a> / NETSTACK_RDC_CHANNEL_CHECK_RATE;
<a name="l00139"></a>00139   }
<a name="l00140"></a>00140   <span class="keywordflow">return</span> time;
<a name="l00141"></a>00141 }
<a name="l00142"></a>00142 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00143"></a>00143 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00144"></a>00144 transmit_packet_list(<span class="keywordtype">void</span> *ptr)
<a name="l00145"></a>00145 {
<a name="l00146"></a>00146   <span class="keyword">struct </span>neighbor_queue *n = ptr;
<a name="l00147"></a>00147   <span class="keywordflow">if</span>(n) {
<a name="l00148"></a>00148     <span class="keyword">struct </span>rdc_buf_list *q = <a class="code" href="a01878.html#gacc0723982dcfcc54cfa6ba932ee63051" title="Get a pointer to the first element of a list.">list_head</a>(n-&gt;queued_packet_list);
<a name="l00149"></a>00149     <span class="keywordflow">if</span>(q != <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>) {
<a name="l00150"></a>00150       PRINTF(<span class="stringliteral">&quot;csma: preparing number %d %p, queue len %d\n&quot;</span>, n-&gt;transmissions, q,
<a name="l00151"></a>00151           <a class="code" href="a01878.html#ga96f2c18e2a603b297e3c1cae6198dcca" title="Get the length of a list.">list_length</a>(n-&gt;queued_packet_list));
<a name="l00152"></a>00152       <span class="comment">/* Send packets in the neighbor&#39;s list */</span>
<a name="l00153"></a>00153       NETSTACK_RDC.<a class="code" href="a00074.html#a6a206764c17c4037609772a363c12513" title="Send a packet list.">send_list</a>(packet_sent, n, q);
<a name="l00154"></a>00154     }
<a name="l00155"></a>00155   }
<a name="l00156"></a>00156 }
<a name="l00157"></a>00157 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00158"></a>00158 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00159"></a>00159 free_first_packet(<span class="keyword">struct</span> neighbor_queue *n)
<a name="l00160"></a>00160 {
<a name="l00161"></a>00161   <span class="keyword">struct </span>rdc_buf_list *q = <a class="code" href="a01878.html#gacc0723982dcfcc54cfa6ba932ee63051" title="Get a pointer to the first element of a list.">list_head</a>(n-&gt;queued_packet_list);
<a name="l00162"></a>00162   <span class="keywordflow">if</span>(q != <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>) {
<a name="l00163"></a>00163     <span class="comment">/* Remove first packet from list and deallocate */</span>
<a name="l00164"></a>00164     queuebuf_free(q-&gt;buf);
<a name="l00165"></a>00165     <a class="code" href="a01878.html#ga846aef3d9db78d0755e6bb39e7da485e" title="Remove the first object on a list.">list_pop</a>(n-&gt;queued_packet_list);
<a name="l00166"></a>00166     <a class="code" href="a01880.html#ga513698da82ec79ec7115ffa0d80df77d" title="Deallocate a memory block from a memory block previously declared with MEMB().">memb_free</a>(&amp;metadata_memb, q-&gt;ptr);
<a name="l00167"></a>00167     <a class="code" href="a01880.html#ga513698da82ec79ec7115ffa0d80df77d" title="Deallocate a memory block from a memory block previously declared with MEMB().">memb_free</a>(&amp;packet_memb, q);
<a name="l00168"></a>00168     PRINTF(<span class="stringliteral">&quot;csma: free_queued_packet, queue length %d\n&quot;</span>,
<a name="l00169"></a>00169         <a class="code" href="a01878.html#ga96f2c18e2a603b297e3c1cae6198dcca" title="Get the length of a list.">list_length</a>(n-&gt;queued_packet_list));
<a name="l00170"></a>00170     <span class="keywordflow">if</span>(<a class="code" href="a01878.html#gacc0723982dcfcc54cfa6ba932ee63051" title="Get a pointer to the first element of a list.">list_head</a>(n-&gt;queued_packet_list)) {
<a name="l00171"></a>00171       <span class="comment">/* There is a next packet. We reset current tx information */</span>
<a name="l00172"></a>00172       n-&gt;transmissions = 0;
<a name="l00173"></a>00173       n-&gt;collisions = 0;
<a name="l00174"></a>00174       n-&gt;deferrals = 0;
<a name="l00175"></a>00175       <span class="comment">/* Set a timer for next transmissions */</span>
<a name="l00176"></a>00176       <a class="code" href="a01861.html#ga27fd17da97a91042bfb1adf1991cc545" title="Set a callback timer.">ctimer_set</a>(&amp;n-&gt;transmit_timer, default_timebase(), transmit_packet_list, n);
<a name="l00177"></a>00177     } <span class="keywordflow">else</span> {
<a name="l00178"></a>00178       <span class="comment">/* This was the last packet in the queue, we free the neighbor */</span>
<a name="l00179"></a>00179       <a class="code" href="a01861.html#ga18f970561c46fe308991fcf8002838b4" title="Stop a pending callback timer.">ctimer_stop</a>(&amp;n-&gt;transmit_timer);
<a name="l00180"></a>00180       <a class="code" href="a01878.html#ga3eb717d9997a980e937e2ea8b0c07677" title="Remove a specific element from a list.">list_remove</a>(neighbor_list, n);
<a name="l00181"></a>00181       <a class="code" href="a01880.html#ga513698da82ec79ec7115ffa0d80df77d" title="Deallocate a memory block from a memory block previously declared with MEMB().">memb_free</a>(&amp;neighbor_memb, n);
<a name="l00182"></a>00182     }
<a name="l00183"></a>00183   }
<a name="l00184"></a>00184 }
<a name="l00185"></a>00185 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00186"></a>00186 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00187"></a>00187 packet_sent(<span class="keywordtype">void</span> *ptr, <span class="keywordtype">int</span> status, <span class="keywordtype">int</span> num_transmissions)
<a name="l00188"></a>00188 {
<a name="l00189"></a>00189   <span class="keyword">struct </span>neighbor_queue *n = ptr;
<a name="l00190"></a>00190   <span class="keyword">struct </span>rdc_buf_list *q = <a class="code" href="a01878.html#gacc0723982dcfcc54cfa6ba932ee63051" title="Get a pointer to the first element of a list.">list_head</a>(n-&gt;queued_packet_list);
<a name="l00191"></a>00191   <span class="keyword">struct </span>qbuf_metadata *metadata = (<span class="keyword">struct </span>qbuf_metadata *)q-&gt;ptr;
<a name="l00192"></a>00192   clock_time_t time = 0;
<a name="l00193"></a>00193   mac_callback_t sent;
<a name="l00194"></a>00194   <span class="keywordtype">void</span> *cptr;
<a name="l00195"></a>00195   <span class="keywordtype">int</span> num_tx;
<a name="l00196"></a>00196   <span class="keywordtype">int</span> backoff_transmissions;
<a name="l00197"></a>00197 
<a name="l00198"></a>00198   <span class="keywordflow">switch</span>(status) {
<a name="l00199"></a>00199   <span class="keywordflow">case</span> <a class="code" href="a00280.html#a385c44f6fb256e5716a2302a5b940388a7289d883fcead5ad7d148f222a98381a" title="The MAC layer transmission was OK.">MAC_TX_OK</a>:
<a name="l00200"></a>00200   <span class="keywordflow">case</span> <a class="code" href="a00280.html#a385c44f6fb256e5716a2302a5b940388a94644931ae3262ac4b8c1f8077666205" title="The MAC layer deferred the transmission for a later time.">MAC_TX_NOACK</a>:
<a name="l00201"></a>00201     n-&gt;transmissions++;
<a name="l00202"></a>00202     <span class="keywordflow">break</span>;
<a name="l00203"></a>00203   <span class="keywordflow">case</span> <a class="code" href="a00280.html#a385c44f6fb256e5716a2302a5b940388a5601d8ac68c1b9f5adf34b5e7f168998" title="The MAC layer did not get an acknowledgement for the packet.">MAC_TX_COLLISION</a>:
<a name="l00204"></a>00204     n-&gt;collisions++;
<a name="l00205"></a>00205     <span class="keywordflow">break</span>;
<a name="l00206"></a>00206   <span class="keywordflow">case</span> <a class="code" href="a00280.html#a385c44f6fb256e5716a2302a5b940388a6e48b527e92f5c370357d7abb721eba5" title="The MAC layer transmission could not be performed because of an error.">MAC_TX_DEFERRED</a>:
<a name="l00207"></a>00207     n-&gt;deferrals++;
<a name="l00208"></a>00208     <span class="keywordflow">break</span>;
<a name="l00209"></a>00209   }
<a name="l00210"></a>00210 
<a name="l00211"></a>00211   sent = metadata-&gt;sent;
<a name="l00212"></a>00212   cptr = metadata-&gt;cptr;
<a name="l00213"></a>00213   num_tx = n-&gt;transmissions;
<a name="l00214"></a>00214 
<a name="l00215"></a>00215   <span class="keywordflow">if</span>(status == <a class="code" href="a00280.html#a385c44f6fb256e5716a2302a5b940388a5601d8ac68c1b9f5adf34b5e7f168998" title="The MAC layer did not get an acknowledgement for the packet.">MAC_TX_COLLISION</a> ||
<a name="l00216"></a>00216      status == <a class="code" href="a00280.html#a385c44f6fb256e5716a2302a5b940388a94644931ae3262ac4b8c1f8077666205" title="The MAC layer deferred the transmission for a later time.">MAC_TX_NOACK</a>) {
<a name="l00217"></a>00217 
<a name="l00218"></a>00218     <span class="comment">/* If the transmission was not performed because of a collision or</span>
<a name="l00219"></a>00219 <span class="comment">       noack, we must retransmit the packet. */</span>
<a name="l00220"></a>00220     
<a name="l00221"></a>00221     <span class="keywordflow">switch</span>(status) {
<a name="l00222"></a>00222     <span class="keywordflow">case</span> <a class="code" href="a00280.html#a385c44f6fb256e5716a2302a5b940388a5601d8ac68c1b9f5adf34b5e7f168998" title="The MAC layer did not get an acknowledgement for the packet.">MAC_TX_COLLISION</a>:
<a name="l00223"></a>00223       PRINTF(<span class="stringliteral">&quot;csma: rexmit collision %d\n&quot;</span>, n-&gt;transmissions);
<a name="l00224"></a>00224       <span class="keywordflow">break</span>;
<a name="l00225"></a>00225     <span class="keywordflow">case</span> <a class="code" href="a00280.html#a385c44f6fb256e5716a2302a5b940388a94644931ae3262ac4b8c1f8077666205" title="The MAC layer deferred the transmission for a later time.">MAC_TX_NOACK</a>:
<a name="l00226"></a>00226       PRINTF(<span class="stringliteral">&quot;csma: rexmit noack %d\n&quot;</span>, n-&gt;transmissions);
<a name="l00227"></a>00227       <span class="keywordflow">break</span>;
<a name="l00228"></a>00228     <span class="keywordflow">default</span>:
<a name="l00229"></a>00229       PRINTF(<span class="stringliteral">&quot;csma: rexmit err %d, %d\n&quot;</span>, status, n-&gt;transmissions);
<a name="l00230"></a>00230     }
<a name="l00231"></a>00231 
<a name="l00232"></a>00232     <span class="comment">/* The retransmission time must be proportional to the channel</span>
<a name="l00233"></a>00233 <span class="comment">       check interval of the underlying radio duty cycling layer. */</span>
<a name="l00234"></a>00234     time = default_timebase();
<a name="l00235"></a>00235 
<a name="l00236"></a>00236     <span class="comment">/* The retransmission time uses a linear backoff so that the</span>
<a name="l00237"></a>00237 <span class="comment">       interval between the transmissions increase with each</span>
<a name="l00238"></a>00238 <span class="comment">       retransmit. */</span>
<a name="l00239"></a>00239     backoff_transmissions = n-&gt;transmissions + 1;
<a name="l00240"></a>00240 
<a name="l00241"></a>00241     <span class="comment">/* Clamp the number of backoffs so that we don&#39;t get a too long</span>
<a name="l00242"></a>00242 <span class="comment">       timeout here, since that will delay all packets in the</span>
<a name="l00243"></a>00243 <span class="comment">       queue. */</span>
<a name="l00244"></a>00244     <span class="keywordflow">if</span>(backoff_transmissions &gt; 3) {
<a name="l00245"></a>00245       backoff_transmissions = 3;
<a name="l00246"></a>00246     }
<a name="l00247"></a>00247 
<a name="l00248"></a>00248     time = time + (<a class="code" href="a00223.html#a3b38526f57c5311c58c1440e18f3cebe" title="Generates a new random number using the cc2430 RNG.">random_rand</a>() % (backoff_transmissions * time));
<a name="l00249"></a>00249 
<a name="l00250"></a>00250     <span class="keywordflow">if</span>(n-&gt;transmissions &lt; metadata-&gt;max_transmissions) {
<a name="l00251"></a>00251       PRINTF(<span class="stringliteral">&quot;csma: retransmitting with time %lu %p\n&quot;</span>, time, q);
<a name="l00252"></a>00252       <a class="code" href="a01861.html#ga27fd17da97a91042bfb1adf1991cc545" title="Set a callback timer.">ctimer_set</a>(&amp;n-&gt;transmit_timer, time,
<a name="l00253"></a>00253                  transmit_packet_list, n);
<a name="l00254"></a>00254       <span class="comment">/* This is needed to correctly attribute energy that we spent</span>
<a name="l00255"></a>00255 <span class="comment">         transmitting this packet. */</span>
<a name="l00256"></a>00256       queuebuf_update_attr_from_packetbuf(q-&gt;buf);
<a name="l00257"></a>00257     } <span class="keywordflow">else</span> {
<a name="l00258"></a>00258       PRINTF(<span class="stringliteral">&quot;csma: drop with status %d after %d transmissions, %d collisions\n&quot;</span>,
<a name="l00259"></a>00259              status, n-&gt;transmissions, n-&gt;collisions);
<a name="l00260"></a>00260       free_first_packet(n);
<a name="l00261"></a>00261       mac_call_sent_callback(sent, cptr, status, num_tx);
<a name="l00262"></a>00262     }
<a name="l00263"></a>00263   } <span class="keywordflow">else</span> {
<a name="l00264"></a>00264     <span class="keywordflow">if</span>(status == <a class="code" href="a00280.html#a385c44f6fb256e5716a2302a5b940388a7289d883fcead5ad7d148f222a98381a" title="The MAC layer transmission was OK.">MAC_TX_OK</a>) {
<a name="l00265"></a>00265       PRINTF(<span class="stringliteral">&quot;csma: rexmit ok %d\n&quot;</span>, n-&gt;transmissions);
<a name="l00266"></a>00266     } <span class="keywordflow">else</span> {
<a name="l00267"></a>00267       PRINTF(<span class="stringliteral">&quot;csma: rexmit failed %d: %d\n&quot;</span>, n-&gt;transmissions, status);
<a name="l00268"></a>00268     }
<a name="l00269"></a>00269     free_first_packet(n);
<a name="l00270"></a>00270     mac_call_sent_callback(sent, cptr, status, num_tx);
<a name="l00271"></a>00271   }
<a name="l00272"></a>00272 }
<a name="l00273"></a>00273 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00274"></a>00274 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00275"></a>00275 send_packet(mac_callback_t sent, <span class="keywordtype">void</span> *ptr)
<a name="l00276"></a>00276 {
<a name="l00277"></a>00277   <span class="keyword">struct </span>rdc_buf_list *q;
<a name="l00278"></a>00278   <span class="keyword">struct </span>neighbor_queue *n;
<a name="l00279"></a>00279   <span class="keyword">static</span> uint16_t seqno;
<a name="l00280"></a>00280 
<a name="l00281"></a>00281   packetbuf_set_attr(PACKETBUF_ATTR_MAC_SEQNO, seqno++);
<a name="l00282"></a>00282   
<a name="l00283"></a>00283   <span class="comment">/* If the packet is a broadcast, do not allocate a queue</span>
<a name="l00284"></a>00284 <span class="comment">     entry. Instead, just send it out.  */</span>
<a name="l00285"></a>00285   <span class="keywordflow">if</span>(!<a class="code" href="a01845.html#gaed118d3d8fe7e7ac9d6d00988268357e" title="Compare two Rime addresses.">rimeaddr_cmp</a>(packetbuf_addr(PACKETBUF_ADDR_RECEIVER),
<a name="l00286"></a>00286                    &amp;<a class="code" href="a01845.html#gaa96ae7849482147440e77751444faa6d" title="The null Rime address.">rimeaddr_null</a>)) {
<a name="l00287"></a>00287     <span class="keyword">const</span> rimeaddr_t *addr = packetbuf_addr(PACKETBUF_ADDR_RECEIVER);
<a name="l00288"></a>00288 
<a name="l00289"></a>00289     <span class="comment">/* Look for the neighbor entry */</span>
<a name="l00290"></a>00290     n = neighbor_queue_from_addr(addr);
<a name="l00291"></a>00291     <span class="keywordflow">if</span>(n == <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>) {
<a name="l00292"></a>00292       <span class="comment">/* Allocate a new neighbor entry */</span>
<a name="l00293"></a>00293       n = <a class="code" href="a01880.html#ga9eb12536c921ee25d3886ed9640fe6fe" title="Allocate a memory block from a block of memory declared with MEMB().">memb_alloc</a>(&amp;neighbor_memb);
<a name="l00294"></a>00294       <span class="keywordflow">if</span>(n != <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>) {
<a name="l00295"></a>00295         <span class="comment">/* Init neighbor entry */</span>
<a name="l00296"></a>00296         <a class="code" href="a01845.html#gacd6a22e93c7a4eb02d901743c958c2b2" title="Copy a Rime address.">rimeaddr_copy</a>(&amp;n-&gt;addr, addr);
<a name="l00297"></a>00297         n-&gt;transmissions = 0;
<a name="l00298"></a>00298         n-&gt;collisions = 0;
<a name="l00299"></a>00299         n-&gt;deferrals = 0;
<a name="l00300"></a>00300         <span class="comment">/* Init packet list for this neighbor */</span>
<a name="l00301"></a>00301         <a class="code" href="a01878.html#gadcb86fe4485a0f8ea79541117641f730" title="Initialize a linked list that is part of a structure.">LIST_STRUCT_INIT</a>(n, queued_packet_list);
<a name="l00302"></a>00302         <span class="comment">/* Add neighbor to the list */</span>
<a name="l00303"></a>00303         <a class="code" href="a01878.html#ga775c0dfc08dca991297df7b419b7be43" title="Add an item at the end of a list.">list_add</a>(neighbor_list, n);
<a name="l00304"></a>00304       }
<a name="l00305"></a>00305     }
<a name="l00306"></a>00306 
<a name="l00307"></a>00307     <span class="keywordflow">if</span>(n != <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>) {
<a name="l00308"></a>00308       <span class="comment">/* Add packet to the neighbor&#39;s queue */</span>
<a name="l00309"></a>00309       q = <a class="code" href="a01880.html#ga9eb12536c921ee25d3886ed9640fe6fe" title="Allocate a memory block from a block of memory declared with MEMB().">memb_alloc</a>(&amp;packet_memb);
<a name="l00310"></a>00310       <span class="keywordflow">if</span>(q != <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>) {
<a name="l00311"></a>00311         q-&gt;ptr = <a class="code" href="a01880.html#ga9eb12536c921ee25d3886ed9640fe6fe" title="Allocate a memory block from a block of memory declared with MEMB().">memb_alloc</a>(&amp;metadata_memb);
<a name="l00312"></a>00312         <span class="keywordflow">if</span>(q-&gt;ptr != <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>) {
<a name="l00313"></a>00313           q-&gt;buf = queuebuf_new_from_packetbuf();
<a name="l00314"></a>00314           <span class="keywordflow">if</span>(q-&gt;buf != <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>) {
<a name="l00315"></a>00315             <span class="keyword">struct </span>qbuf_metadata *metadata = (<span class="keyword">struct </span>qbuf_metadata *)q-&gt;ptr;
<a name="l00316"></a>00316             <span class="comment">/* Neighbor and packet successfully allocated */</span>
<a name="l00317"></a>00317             <span class="keywordflow">if</span>(packetbuf_attr(PACKETBUF_ATTR_MAX_MAC_TRANSMISSIONS) == 0) {
<a name="l00318"></a>00318               <span class="comment">/* Use default configuration for max transmissions */</span>
<a name="l00319"></a>00319               metadata-&gt;max_transmissions = CSMA_MAX_MAC_TRANSMISSIONS;
<a name="l00320"></a>00320             } <span class="keywordflow">else</span> {
<a name="l00321"></a>00321               metadata-&gt;max_transmissions =
<a name="l00322"></a>00322                   packetbuf_attr(PACKETBUF_ATTR_MAX_MAC_TRANSMISSIONS);
<a name="l00323"></a>00323             }
<a name="l00324"></a>00324             metadata-&gt;sent = sent;
<a name="l00325"></a>00325             metadata-&gt;cptr = ptr;
<a name="l00326"></a>00326 
<a name="l00327"></a>00327             <span class="keywordflow">if</span>(packetbuf_attr(PACKETBUF_ATTR_PACKET_TYPE) ==
<a name="l00328"></a>00328                 PACKETBUF_ATTR_PACKET_TYPE_ACK) {
<a name="l00329"></a>00329               <a class="code" href="a01878.html#gaaa39517a2e9ec81c34e4740d43ea7150" title="Add an item to the start of the list.">list_push</a>(n-&gt;queued_packet_list, q);
<a name="l00330"></a>00330             } <span class="keywordflow">else</span> {
<a name="l00331"></a>00331               <a class="code" href="a01878.html#ga775c0dfc08dca991297df7b419b7be43" title="Add an item at the end of a list.">list_add</a>(n-&gt;queued_packet_list, q);
<a name="l00332"></a>00332             }
<a name="l00333"></a>00333 
<a name="l00334"></a>00334             <span class="comment">/* If q is the first packet in the neighbor&#39;s queue, send asap */</span>
<a name="l00335"></a>00335             <span class="keywordflow">if</span>(<a class="code" href="a01878.html#gacc0723982dcfcc54cfa6ba932ee63051" title="Get a pointer to the first element of a list.">list_head</a>(n-&gt;queued_packet_list) == q) {
<a name="l00336"></a>00336               <a class="code" href="a01861.html#ga27fd17da97a91042bfb1adf1991cc545" title="Set a callback timer.">ctimer_set</a>(&amp;n-&gt;transmit_timer, 0, transmit_packet_list, n);
<a name="l00337"></a>00337             }
<a name="l00338"></a>00338             <span class="keywordflow">return</span>;
<a name="l00339"></a>00339           }
<a name="l00340"></a>00340           <a class="code" href="a01880.html#ga513698da82ec79ec7115ffa0d80df77d" title="Deallocate a memory block from a memory block previously declared with MEMB().">memb_free</a>(&amp;metadata_memb, q-&gt;ptr);
<a name="l00341"></a>00341           PRINTF(<span class="stringliteral">&quot;csma: could not allocate queuebuf, dropping packet\n&quot;</span>);
<a name="l00342"></a>00342         }
<a name="l00343"></a>00343         <a class="code" href="a01880.html#ga513698da82ec79ec7115ffa0d80df77d" title="Deallocate a memory block from a memory block previously declared with MEMB().">memb_free</a>(&amp;packet_memb, q);
<a name="l00344"></a>00344         PRINTF(<span class="stringliteral">&quot;csma: could not allocate queuebuf, dropping packet\n&quot;</span>);
<a name="l00345"></a>00345       }
<a name="l00346"></a>00346       <span class="comment">/* The packet allocation failed. Remove and free neighbor entry if empty. */</span>
<a name="l00347"></a>00347       <span class="keywordflow">if</span>(<a class="code" href="a01878.html#ga96f2c18e2a603b297e3c1cae6198dcca" title="Get the length of a list.">list_length</a>(n-&gt;queued_packet_list) == 0) {
<a name="l00348"></a>00348         <a class="code" href="a01878.html#ga3eb717d9997a980e937e2ea8b0c07677" title="Remove a specific element from a list.">list_remove</a>(neighbor_list, n);
<a name="l00349"></a>00349         <a class="code" href="a01880.html#ga513698da82ec79ec7115ffa0d80df77d" title="Deallocate a memory block from a memory block previously declared with MEMB().">memb_free</a>(&amp;neighbor_memb, n);
<a name="l00350"></a>00350       }
<a name="l00351"></a>00351       PRINTF(<span class="stringliteral">&quot;csma: could not allocate packet, dropping packet\n&quot;</span>);
<a name="l00352"></a>00352     } <span class="keywordflow">else</span> {
<a name="l00353"></a>00353       PRINTF(<span class="stringliteral">&quot;csma: could not allocate neighbor, dropping packet\n&quot;</span>);
<a name="l00354"></a>00354     }
<a name="l00355"></a>00355     mac_call_sent_callback(sent, ptr, <a class="code" href="a00280.html#a385c44f6fb256e5716a2302a5b940388afcf20dce5dfb0133853827c1270249d9" title="The MAC layer transmission could not be performed because of a fatal error.">MAC_TX_ERR</a>, 1);
<a name="l00356"></a>00356   } <span class="keywordflow">else</span> {
<a name="l00357"></a>00357     PRINTF(<span class="stringliteral">&quot;csma: send broadcast\n&quot;</span>);
<a name="l00358"></a>00358     NETSTACK_RDC.<a class="code" href="a00074.html#a9aff10504341950b09e53cd075cfb549" title="Send a packet from the Rime buffer.">send</a>(sent, ptr);
<a name="l00359"></a>00359   }
<a name="l00360"></a>00360 }
<a name="l00361"></a>00361 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00362"></a>00362 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00363"></a>00363 input_packet(<span class="keywordtype">void</span>)
<a name="l00364"></a>00364 {
<a name="l00365"></a>00365   NETSTACK_NETWORK.<a class="code" href="a00066.html#ab731b9526416dfdc094f45df8363030c" title="Callback for getting notified of incoming packet.">input</a>();
<a name="l00366"></a>00366 }
<a name="l00367"></a>00367 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00368"></a>00368 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00369"></a>00369 on(<span class="keywordtype">void</span>)
<a name="l00370"></a>00370 {
<a name="l00371"></a>00371   <span class="keywordflow">return</span> NETSTACK_RDC.<a class="code" href="a00074.html#a5663cc6ea1b4620bc05064b15106324d" title="Turn the MAC layer on.">on</a>();
<a name="l00372"></a>00372 }
<a name="l00373"></a>00373 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00374"></a>00374 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00375"></a>00375 off(<span class="keywordtype">int</span> keep_radio_on)
<a name="l00376"></a>00376 {
<a name="l00377"></a>00377   <span class="keywordflow">return</span> NETSTACK_RDC.<a class="code" href="a00074.html#a20229fb8ca925cdb520a7d41b27e8396" title="Turn the MAC layer off.">off</a>(keep_radio_on);
<a name="l00378"></a>00378 }
<a name="l00379"></a>00379 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00380"></a>00380 <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span>
<a name="l00381"></a>00381 channel_check_interval(<span class="keywordtype">void</span>)
<a name="l00382"></a>00382 {
<a name="l00383"></a>00383   <span class="keywordflow">if</span>(NETSTACK_RDC.<a class="code" href="a00074.html#ad23ce4d601bb33cdcab875647f7cd093" title="Returns the channel check interval, expressed in clock_time_t ticks.">channel_check_interval</a>) {
<a name="l00384"></a>00384     <span class="keywordflow">return</span> NETSTACK_RDC.<a class="code" href="a00074.html#ad23ce4d601bb33cdcab875647f7cd093" title="Returns the channel check interval, expressed in clock_time_t ticks.">channel_check_interval</a>();
<a name="l00385"></a>00385   }
<a name="l00386"></a>00386   <span class="keywordflow">return</span> 0;
<a name="l00387"></a>00387 }
<a name="l00388"></a>00388 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00389"></a>00389 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00390"></a>00390 init(<span class="keywordtype">void</span>)
<a name="l00391"></a>00391 {
<a name="l00392"></a>00392   <a class="code" href="a01880.html#gab8f8dad927b501d8b4ed4340d1bcf4fb" title="Initialize a memory block that was declared with MEMB().">memb_init</a>(&amp;packet_memb);
<a name="l00393"></a>00393   <a class="code" href="a01880.html#gab8f8dad927b501d8b4ed4340d1bcf4fb" title="Initialize a memory block that was declared with MEMB().">memb_init</a>(&amp;metadata_memb);
<a name="l00394"></a>00394   <a class="code" href="a01880.html#gab8f8dad927b501d8b4ed4340d1bcf4fb" title="Initialize a memory block that was declared with MEMB().">memb_init</a>(&amp;neighbor_memb);
<a name="l00395"></a>00395 }
<a name="l00396"></a>00396 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00397"></a>00397 <span class="keyword">const</span> <span class="keyword">struct </span><a class="code" href="a00061.html" title="The structure of a MAC protocol driver in Contiki.">mac_driver</a> csma_driver = {
<a name="l00398"></a>00398   <span class="stringliteral">&quot;CSMA&quot;</span>,
<a name="l00399"></a>00399   <a class="code" href="a00061.html#a8d70b9d00bde293223c72b8dc92466f2" title="Initialize the MAC driver.">init</a>,
<a name="l00400"></a>00400   send_packet,
<a name="l00401"></a>00401   input_packet,
<a name="l00402"></a>00402   <a class="code" href="a00061.html#aada9e96b3e7834173cba2f7af5efb53a" title="Turn the MAC layer on.">on</a>,
<a name="l00403"></a>00403   <a class="code" href="a00061.html#a760096ea689a43b94b6624226b088ef7" title="Turn the MAC layer off.">off</a>,
<a name="l00404"></a>00404   <a class="code" href="a00061.html#a1edf3cd4f67d20b52be7ea2bc9c02c26" title="Returns the channel check interval, expressed in clock_time_t ticks.">channel_check_interval</a>,
<a name="l00405"></a>00405 };
<a name="l00406"></a>00406 <span class="comment">/*---------------------------------------------------------------------------*/</span>
</pre></div></div><!-- contents -->


<hr class="footer"/><address class="footer"><small>
Generated on Sun Jan 13 2013 10:57:22 for Contiki 2.6 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.7.6.1
</small></address>

</body>
</html>
