<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>Contiki 2.6: cpu/avr/rtimer-arch.c Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />



</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">Contiki 2.6
   
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.html"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.html"><span>Modules</span></a></li>
      <li><a href="annotated.html"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li><a href="dirs.html"><span>Directories</span></a></li>
      <li><a href="examples.html"><span>Examples</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>Globals</span></a></li>
    </ul>
  </div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="dir_bd0bc4a94a775a8b7ece71496ffca05e.html">cpu</a>      </li>
      <li class="navelem"><a class="el" href="dir_ae679ce24d3488b6e63878e50716e0ed.html">avr</a>      </li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">rtimer-arch.c</div>  </div>
</div><!--header-->
<div class="contents">
<a href="a00582.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment"> * Copyright (c) 2007, Swedish Institute of Computer Science.</span>
<a name="l00003"></a>00003 <span class="comment"> * All rights reserved.</span>
<a name="l00004"></a>00004 <span class="comment"> *</span>
<a name="l00005"></a>00005 <span class="comment"> * Redistribution and use in source and binary forms, with or without</span>
<a name="l00006"></a>00006 <span class="comment"> * modification, are permitted provided that the following conditions</span>
<a name="l00007"></a>00007 <span class="comment"> * are met:</span>
<a name="l00008"></a>00008 <span class="comment"> * 1. Redistributions of source code must retain the above copyright</span>
<a name="l00009"></a>00009 <span class="comment"> *    notice, this list of conditions and the following disclaimer.</span>
<a name="l00010"></a>00010 <span class="comment"> * 2. Redistributions in binary form must reproduce the above copyright</span>
<a name="l00011"></a>00011 <span class="comment"> *    notice, this list of conditions and the following disclaimer in the</span>
<a name="l00012"></a>00012 <span class="comment"> *    documentation and/or other materials provided with the distribution.</span>
<a name="l00013"></a>00013 <span class="comment"> * 3. Neither the name of the Institute nor the names of its contributors</span>
<a name="l00014"></a>00014 <span class="comment"> *    may be used to endorse or promote products derived from this software</span>
<a name="l00015"></a>00015 <span class="comment"> *    without specific prior written permission.</span>
<a name="l00016"></a>00016 <span class="comment"> *</span>
<a name="l00017"></a>00017 <span class="comment"> * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS&#39;&#39; AND</span>
<a name="l00018"></a>00018 <span class="comment"> * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</span>
<a name="l00019"></a>00019 <span class="comment"> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE</span>
<a name="l00020"></a>00020 <span class="comment"> * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE</span>
<a name="l00021"></a>00021 <span class="comment"> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</span>
<a name="l00022"></a>00022 <span class="comment"> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS</span>
<a name="l00023"></a>00023 <span class="comment"> * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)</span>
<a name="l00024"></a>00024 <span class="comment"> * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT</span>
<a name="l00025"></a>00025 <span class="comment"> * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY</span>
<a name="l00026"></a>00026 <span class="comment"> * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF</span>
<a name="l00027"></a>00027 <span class="comment"> * SUCH DAMAGE.</span>
<a name="l00028"></a>00028 <span class="comment"> *</span>
<a name="l00029"></a>00029 <span class="comment"> * This file is part of the Contiki operating system.</span>
<a name="l00030"></a>00030 <span class="comment"> *</span>
<a name="l00031"></a>00031 <span class="comment"> * $Id: rtimer-arch.c,v 1.10 2010/02/28 21:29:19 dak664 Exp $</span>
<a name="l00032"></a>00032 <span class="comment"> */</span>
<a name="l00033"></a>00033 <span class="comment"></span>
<a name="l00034"></a>00034 <span class="comment">/**</span>
<a name="l00035"></a>00035 <span class="comment"> * \file</span>
<a name="l00036"></a>00036 <span class="comment"> *         AVR-specific rtimer code</span>
<a name="l00037"></a>00037 <span class="comment"> *         Defaults to Timer3 for those ATMEGAs that have it.</span>
<a name="l00038"></a>00038 <span class="comment"> *         If Timer3 not present Timer1 will be used.</span>
<a name="l00039"></a>00039 <span class="comment"> * \author</span>
<a name="l00040"></a>00040 <span class="comment"> *         Fredrik Osterlind &lt;fros@sics.se&gt;</span>
<a name="l00041"></a>00041 <span class="comment"> *         Joakim Eriksson &lt;joakime@sics.se&gt;</span>
<a name="l00042"></a>00042 <span class="comment"> */</span>
<a name="l00043"></a>00043 
<a name="l00044"></a>00044 <span class="comment">/* OBS: 8 seconds maximum time! */</span>
<a name="l00045"></a>00045 
<a name="l00046"></a>00046 <span class="preprocessor">#include &lt;avr/io.h&gt;</span>
<a name="l00047"></a>00047 <span class="preprocessor">#include &lt;avr/interrupt.h&gt;</span>
<a name="l00048"></a>00048 <span class="preprocessor">#include &lt;stdio.h&gt;</span>
<a name="l00049"></a>00049 
<a name="l00050"></a>00050 <span class="preprocessor">#include &quot;<a class="code" href="a00455.html" title="Header file for the energy estimation mechanism.">sys/energest.h</a>&quot;</span>
<a name="l00051"></a>00051 <span class="preprocessor">#include &quot;<a class="code" href="a00476.html" title="Header file for the real-time timer module.">sys/rtimer.h</a>&quot;</span>
<a name="l00052"></a>00052 <span class="preprocessor">#include &quot;rtimer-arch.h&quot;</span>
<a name="l00053"></a>00053 
<a name="l00054"></a>00054 <span class="preprocessor">#if defined(__AVR_ATmega1281__) || defined(__AVR_ATmega1284P__)</span>
<a name="l00055"></a>00055 <span class="preprocessor"></span><span class="preprocessor">#define ETIMSK TIMSK3</span>
<a name="l00056"></a>00056 <span class="preprocessor"></span><span class="preprocessor">#define ETIFR TIFR3</span>
<a name="l00057"></a>00057 <span class="preprocessor"></span><span class="preprocessor">#define TICIE3 ICIE3</span>
<a name="l00058"></a>00058 <span class="preprocessor"></span>
<a name="l00059"></a>00059 <span class="comment">//Has no &#39;C&#39;, so we just set it to B. The code doesn&#39;t really use C so this</span>
<a name="l00060"></a>00060 <span class="comment">//is safe to do but lets it compile. Probably should enable the warning if</span>
<a name="l00061"></a>00061 <span class="comment">//it is ever used on other platforms.</span>
<a name="l00062"></a>00062 <span class="comment">//#warning no OCIE3C in timer3 architecture, hopefully it won&#39;t be needed!</span>
<a name="l00063"></a>00063 
<a name="l00064"></a>00064 <span class="preprocessor">#define OCIE3C  OCIE3B</span>
<a name="l00065"></a>00065 <span class="preprocessor"></span><span class="preprocessor">#define OCF3C   OCF3B</span>
<a name="l00066"></a>00066 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00067"></a>00067 <span class="preprocessor"></span>
<a name="l00068"></a>00068 <span class="preprocessor">#if defined(__AVR_AT90USB1287__) || defined(__AVR_ATmega128RFA1__) </span>
<a name="l00069"></a>00069 <span class="preprocessor"></span><span class="preprocessor">#define ETIMSK TIMSK3</span>
<a name="l00070"></a>00070 <span class="preprocessor"></span><span class="preprocessor">#define ETIFR TIFR3</span>
<a name="l00071"></a>00071 <span class="preprocessor"></span><span class="preprocessor">#define TICIE3 ICIE3</span>
<a name="l00072"></a>00072 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00073"></a>00073 <span class="preprocessor"></span>
<a name="l00074"></a>00074 <span class="preprocessor">#if defined(__AVR_ATmega328P__) || defined(__AVR_ATmega644__)</span>
<a name="l00075"></a>00075 <span class="preprocessor"></span><span class="preprocessor">#define TIMSK TIMSK1</span>
<a name="l00076"></a>00076 <span class="preprocessor"></span><span class="preprocessor">#define TICIE1 ICIE1</span>
<a name="l00077"></a>00077 <span class="preprocessor"></span><span class="preprocessor">#define TIFR TIFR1</span>
<a name="l00078"></a>00078 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00079"></a>00079 <span class="preprocessor"></span>
<a name="l00080"></a>00080 <span class="comment">/* Track flow through rtimer interrupts*/</span>
<a name="l00081"></a>00081 <span class="preprocessor">#if DEBUGFLOWSIZE&amp;&amp;0</span>
<a name="l00082"></a>00082 <span class="preprocessor"></span><span class="keyword">extern</span> uint8_t debugflowsize,debugflow[DEBUGFLOWSIZE];
<a name="l00083"></a>00083 <span class="preprocessor">#define DEBUGFLOW(c) if (debugflowsize&lt;(DEBUGFLOWSIZE-1)) debugflow[debugflowsize++]=c</span>
<a name="l00084"></a>00084 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00085"></a>00085 <span class="preprocessor"></span><span class="preprocessor">#define DEBUGFLOW(c)</span>
<a name="l00086"></a>00086 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00087"></a>00087 <span class="preprocessor"></span>
<a name="l00088"></a>00088 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00089"></a>00089 <span class="preprocessor">#if defined(TCNT3) &amp;&amp; RTIMER_ARCH_PRESCALER</span>
<a name="l00090"></a>00090 <span class="preprocessor"></span>ISR (TIMER3_COMPA_vect) {
<a name="l00091"></a>00091   DEBUGFLOW(<span class="charliteral">&#39;/&#39;</span>);
<a name="l00092"></a>00092   ENERGEST_ON(ENERGEST_TYPE_IRQ);
<a name="l00093"></a>00093 
<a name="l00094"></a>00094   <span class="comment">/* Disable rtimer interrupts */</span>
<a name="l00095"></a>00095   ETIMSK &amp;= ~((1 &lt;&lt; OCIE3A) | (1 &lt;&lt; OCIE3B) | (1 &lt;&lt; TOIE3) |
<a name="l00096"></a>00096       (1 &lt;&lt; TICIE3) | (1 &lt;&lt; OCIE3C));
<a name="l00097"></a>00097 
<a name="l00098"></a>00098 <span class="preprocessor">#if RTIMER_CONF_NESTED_INTERRUPTS</span>
<a name="l00099"></a>00099 <span class="preprocessor"></span>  <span class="comment">/* Enable nested interrupts. Allows radio interrupt during rtimer interrupt. */</span>
<a name="l00100"></a>00100   <span class="comment">/* All interrupts are enabled including recursive rtimer, so use with caution */</span>
<a name="l00101"></a>00101   sei();
<a name="l00102"></a>00102 <span class="preprocessor">#endif</span>
<a name="l00103"></a>00103 <span class="preprocessor"></span>
<a name="l00104"></a>00104   <span class="comment">/* Call rtimer callback */</span>
<a name="l00105"></a>00105   <a class="code" href="a01868.html#gaa9322a37b5a9b7ff51018fa67e39ad3b" title="Execute the next real-time task and schedule the next task, if any.">rtimer_run_next</a>();
<a name="l00106"></a>00106 
<a name="l00107"></a>00107   ENERGEST_OFF(ENERGEST_TYPE_IRQ);
<a name="l00108"></a>00108   DEBUGFLOW(<span class="charliteral">&#39;\\&#39;</span>);
<a name="l00109"></a>00109 }
<a name="l00110"></a>00110 
<a name="l00111"></a>00111 <span class="preprocessor">#elif RTIMER_ARCH_PRESCALER</span>
<a name="l00112"></a>00112 <span class="preprocessor"></span><span class="preprocessor">#warning &quot;No Timer3 in rtimer-arch.c - using Timer1 instead&quot;</span>
<a name="l00113"></a>00113 <span class="preprocessor"></span>ISR (TIMER1_COMPA_vect) {
<a name="l00114"></a>00114   DEBUGFLOW(<span class="charliteral">&#39;/&#39;</span>);
<a name="l00115"></a>00115   TIMSK &amp;= ~((1&lt;&lt;TICIE1)|(1&lt;&lt;OCIE1A)|(1&lt;&lt;OCIE1B)|(1&lt;&lt;TOIE1));
<a name="l00116"></a>00116 
<a name="l00117"></a>00117   <a class="code" href="a01868.html#gaa9322a37b5a9b7ff51018fa67e39ad3b" title="Execute the next real-time task and schedule the next task, if any.">rtimer_run_next</a>();
<a name="l00118"></a>00118   DEBUGFLOW(<span class="charliteral">&#39;\\&#39;</span>);
<a name="l00119"></a>00119 }
<a name="l00120"></a>00120 
<a name="l00121"></a>00121 <span class="preprocessor">#endif</span>
<a name="l00122"></a>00122 <span class="preprocessor"></span><span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00123"></a>00123 <span class="keywordtype">void</span>
<a name="l00124"></a>00124 rtimer_arch_init(<span class="keywordtype">void</span>)
<a name="l00125"></a>00125 {
<a name="l00126"></a>00126 <span class="preprocessor">#if RTIMER_ARCH_PRESCALER</span>
<a name="l00127"></a>00127 <span class="preprocessor"></span>  <span class="comment">/* Disable interrupts (store old state) */</span>
<a name="l00128"></a>00128   uint8_t sreg;
<a name="l00129"></a>00129   sreg = SREG;
<a name="l00130"></a>00130   cli ();
<a name="l00131"></a>00131 
<a name="l00132"></a>00132 <span class="preprocessor">#ifdef TCNT3</span>
<a name="l00133"></a>00133 <span class="preprocessor"></span>  <span class="comment">/* Disable all timer functions */</span>
<a name="l00134"></a>00134   ETIMSK &amp;= ~((1 &lt;&lt; OCIE3A) | (1 &lt;&lt; OCIE3B) | (1 &lt;&lt; TOIE3) |
<a name="l00135"></a>00135       (1 &lt;&lt; TICIE3) | (1 &lt;&lt; OCIE3C));
<a name="l00136"></a>00136   <span class="comment">/* Write 1s to clear existing timer function flags */</span>
<a name="l00137"></a>00137   ETIFR |= (1 &lt;&lt; ICF3) | (1 &lt;&lt; OCF3A) | (1 &lt;&lt; OCF3B) | (1 &lt;&lt; TOV3) |
<a name="l00138"></a>00138   (1 &lt;&lt; OCF3C); 
<a name="l00139"></a>00139 
<a name="l00140"></a>00140   <span class="comment">/* Default timer behaviour */</span>
<a name="l00141"></a>00141   TCCR3A = 0;
<a name="l00142"></a>00142   TCCR3B = 0;
<a name="l00143"></a>00143   TCCR3C = 0;
<a name="l00144"></a>00144 
<a name="l00145"></a>00145   <span class="comment">/* Reset counter */</span>
<a name="l00146"></a>00146   TCNT3 = 0;
<a name="l00147"></a>00147 
<a name="l00148"></a>00148 <span class="preprocessor">#if RTIMER_ARCH_PRESCALER==1024</span>
<a name="l00149"></a>00149 <span class="preprocessor"></span>  TCCR3B |= 5;
<a name="l00150"></a>00150 <span class="preprocessor">#elif RTIMER_ARCH_PRESCALER==256</span>
<a name="l00151"></a>00151 <span class="preprocessor"></span>  TCCR3B |= 4;
<a name="l00152"></a>00152 <span class="preprocessor">#elif RTIMER_ARCH_PRESCALER==64</span>
<a name="l00153"></a>00153 <span class="preprocessor"></span>  TCCR3B |= 3;
<a name="l00154"></a>00154 <span class="preprocessor">#elif RTIMER_ARCH_PRESCALER==8</span>
<a name="l00155"></a>00155 <span class="preprocessor"></span>  TCCR3B |= 2;
<a name="l00156"></a>00156 <span class="preprocessor">#elif RTIMER_ARCH_PRESCALER==1</span>
<a name="l00157"></a>00157 <span class="preprocessor"></span>  TCCR3B |= 1;
<a name="l00158"></a>00158 <span class="preprocessor">#else</span>
<a name="l00159"></a>00159 <span class="preprocessor"></span><span class="preprocessor">#error Timer3 PRESCALER factor not supported.</span>
<a name="l00160"></a>00160 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00161"></a>00161 <span class="preprocessor"></span>
<a name="l00162"></a>00162 <span class="preprocessor">#elif RTIMER_ARCH_PRESCALER</span>
<a name="l00163"></a>00163 <span class="preprocessor"></span>  <span class="comment">/* Leave timer1 alone if PRESCALER set to zero */</span>
<a name="l00164"></a>00164   <span class="comment">/* Obviously you can not then use rtimers */</span>
<a name="l00165"></a>00165 
<a name="l00166"></a>00166   TIMSK &amp;= ~((1&lt;&lt;TICIE1)|(1&lt;&lt;OCIE1A)|(1&lt;&lt;OCIE1B)|(1&lt;&lt;TOIE1));
<a name="l00167"></a>00167   TIFR |= (1 &lt;&lt; ICF1) | (1 &lt;&lt; OCF1A) | (1 &lt;&lt; OCF1B) | (1 &lt;&lt; TOV1);
<a name="l00168"></a>00168 
<a name="l00169"></a>00169   <span class="comment">/* Default timer behaviour */</span>
<a name="l00170"></a>00170   TCCR1A = 0;
<a name="l00171"></a>00171   TCCR1B = 0;
<a name="l00172"></a>00172 
<a name="l00173"></a>00173   <span class="comment">/* Reset counter */</span>
<a name="l00174"></a>00174   TCNT1 = 0;
<a name="l00175"></a>00175 
<a name="l00176"></a>00176   <span class="comment">/* Start clock */</span>
<a name="l00177"></a>00177 <span class="preprocessor">#if RTIMER_ARCH_PRESCALER==1024</span>
<a name="l00178"></a>00178 <span class="preprocessor"></span>  TCCR1B |= 5;
<a name="l00179"></a>00179 <span class="preprocessor">#elif RTIMER_ARCH_PRESCALER==256</span>
<a name="l00180"></a>00180 <span class="preprocessor"></span>  TCCR1B |= 4;
<a name="l00181"></a>00181 <span class="preprocessor">#elif RTIMER_ARCH_PRESCALER==64</span>
<a name="l00182"></a>00182 <span class="preprocessor"></span>  TCCR1B |= 3;
<a name="l00183"></a>00183 <span class="preprocessor">#elif RTIMER_ARCH_PRESCALER==8</span>
<a name="l00184"></a>00184 <span class="preprocessor"></span>  TCCR1B |= 2;
<a name="l00185"></a>00185 <span class="preprocessor">#elif RTIMER_ARCH_PRESCALER==1</span>
<a name="l00186"></a>00186 <span class="preprocessor"></span>  TCCR1B |= 1;
<a name="l00187"></a>00187 <span class="preprocessor">#else</span>
<a name="l00188"></a>00188 <span class="preprocessor"></span><span class="preprocessor">#error Timer1 PRESCALER factor not supported.</span>
<a name="l00189"></a>00189 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00190"></a>00190 <span class="preprocessor"></span>
<a name="l00191"></a>00191 <span class="preprocessor">#endif </span><span class="comment">/* TCNT3 */</span>
<a name="l00192"></a>00192 
<a name="l00193"></a>00193   <span class="comment">/* Restore interrupt state */</span>
<a name="l00194"></a>00194   SREG = sreg;
<a name="l00195"></a>00195 <span class="preprocessor">#endif </span><span class="comment">/* RTIMER_ARCH_PRESCALER */</span>
<a name="l00196"></a>00196 }
<a name="l00197"></a>00197 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00198"></a>00198 <span class="keywordtype">void</span>
<a name="l00199"></a>00199 rtimer_arch_schedule(rtimer_clock_t t)
<a name="l00200"></a>00200 {
<a name="l00201"></a>00201 <span class="preprocessor">#if RTIMER_ARCH_PRESCALER</span>
<a name="l00202"></a>00202 <span class="preprocessor"></span>  <span class="comment">/* Disable interrupts (store old state) */</span>
<a name="l00203"></a>00203   uint8_t sreg;
<a name="l00204"></a>00204   sreg = SREG;
<a name="l00205"></a>00205   cli ();
<a name="l00206"></a>00206   DEBUGFLOW(<span class="charliteral">&#39;:&#39;</span>);
<a name="l00207"></a>00207 <span class="preprocessor">#ifdef TCNT3</span>
<a name="l00208"></a>00208 <span class="preprocessor"></span>  <span class="comment">/* Set compare register */</span>
<a name="l00209"></a>00209   OCR3A = t;
<a name="l00210"></a>00210   <span class="comment">/* Write 1s to clear all timer function flags */</span>
<a name="l00211"></a>00211   ETIFR |= (1 &lt;&lt; ICF3) | (1 &lt;&lt; OCF3A) | (1 &lt;&lt; OCF3B) | (1 &lt;&lt; TOV3) |
<a name="l00212"></a>00212   (1 &lt;&lt; OCF3C);
<a name="l00213"></a>00213   <span class="comment">/* Enable interrupt on OCR3A match */</span>
<a name="l00214"></a>00214   ETIMSK |= (1 &lt;&lt; OCIE3A);
<a name="l00215"></a>00215 
<a name="l00216"></a>00216 <span class="preprocessor">#elif RTIMER_ARCH_PRESCALER</span>
<a name="l00217"></a>00217 <span class="preprocessor"></span>  <span class="comment">/* Set compare register */</span>
<a name="l00218"></a>00218   OCR1A = t;
<a name="l00219"></a>00219   TIFR |= (1 &lt;&lt; ICF1) | (1 &lt;&lt; OCF1A) | (1 &lt;&lt; OCF1B) | (1 &lt;&lt; TOV1);
<a name="l00220"></a>00220   TIMSK |= (1 &lt;&lt; OCIE1A);
<a name="l00221"></a>00221 
<a name="l00222"></a>00222 <span class="preprocessor">#endif</span>
<a name="l00223"></a>00223 <span class="preprocessor"></span>
<a name="l00224"></a>00224   <span class="comment">/* Restore interrupt state */</span>
<a name="l00225"></a>00225   SREG = sreg;
<a name="l00226"></a>00226 <span class="preprocessor">#endif </span><span class="comment">/* RTIMER_ARCH_PRESCALER */</span>
<a name="l00227"></a>00227 }
<a name="l00228"></a>00228 
<a name="l00229"></a>00229 <span class="preprocessor">#if RDC_CONF_MCU_SLEEP</span>
<a name="l00230"></a>00230 <span class="preprocessor"></span><span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00231"></a>00231 <span class="keywordtype">void</span>
<a name="l00232"></a>00232 rtimer_arch_sleep(rtimer_clock_t howlong)
<a name="l00233"></a>00233 {
<a name="l00234"></a>00234 <span class="comment">/* Deep Sleep for howlong rtimer ticks. This will stop all timers except</span>
<a name="l00235"></a>00235 <span class="comment"> * for TIMER2 which can be clocked using an external crystal.</span>
<a name="l00236"></a>00236 <span class="comment"> * Unfortunately this is an 8 bit timer; a lower prescaler gives higher</span>
<a name="l00237"></a>00237 <span class="comment"> * precision but smaller maximum sleep time.</span>
<a name="l00238"></a>00238 <span class="comment"> * Here a maximum 128msec (contikimac 8Hz channel check sleep) is assumed.</span>
<a name="l00239"></a>00239 <span class="comment"> * The rtimer and system clocks are adjusted to reflect the sleep time.</span>
<a name="l00240"></a>00240 <span class="comment"> */</span>
<a name="l00241"></a>00241 <span class="preprocessor">#include &lt;avr/sleep.h&gt;</span>
<a name="l00242"></a>00242 <span class="preprocessor">#include &lt;dev/watchdog.h&gt;</span>
<a name="l00243"></a>00243 uint32_t longhowlong;
<a name="l00244"></a>00244 <span class="preprocessor">#if AVR_CONF_USE32KCRYSTAL</span>
<a name="l00245"></a>00245 <span class="preprocessor"></span><span class="comment">/* Save TIMER2 configuration if clock.c is using it */</span>
<a name="l00246"></a>00246     uint8_t savedTCNT2=TCNT2, savedTCCR2A=TCCR2A, savedTCCR2B = TCCR2B, savedOCR2A = OCR2A;
<a name="l00247"></a>00247 <span class="preprocessor">#endif</span>
<a name="l00248"></a>00248 <span class="preprocessor"></span>    cli();
<a name="l00249"></a>00249         watchdog_stop();
<a name="l00250"></a>00250         set_sleep_mode(SLEEP_MODE_PWR_SAVE);
<a name="l00251"></a>00251 
<a name="l00252"></a>00252 <span class="comment">/* Set TIMER2 clock asynchronus from external source, CTC mode */</span>
<a name="l00253"></a>00253     ASSR |= (1 &lt;&lt; AS2);
<a name="l00254"></a>00254     TCCR2A =(1&lt;&lt;WGM21);
<a name="l00255"></a>00255 <span class="comment">/* Set prescaler and TIMER2 output compare register */</span>
<a name="l00256"></a>00256 <span class="preprocessor">#if 0    //Prescale by 1024 -   32 ticks/sec, 8 seconds max sleep</span>
<a name="l00257"></a>00257 <span class="preprocessor"></span>    TCCR2B =((1&lt;&lt;CS22)|(1&lt;&lt;CS21)|(1&lt;&lt;CS20));
<a name="l00258"></a>00258         longhowlong=howlong*32UL; 
<a name="l00259"></a>00259 <span class="preprocessor">#elif 0  // Prescale by 256 -  128 ticks/sec, 2 seconds max sleep</span>
<a name="l00260"></a>00260 <span class="preprocessor"></span>        TCCR2B =((1&lt;&lt;CS22)|(1&lt;&lt;CS21)|(0&lt;&lt;CS20));
<a name="l00261"></a>00261         longhowlong=howlong*128UL;
<a name="l00262"></a>00262 <span class="preprocessor">#elif 0  // Prescale by 128 -  256 ticks/sec, 1 seconds max sleep</span>
<a name="l00263"></a>00263 <span class="preprocessor"></span>        TCCR2B =((1&lt;&lt;CS22)|(0&lt;&lt;CS21)|(1&lt;&lt;CS20));
<a name="l00264"></a>00264         longhowlong=howlong*256UL;
<a name="l00265"></a>00265 <span class="preprocessor">#elif 0  // Prescale by  64 -  512 ticks/sec, 500 msec max sleep</span>
<a name="l00266"></a>00266 <span class="preprocessor"></span>        TCCR2B =((1&lt;&lt;CS22)|(0&lt;&lt;CS21)|(0&lt;&lt;CS20));
<a name="l00267"></a>00267         longhowlong=howlong*512UL;
<a name="l00268"></a>00268 <span class="preprocessor">#elif 1  // Prescale by  32 - 1024 ticks/sec, 250 msec max sleep</span>
<a name="l00269"></a>00269 <span class="preprocessor"></span>        TCCR2B =((0&lt;&lt;CS22)|(1&lt;&lt;CS21)|(1&lt;&lt;CS20));
<a name="l00270"></a>00270         longhowlong=howlong*1024UL;
<a name="l00271"></a>00271 <span class="preprocessor">#elif 0  // Prescale by   8 - 4096 ticks/sec, 62.5 msec max sleep</span>
<a name="l00272"></a>00272 <span class="preprocessor"></span>        TCCR2B =((0&lt;&lt;CS22)|(1&lt;&lt;CS21)|(0&lt;&lt;CS20));
<a name="l00273"></a>00273         longhowlong=howlong*4096UL;
<a name="l00274"></a>00274 <span class="preprocessor">#else    // No Prescale -    32768 ticks/sec, 7.8 msec max sleep</span>
<a name="l00275"></a>00275 <span class="preprocessor"></span>        TCCR2B =((0&lt;&lt;CS22)|(0&lt;&lt;CS21)|(1&lt;&lt;CS20));
<a name="l00276"></a>00276         longhowlong=howlong*32768UL;
<a name="l00277"></a>00277 <span class="preprocessor">#endif</span>
<a name="l00278"></a>00278 <span class="preprocessor"></span>        OCR2A = longhowlong/RTIMER_ARCH_SECOND;
<a name="l00279"></a>00279 
<a name="l00280"></a>00280 <span class="comment">/* Reset timer count, wait for the write (which assures TCCR2x and OCR2A are finished) */</span>
<a name="l00281"></a>00281     TCNT2 = 0; 
<a name="l00282"></a>00282     <span class="keywordflow">while</span>(ASSR &amp; (1 &lt;&lt; TCN2UB));
<a name="l00283"></a>00283 
<a name="l00284"></a>00284 <span class="comment">/* Enable TIMER2 output compare interrupt, sleep mode and sleep */</span>
<a name="l00285"></a>00285     TIMSK2 |= (1 &lt;&lt; OCIE2A);
<a name="l00286"></a>00286     SMCR |= (1 &lt;&lt;  SE);
<a name="l00287"></a>00287         sei();
<a name="l00288"></a>00288         ENERGEST_OFF(ENERGEST_TYPE_CPU);
<a name="l00289"></a>00289         <span class="keywordflow">if</span> (OCR2A) sleep_mode();
<a name="l00290"></a>00290           <span class="comment">//...zzZZZzz...Ding!//</span>
<a name="l00291"></a>00291 
<a name="l00292"></a>00292 <span class="comment">/* Disable sleep mode after wakeup, so random code cant trigger sleep */</span>
<a name="l00293"></a>00293     SMCR  &amp;= ~(1 &lt;&lt; SE);
<a name="l00294"></a>00294 
<a name="l00295"></a>00295 <span class="comment">/* Adjust rtimer ticks if rtimer is enabled. TIMER3 is preferred, else TIMER1 */</span>
<a name="l00296"></a>00296 <span class="preprocessor">#if RTIMER_ARCH_PRESCALER</span>
<a name="l00297"></a>00297 <span class="preprocessor"></span><span class="preprocessor">#ifdef TCNT3</span>
<a name="l00298"></a>00298 <span class="preprocessor"></span>    TCNT3 += howlong;
<a name="l00299"></a>00299 <span class="preprocessor">#else</span>
<a name="l00300"></a>00300 <span class="preprocessor"></span>    TCNT1 += howlong;
<a name="l00301"></a>00301 <span class="preprocessor">#endif</span>
<a name="l00302"></a>00302 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00303"></a>00303 <span class="preprocessor"></span>        ENERGEST_ON(ENERGEST_TYPE_CPU);
<a name="l00304"></a>00304 
<a name="l00305"></a>00305 <span class="preprocessor">#if AVR_CONF_USE32KCRYSTAL</span>
<a name="l00306"></a>00306 <span class="preprocessor"></span><span class="comment">/* Restore clock.c configuration */</span>
<a name="l00307"></a>00307     cli();
<a name="l00308"></a>00308     TCCR2A = savedTCCR2A;
<a name="l00309"></a>00309     TCCR2B = savedTCCR2B;
<a name="l00310"></a>00310     OCR2A  = savedOCR2A;
<a name="l00311"></a>00311     TCNT2  = savedTCNT2;
<a name="l00312"></a>00312     sei();
<a name="l00313"></a>00313 <span class="preprocessor">#else</span>
<a name="l00314"></a>00314 <span class="preprocessor"></span><span class="comment">/* Disable TIMER2 interrupt */</span>
<a name="l00315"></a>00315     TIMSK2 &amp;= ~(1 &lt;&lt; OCIE2A);
<a name="l00316"></a>00316 <span class="preprocessor">#endif</span>
<a name="l00317"></a>00317 <span class="preprocessor"></span>    watchdog_start();
<a name="l00318"></a>00318 
<a name="l00319"></a>00319 <span class="comment">/* Adjust clock.c for the time spent sleeping */</span>
<a name="l00320"></a>00320         longhowlong=CLOCK_CONF_SECOND;
<a name="l00321"></a>00321         longhowlong*=howlong;
<a name="l00322"></a>00322     <a class="code" href="a01892.html#ga21e3e21923b005ad08f6d726285868b0" title="Adjust the system current clock time.">clock_adjust_ticks</a>(longhowlong/RTIMER_ARCH_SECOND);
<a name="l00323"></a>00323 
<a name="l00324"></a>00324 }
<a name="l00325"></a>00325 <span class="preprocessor">#if !AVR_CONF_USE32KCRYSTAL</span>
<a name="l00326"></a>00326 <span class="preprocessor"></span><span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00327"></a>00327 <span class="comment">/* TIMER2 Interrupt service */</span>
<a name="l00328"></a>00328 
<a name="l00329"></a>00329 ISR(TIMER2_COMPA_vect)
<a name="l00330"></a>00330 {
<a name="l00331"></a>00331 <span class="comment">//    TIMSK2 &amp;= ~(1 &lt;&lt; OCIE2A);       //Just one interrupt needed for waking</span>
<a name="l00332"></a>00332 }
<a name="l00333"></a>00333 <span class="preprocessor">#endif </span><span class="comment">/* !AVR_CONF_USE32KCRYSTAL */</span>
<a name="l00334"></a>00334 <span class="preprocessor">#endif </span><span class="comment">/* RDC_CONF_MCU_SLEEP */</span>
<a name="l00335"></a>00335 
</pre></div></div><!-- contents -->


<hr class="footer"/><address class="footer"><small>
Generated on Sun Jan 13 2013 10:57:24 for Contiki 2.6 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.7.6.1
</small></address>

</body>
</html>
