<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>Contiki 2.6: cpu/cc2430/8051def.h Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />



</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">Contiki 2.6
   
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.html"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.html"><span>Modules</span></a></li>
      <li><a href="annotated.html"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li><a href="dirs.html"><span>Directories</span></a></li>
      <li><a href="examples.html"><span>Examples</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>Globals</span></a></li>
    </ul>
  </div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="dir_bd0bc4a94a775a8b7ece71496ffca05e.html">cpu</a>      </li>
      <li class="navelem"><a class="el" href="dir_00802af3c5996426ebace365e6a37d81.html">cc2430</a>      </li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">8051def.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment"> * \file</span>
<a name="l00003"></a>00003 <span class="comment"> *      This file contains a set of configuration for using SDCC as a compiler.</span>
<a name="l00004"></a>00004 <span class="comment"> *      Modified from z80 port for cc2430 port.</span>
<a name="l00005"></a>00005 <span class="comment"> *</span>
<a name="l00006"></a>00006 <span class="comment"> * \author</span>
<a name="l00007"></a>00007 <span class="comment"> *       Takahide Matsutsuka &lt;markn@markn.org&gt; (Original)</span>
<a name="l00008"></a>00008 <span class="comment"> *       George Oikonomou - &lt;oikonomou@users.sourceforge.net&gt;</span>
<a name="l00009"></a>00009 <span class="comment"> *         (recent updates for the sensinode/cc2430 port)</span>
<a name="l00010"></a>00010 <span class="comment"> */</span>
<a name="l00011"></a>00011 
<a name="l00012"></a>00012 <span class="preprocessor">#ifndef __8051_DEF_H__</span>
<a name="l00013"></a>00013 <span class="preprocessor"></span><span class="preprocessor">#define __8051_DEF_H__</span>
<a name="l00014"></a>00014 <span class="preprocessor"></span>
<a name="l00015"></a>00015 <span class="preprocessor">#include &lt;stdint.h&gt;</span>
<a name="l00016"></a>00016 
<a name="l00017"></a>00017 <span class="comment">/* This port no longer implements the legacy clock_delay. Hack its usages</span>
<a name="l00018"></a>00018 <span class="comment"> * outta the way till it gets phased out completely</span>
<a name="l00019"></a>00019 <span class="comment"> * NB: This also overwrites the prototype so delay_usec() is declared twice */</span>
<a name="l00020"></a>00020 <span class="preprocessor">#define clock_delay(t) clock_delay_usec(t)</span>
<a name="l00021"></a>00021 <span class="preprocessor"></span>
<a name="l00022"></a>00022 <span class="comment">/*</span>
<a name="l00023"></a>00023 <span class="comment"> * lint - style defines to help syntax parsers with sdcc-specific 8051 code</span>
<a name="l00024"></a>00024 <span class="comment"> * They don&#39;t interfere with actual compilation</span>
<a name="l00025"></a>00025 <span class="comment"> */</span>
<a name="l00026"></a>00026 <span class="preprocessor">#if !defined(__SDCC_mcs51) &amp;&amp; !defined(SDCC_mcs51)</span>
<a name="l00027"></a>00027 <span class="preprocessor"></span><span class="preprocessor">#define __data</span>
<a name="l00028"></a>00028 <span class="preprocessor"></span><span class="preprocessor">#define __xdata</span>
<a name="l00029"></a>00029 <span class="preprocessor"></span><span class="preprocessor">#define __code</span>
<a name="l00030"></a>00030 <span class="preprocessor"></span><span class="preprocessor">#define __bit bool</span>
<a name="l00031"></a>00031 <span class="preprocessor"></span><span class="preprocessor">#define __sfr volatile unsigned char</span>
<a name="l00032"></a>00032 <span class="preprocessor"></span><span class="preprocessor">#define __sbit volatile bool</span>
<a name="l00033"></a>00033 <span class="preprocessor"></span><span class="preprocessor">#define __critical</span>
<a name="l00034"></a>00034 <span class="preprocessor"></span><span class="preprocessor">#define __at(x)</span>
<a name="l00035"></a>00035 <span class="preprocessor"></span><span class="preprocessor">#define __using(x)</span>
<a name="l00036"></a>00036 <span class="preprocessor"></span><span class="preprocessor">#define __interrupt(x)</span>
<a name="l00037"></a>00037 <span class="preprocessor"></span><span class="preprocessor">#define __naked</span>
<a name="l00038"></a>00038 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00039"></a>00039 <span class="preprocessor"></span>
<a name="l00040"></a>00040 <span class="preprocessor">#define CC_CONF_FUNCTION_POINTER_ARGS   1</span>
<a name="l00041"></a>00041 <span class="preprocessor"></span><span class="preprocessor">#define CC_CONF_FASTCALL</span>
<a name="l00042"></a>00042 <span class="preprocessor"></span><span class="preprocessor">#define CC_CONF_VA_ARGS         1</span>
<a name="l00043"></a>00043 <span class="preprocessor"></span><span class="preprocessor">#define CC_CONF_UNSIGNED_CHAR_BUGS      0</span>
<a name="l00044"></a>00044 <span class="preprocessor"></span><span class="preprocessor">#define CC_CONF_REGISTER_ARGS           0</span>
<a name="l00045"></a>00045 <span class="preprocessor"></span><span class="preprocessor">#define CC_CONF_FUNCTION_POINTER_KEYWORD __reentrant</span>
<a name="l00046"></a>00046 <span class="preprocessor"></span><span class="preprocessor">#define CC_CONF_NON_BANKED_OPTIMIZATION 1</span>
<a name="l00047"></a>00047 <span class="preprocessor"></span>
<a name="l00048"></a>00048 <span class="preprocessor">#if (defined(__SDCC_mcs51) || defined(SDCC_mcs51)) &amp;&amp; CC_CONF_NON_BANKED_OPTIMIZATION</span>
<a name="l00049"></a>00049 <span class="preprocessor"></span><span class="preprocessor">#define CC_NON_BANKED __nonbanked</span>
<a name="l00050"></a>00050 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00051"></a>00051 <span class="preprocessor"></span><span class="preprocessor">#define CC_NON_BANKED</span>
<a name="l00052"></a>00052 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00053"></a>00053 <span class="preprocessor"></span>
<a name="l00054"></a>00054 <span class="comment">/* Generic types. */</span>
<a name="l00055"></a>00055 <span class="keyword">typedef</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> uip_stats_t;
<a name="l00056"></a>00056 
<a name="l00057"></a>00057 <span class="comment">/* Time type. */</span>
<a name="l00058"></a>00058 <span class="keyword">typedef</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> clock_time_t;
<a name="l00059"></a>00059 <span class="preprocessor">#define MAX_TICKS (~((clock_time_t)0) / 2)</span>
<a name="l00060"></a>00060 <span class="preprocessor"></span><span class="comment">/* Defines tick counts for a second. */</span>
<a name="l00061"></a>00061 <span class="preprocessor">#define CLOCK_CONF_SECOND   128</span>
<a name="l00062"></a>00062 <span class="preprocessor"></span>
<a name="l00063"></a>00063 <span class="comment">/* Compiler configurations */</span>
<a name="l00064"></a>00064 <span class="preprocessor">#define CCIF</span>
<a name="l00065"></a>00065 <span class="preprocessor"></span><span class="preprocessor">#define CLIF</span>
<a name="l00066"></a>00066 <span class="preprocessor"></span>
<a name="l00067"></a>00067 <span class="comment">/* Single asm instruction without messing up syntax highlighting */</span>
<a name="l00068"></a>00068 <span class="preprocessor">#if defined(__SDCC_mcs51) || defined(SDCC_mcs51)</span>
<a name="l00069"></a>00069 <span class="preprocessor"></span><span class="preprocessor">#define ASM(x) __asm \</span>
<a name="l00070"></a>00070 <span class="preprocessor">  x \</span>
<a name="l00071"></a>00071 <span class="preprocessor">  __endasm</span>
<a name="l00072"></a>00072 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00073"></a>00073 <span class="preprocessor"></span><span class="preprocessor">#define ASM(x)</span>
<a name="l00074"></a>00074 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00075"></a>00075 <span class="preprocessor"></span>
<a name="l00076"></a>00076 <span class="comment">/* Critical section management */</span>
<a name="l00077"></a>00077 <span class="preprocessor">#define DISABLE_INTERRUPTS()  do {EA = 0;} while(0)</span>
<a name="l00078"></a>00078 <span class="preprocessor"></span><span class="preprocessor">#define ENABLE_INTERRUPTS()   do {EA = 1;} while(0)</span>
<a name="l00079"></a>00079 <span class="preprocessor"></span>
<a name="l00080"></a>00080 <span class="comment">/* Macro for a soft reset. */</span>
<a name="l00081"></a>00081 <span class="preprocessor">#define SOFT_RESET() do {((void (__code *) (void)) 0x0000) ();} while(0)</span>
<a name="l00082"></a>00082 <span class="preprocessor"></span>
<a name="l00083"></a>00083 <span class="comment">/* We don&#39;t provide architecture-specific checksum calculations */</span>
<a name="l00084"></a>00084 <span class="preprocessor">#define UIP_ARCH_ADD32    0</span>
<a name="l00085"></a>00085 <span class="preprocessor"></span><span class="preprocessor">#define UIP_ARCH_CHKSUM   0</span>
<a name="l00086"></a>00086 <span class="preprocessor"></span>
<a name="l00087"></a>00087 <span class="preprocessor">#define CC_CONF_ASSIGN_AGGREGATE(dest, src)     \</span>
<a name="l00088"></a>00088 <span class="preprocessor">    memcpy(dest, src, sizeof(*dest))</span>
<a name="l00089"></a>00089 <span class="preprocessor"></span>
<a name="l00090"></a>00090 <span class="preprocessor">#define uip_ipaddr_copy(dest, src)              \</span>
<a name="l00091"></a>00091 <span class="preprocessor">    memcpy(dest, src, sizeof(*dest))</span>
<a name="l00092"></a>00092 <span class="preprocessor"></span>
<a name="l00093"></a>00093 <span class="preprocessor">#endif </span><span class="comment">/* __8051_DEF_H__ */</span>
</pre></div></div><!-- contents -->


<hr class="footer"/><address class="footer"><small>
Generated on Sun Jan 13 2013 10:57:25 for Contiki 2.6 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.7.6.1
</small></address>

</body>
</html>
