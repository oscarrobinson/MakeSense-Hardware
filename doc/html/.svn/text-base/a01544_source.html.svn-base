<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>Contiki 2.6: platform/OrisenPrime/dev/mpu6000.c Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />



</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">Contiki 2.6
   
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.html"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.html"><span>Modules</span></a></li>
      <li><a href="annotated.html"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li><a href="dirs.html"><span>Directories</span></a></li>
      <li><a href="examples.html"><span>Examples</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>Globals</span></a></li>
    </ul>
  </div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="dir_da81161b528b307837d2c2604d1aafcb.html">platform</a>      </li>
      <li class="navelem"><a class="el" href="dir_61c1519dc7c64251c41b08c597bd4931.html">OrisenPrime</a>      </li>
      <li class="navelem"><a class="el" href="dir_2c3bf02cfca604d79735b3e18babb9e3.html">dev</a>      </li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">mpu6000.c</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment"> * mpu6000.c</span>
<a name="l00003"></a>00003 <span class="comment"> *</span>
<a name="l00004"></a>00004 <span class="comment"> *  Created on: 6 Dec 2011</span>
<a name="l00005"></a>00005 <span class="comment"> *      Author: mcphillips</span>
<a name="l00006"></a>00006 <span class="comment"> */</span>
<a name="l00007"></a>00007 
<a name="l00008"></a>00008 
<a name="l00009"></a>00009 <span class="preprocessor">#include &quot;ssi.h&quot;</span>
<a name="l00010"></a>00010 <span class="preprocessor">#include &lt;stdio.h&gt;</span>
<a name="l00011"></a>00011 <span class="preprocessor">#include &quot;include/mpu6000.h&quot;</span>
<a name="l00012"></a>00012 <span class="preprocessor">#include &quot;include/demo_software_defines.h&quot;</span>
<a name="l00013"></a>00013 
<a name="l00014"></a>00014 
<a name="l00015"></a>00015 uint8_t mpu6000_spi_read(uint8_t reg)
<a name="l00016"></a>00016 {
<a name="l00017"></a>00017   uint8_t return_value = 0;
<a name="l00018"></a>00018   uint8_t addr = reg | 0x80; <span class="comment">// Set most significant bit</span>
<a name="l00019"></a>00019 <span class="comment">//  MPU6000_CS_ENABLE;</span>
<a name="l00020"></a>00020 <span class="comment">//  return_value = spi_rw_byte(addr);</span>
<a name="l00021"></a>00021 <span class="comment">//  return_value = spi_rw_byte(0x00);</span>
<a name="l00022"></a>00022 <span class="comment">//  MPU6000_CS_DISABLE;</span>
<a name="l00023"></a>00023 
<a name="l00024"></a>00024 <span class="comment">//      PRINTF(&quot;Receive FIFO Counter before read: %x\n&quot;,SSI-&gt;SFCSRbits.RFCNT);</span>
<a name="l00025"></a>00025     ssi_tx_data(addr);
<a name="l00026"></a>00026 <span class="comment">//      PRINTF(&quot;Receive FIFO Counter before during: %x\n&quot;,SSI-&gt;SFCSRbits.RFCNT);</span>
<a name="l00027"></a>00027     ssi_tx_data(0x00);
<a name="l00028"></a>00028 <span class="comment">//      PRINTF(&quot;Receive FIFO Counter before after: %x\n&quot;,SSI-&gt;SFCSRbits.RFCNT);</span>
<a name="l00029"></a>00029 <span class="comment">//    while(SSI-&gt;SFCSRbits.RFCNT == 0)</span>
<a name="l00030"></a>00030 
<a name="l00031"></a>00031 <span class="comment">//    return_value = ssi_rx_data();</span>
<a name="l00032"></a>00032 
<a name="l00033"></a>00033   <span class="keywordflow">return</span>(return_value);
<a name="l00034"></a>00034 }
<a name="l00035"></a>00035 
<a name="l00036"></a>00036 <span class="keywordtype">void</span> mpu6000_spi_write(uint8_t reg, uint8_t data)
<a name="l00037"></a>00037 {
<a name="l00038"></a>00038 <span class="comment">//        uint8_t clear_rxbuffer;</span>
<a name="l00039"></a>00039 <span class="comment">//        MPU6000_CS_ENABLE;</span>
<a name="l00040"></a>00040 <span class="comment">//      return_value = spi_rw_byte(reg);</span>
<a name="l00041"></a>00041 <span class="comment">//      return_value = spi_rw_byte(data);</span>
<a name="l00042"></a>00042 <span class="comment">//        MPU6000_CS_DISABLE;</span>
<a name="l00043"></a>00043 <span class="comment">//              PRINTF(&quot;Receive FIFO Counter before write: %x\n&quot;,SSI-&gt;SFCSRbits.RFCNT);</span>
<a name="l00044"></a>00044          ssi_tx_data(reg);
<a name="l00045"></a>00045          ssi_tx_data(data);
<a name="l00046"></a>00046 <span class="comment">//       clear_rxbuffer = ssi_rx_data();</span>
<a name="l00047"></a>00047 <span class="comment">//       clear_rxbuffer = ssi_rx_data();</span>
<a name="l00048"></a>00048 
<a name="l00049"></a>00049 }
<a name="l00050"></a>00050 
<a name="l00051"></a>00051 <span class="keywordtype">void</span> mpu_init (<span class="keywordtype">void</span>) {
<a name="l00052"></a>00052 
<a name="l00053"></a>00053 
<a name="l00054"></a>00054 }
<a name="l00055"></a>00055 
<a name="l00056"></a>00056 
<a name="l00057"></a>00057 <span class="keywordtype">void</span> mpu_read(<span class="keywordtype">void</span>) {
<a name="l00058"></a>00058 
<a name="l00059"></a>00059         uint8_t byte_H;
<a name="l00060"></a>00060         uint8_t byte_L;
<a name="l00061"></a>00061         <span class="comment">//Sensor variables</span>
<a name="l00062"></a>00062         int16_t temp;
<a name="l00063"></a>00063 
<a name="l00064"></a>00064         int16_t accX;
<a name="l00065"></a>00065         int16_t accY;
<a name="l00066"></a>00066         int16_t accZ;
<a name="l00067"></a>00067 
<a name="l00068"></a>00068         int16_t gyroX;
<a name="l00069"></a>00069         int16_t gyroY;
<a name="l00070"></a>00070         int16_t gyroZ;
<a name="l00071"></a>00071 
<a name="l00072"></a>00072   <span class="comment">// Read AccelX</span>
<a name="l00073"></a>00073         byte_H = mpu6000_spi_read(MPU6000_ACC_XOUT_H);
<a name="l00074"></a>00074         byte_L = mpu6000_spi_read(MPU6000_ACC_XOUT_L);
<a name="l00075"></a>00075         accX = (byte_H&lt;&lt;8)| byte_L;
<a name="l00076"></a>00076         <span class="comment">// Read AccelY</span>
<a name="l00077"></a>00077         byte_H = mpu6000_spi_read(MPU6000_ACC_YOUT_H);
<a name="l00078"></a>00078         byte_L = mpu6000_spi_read(MPU6000_ACC_YOUT_L);
<a name="l00079"></a>00079         accY = (byte_H&lt;&lt;8)| byte_L;
<a name="l00080"></a>00080         <span class="comment">// Read AccelZ</span>
<a name="l00081"></a>00081         byte_H = mpu6000_spi_read(MPU6000_ACC_ZOUT_H);
<a name="l00082"></a>00082         byte_L = mpu6000_spi_read(MPU6000_ACC_ZOUT_L);
<a name="l00083"></a>00083         accZ = (byte_H&lt;&lt;8)| byte_L;
<a name="l00084"></a>00084 
<a name="l00085"></a>00085         <span class="comment">// Read Temp</span>
<a name="l00086"></a>00086         byte_H = mpu6000_spi_read(MPU6000_TEMP_OUT_H);
<a name="l00087"></a>00087         byte_L = mpu6000_spi_read(MPU6000_TEMP_OUT_L);
<a name="l00088"></a>00088         temp = (byte_H&lt;&lt;8)| byte_L;
<a name="l00089"></a>00089 
<a name="l00090"></a>00090         <span class="comment">// Read GyroX</span>
<a name="l00091"></a>00091         byte_H = mpu6000_spi_read(MPU6000_GYRO_XOUT_H);
<a name="l00092"></a>00092         byte_L = mpu6000_spi_read(MPU6000_GYRO_XOUT_L);
<a name="l00093"></a>00093         gyroX = (byte_H&lt;&lt;8)| byte_L;
<a name="l00094"></a>00094         <span class="comment">// Read GyroY</span>
<a name="l00095"></a>00095         byte_H = mpu6000_spi_read(MPU6000_GYRO_YOUT_H);
<a name="l00096"></a>00096         byte_L = mpu6000_spi_read(MPU6000_GYRO_YOUT_L);
<a name="l00097"></a>00097         gyroY = (byte_H&lt;&lt;8)| byte_L;
<a name="l00098"></a>00098         <span class="comment">// Read GyroZ</span>
<a name="l00099"></a>00099         byte_H = mpu6000_spi_read(MPU6000_GYRO_ZOUT_H);
<a name="l00100"></a>00100         byte_L = mpu6000_spi_read(MPU6000_GYRO_ZOUT_L);
<a name="l00101"></a>00101         gyroZ = (byte_H&lt;&lt;8)| byte_L;
<a name="l00102"></a>00102   
<a name="l00103"></a>00103         PRINTF(<span class="stringliteral">&quot;Temp: %d\t&quot;</span>,temp);
<a name="l00104"></a>00104 
<a name="l00105"></a>00105         PRINTF(<span class="stringliteral">&quot;Accels: %d\t,%d\t,%d\t&quot;</span>,accX,accY,accZ);
<a name="l00106"></a>00106         PRINTF(<span class="stringliteral">&quot;Gyros: %d\t,%d\t,%d\n&quot;</span>,gyroX,gyroY,gyroZ);
<a name="l00107"></a>00107 
<a name="l00108"></a>00108 }
</pre></div></div><!-- contents -->


<hr class="footer"/><address class="footer"><small>
Generated on Sun Jan 13 2013 10:57:27 for Contiki 2.6 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.7.6.1
</small></address>

</body>
</html>
