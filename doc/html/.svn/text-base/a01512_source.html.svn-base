<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>Contiki 2.6: platform/OrisenPrime/dev/bma180.c Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />



</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">Contiki 2.6
   
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.html"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.html"><span>Modules</span></a></li>
      <li><a href="annotated.html"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li><a href="dirs.html"><span>Directories</span></a></li>
      <li><a href="examples.html"><span>Examples</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>Globals</span></a></li>
    </ul>
  </div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="dir_da81161b528b307837d2c2604d1aafcb.html">platform</a>      </li>
      <li class="navelem"><a class="el" href="dir_61c1519dc7c64251c41b08c597bd4931.html">OrisenPrime</a>      </li>
      <li class="navelem"><a class="el" href="dir_2c3bf02cfca604d79735b3e18babb9e3.html">dev</a>      </li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">bma180.c</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment"> * bma180.c</span>
<a name="l00003"></a>00003 <span class="comment"> *</span>
<a name="l00004"></a>00004 <span class="comment"> *  Created on: 1 Sep 2011</span>
<a name="l00005"></a>00005 <span class="comment"> *      Author: mcphillips</span>
<a name="l00006"></a>00006 <span class="comment"> *</span>
<a name="l00007"></a>00007 <span class="comment"> *  Updated on: 29 Aug 2012 by Jagun Kwon (j.kwon@cs.ucl.ac.uk)</span>
<a name="l00008"></a>00008 <span class="comment"> *  Refactored to comply with Contiki sensor interface structure</span>
<a name="l00009"></a>00009 <span class="comment"> */</span>
<a name="l00010"></a>00010 
<a name="l00011"></a>00011 
<a name="l00012"></a>00012 <span class="preprocessor">#include &lt;stdio.h&gt;</span>
<a name="l00013"></a>00013 <span class="preprocessor">#include &quot;i2c.h&quot;</span>
<a name="l00014"></a>00014 <span class="preprocessor">#include &quot;include/bma180.h&quot;</span>
<a name="l00015"></a>00015 <span class="preprocessor">#include &quot;lib/sensors.h&quot;</span>    <span class="comment">// for Contiki sensor interface</span>
<a name="l00016"></a>00016 
<a name="l00017"></a>00017 <span class="comment">//extern volatile uint8_t go_flag;</span>
<a name="l00018"></a>00018 <span class="comment">//extern volatile uint8_t timer_delay;</span>
<a name="l00019"></a>00019 
<a name="l00020"></a>00020 <span class="keywordtype">void</span> bma180_init(<span class="keywordtype">void</span>) {
<a name="l00021"></a>00021 
<a name="l00022"></a>00022         uint8_t receive = 0 ;
<a name="l00023"></a>00023         uint8_t <span class="keyword">set</span>[] = {0,0} ;
<a name="l00024"></a>00024 
<a name="l00025"></a>00025         uint8_t request = BMA180_CTRL_REG0 ;
<a name="l00026"></a>00026         i2c_transmitinit( BMA180_I2C_ADDR, 1, &amp;request ) ;
<a name="l00027"></a>00027         <span class="keywordflow">while</span>(!i2c_transferred()) <span class="comment">/* Wait for transfer */</span> ;
<a name="l00028"></a>00028         i2c_receiveinit( BMA180_I2C_ADDR, 1, &amp;receive ) ;
<a name="l00029"></a>00029         <span class="keywordflow">while</span>(!i2c_transferred()) <span class="comment">/* Wait for transfer */</span> ;
<a name="l00030"></a>00030 <span class="comment">//      printf(&quot;CTRL_REG0 = %x\n&quot;,receive);</span>
<a name="l00031"></a>00031 
<a name="l00032"></a>00032         <span class="keyword">set</span>[0] = BMA180_CTRL_REG0 ;
<a name="l00033"></a>00033         <span class="keyword">set</span>[1] = ((receive &amp; BMA180_EE_W_MASK) | BMA180_EE_W) ;
<a name="l00034"></a>00034         i2c_transmitinit( BMA180_I2C_ADDR, 2, <span class="keyword">set</span> ) ;
<a name="l00035"></a>00035         <span class="keywordflow">while</span>(!i2c_transferred()) <span class="comment">/* Wait for transfer */</span> ;
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 <span class="comment">//      request = BMA180_CTRL_REG0 ;</span>
<a name="l00038"></a>00038 <span class="comment">//      i2c_transmitinit( BMA180_I2C_ADDR, 1, &amp;request ) ;</span>
<a name="l00039"></a>00039 <span class="comment">//      while(!i2c_transferred()) /* Wait for transfer */ ;</span>
<a name="l00040"></a>00040 <span class="comment">//      i2c_receiveinit( BMA180_I2C_ADDR, 1, &amp;receive ) ;</span>
<a name="l00041"></a>00041 <span class="comment">//      while(!i2c_transferred()) /* Wait for transfer */ ;</span>
<a name="l00042"></a>00042 <span class="comment">//      printf(&quot;CTRL_REG0 = %x\n&quot;,receive);</span>
<a name="l00043"></a>00043 
<a name="l00044"></a>00044         request = BMA180_BW_TCS ;
<a name="l00045"></a>00045         i2c_transmitinit( BMA180_I2C_ADDR, 1, &amp;request ) ;
<a name="l00046"></a>00046         <span class="keywordflow">while</span>(!i2c_transferred()) <span class="comment">/* Wait for transfer */</span> ;
<a name="l00047"></a>00047         i2c_receiveinit( BMA180_I2C_ADDR, 1, &amp;receive ) ;
<a name="l00048"></a>00048         <span class="keywordflow">while</span>(!i2c_transferred()) <span class="comment">/* Wait for transfer */</span> ;
<a name="l00049"></a>00049 <span class="comment">//      printf(&quot;BW_TCS = %x\n&quot;,receive);</span>
<a name="l00050"></a>00050 
<a name="l00051"></a>00051         <span class="keyword">set</span>[0] = BMA180_BW_TCS ;
<a name="l00052"></a>00052         <span class="keyword">set</span>[1] = ((receive &amp; BMA180_BW_MASK) | BMA180_BW) ;
<a name="l00053"></a>00053         i2c_transmitinit( BMA180_I2C_ADDR, 2, <span class="keyword">set</span> ) ;
<a name="l00054"></a>00054         <span class="keywordflow">while</span>(!i2c_transferred()) <span class="comment">/* Wait for transfer */</span> ;
<a name="l00055"></a>00055 
<a name="l00056"></a>00056 <span class="comment">//      request = BMA180_BW_TCS ;</span>
<a name="l00057"></a>00057 <span class="comment">//      i2c_transmitinit( BMA180_I2C_ADDR, 1, &amp;request ) ;</span>
<a name="l00058"></a>00058 <span class="comment">//      while(!i2c_transferred()) /* Wait for transfer */ ;</span>
<a name="l00059"></a>00059 <span class="comment">//      i2c_receiveinit( BMA180_I2C_ADDR, 1, &amp;receive ) ;</span>
<a name="l00060"></a>00060 <span class="comment">//      while(!i2c_transferred()) /* Wait for transfer */ ;</span>
<a name="l00061"></a>00061 <span class="comment">//      printf(&quot;BW_TCS = %x\n&quot;,receive);</span>
<a name="l00062"></a>00062 
<a name="l00063"></a>00063 
<a name="l00064"></a>00064         request = BMA180_OFFSET_LSB1 ;
<a name="l00065"></a>00065         i2c_transmitinit( BMA180_I2C_ADDR, 1, &amp;request ) ;
<a name="l00066"></a>00066         <span class="keywordflow">while</span>(!i2c_transferred()) <span class="comment">/* Wait for transfer */</span> ;
<a name="l00067"></a>00067         i2c_receiveinit( BMA180_I2C_ADDR, 1, &amp;receive ) ;
<a name="l00068"></a>00068         <span class="keywordflow">while</span>(!i2c_transferred()) <span class="comment">/* Wait for transfer */</span> ;
<a name="l00069"></a>00069 <span class="comment">//      printf(&quot;OFFSET_LSB1 = %x\n&quot;,receive);</span>
<a name="l00070"></a>00070 
<a name="l00071"></a>00071         <span class="keyword">set</span>[0] = BMA180_OFFSET_LSB1 ;
<a name="l00072"></a>00072         <span class="keyword">set</span>[1] = ((receive &amp; BMA180_RANGE_MASK) | BMA180_RANGE | BMA180_SMP_SKIP) ;
<a name="l00073"></a>00073         i2c_transmitinit( BMA180_I2C_ADDR, 2, <span class="keyword">set</span> ) ;
<a name="l00074"></a>00074         <span class="keywordflow">while</span>(!i2c_transferred()) <span class="comment">/* Wait for transfer */</span> ;
<a name="l00075"></a>00075 
<a name="l00076"></a>00076 <span class="comment">//      request = BMA180_OFFSET_LSB1 ;</span>
<a name="l00077"></a>00077 <span class="comment">//      i2c_transmitinit( BMA180_I2C_ADDR, 1, &amp;request ) ;</span>
<a name="l00078"></a>00078 <span class="comment">//      while(!i2c_transferred()) /* Wait for transfer */ ;</span>
<a name="l00079"></a>00079 <span class="comment">//      i2c_receiveinit( BMA180_I2C_ADDR, 1, &amp;receive ) ;</span>
<a name="l00080"></a>00080 <span class="comment">//      while(!i2c_transferred()) /* Wait for transfer */ ;</span>
<a name="l00081"></a>00081 <span class="comment">//      printf(&quot;OFFSET_LSB1 = %x\n&quot;,receive);</span>
<a name="l00082"></a>00082 
<a name="l00083"></a>00083 <span class="comment">//      request = BMA180_TCO_Z ;</span>
<a name="l00084"></a>00084 <span class="comment">//      i2c_transmitinit( BMA180_I2C_ADDR, 1, &amp;request ) ;</span>
<a name="l00085"></a>00085 <span class="comment">//      while(!i2c_transferred()) /* Wait for transfer */ ;</span>
<a name="l00086"></a>00086 <span class="comment">//      i2c_receiveinit( BMA180_I2C_ADDR, 1, &amp;receive ) ;</span>
<a name="l00087"></a>00087 <span class="comment">//      while(!i2c_transferred()) /* Wait for transfer */ ;</span>
<a name="l00088"></a>00088 <span class="comment">//</span>
<a name="l00089"></a>00089 <span class="comment">//      set[0] = BMA180_TCO_Z;</span>
<a name="l00090"></a>00090 <span class="comment">//      set[1] = ((receive &amp; BMA180_MODE_MASK) | BMA180_MODE) ;</span>
<a name="l00091"></a>00091 <span class="comment">//      i2c_transmitinit( BMA180_I2C_ADDR, 2, set ) ;</span>
<a name="l00092"></a>00092 <span class="comment">//      while(!i2c_transferred()) /* Wait for transfer */ ;</span>
<a name="l00093"></a>00093 
<a name="l00094"></a>00094 }
<a name="l00095"></a>00095 
<a name="l00096"></a>00096 <span class="keywordtype">void</span> bma180_init_tapsens(<span class="keywordtype">void</span>){
<a name="l00097"></a>00097         uint8_t receive = 0 ;
<a name="l00098"></a>00098         uint8_t <span class="keyword">set</span>[] = {0,0} ;
<a name="l00099"></a>00099 
<a name="l00100"></a>00100 <span class="comment">//set tapsens threshold</span>
<a name="l00101"></a>00101         <span class="keyword">set</span>[0] = BMA180_TAPSENS_TH ;
<a name="l00102"></a>00102         <span class="keyword">set</span>[1] = 0xF0 ;
<a name="l00103"></a>00103         i2c_transmitinit( BMA180_I2C_ADDR, 2, <span class="keyword">set</span> ) ;
<a name="l00104"></a>00104         <span class="keywordflow">while</span>(!i2c_transferred()) <span class="comment">/* Wait for transfer */</span> ;
<a name="l00105"></a>00105 <span class="comment">//set tapsense int x and tapsense filter</span>
<a name="l00106"></a>00106         uint8_t request = BMA180_SLOPE_TAPSENS_INFO ;
<a name="l00107"></a>00107         i2c_transmitinit( BMA180_I2C_ADDR, 1, &amp;request ) ;
<a name="l00108"></a>00108         <span class="keywordflow">while</span>(!i2c_transferred()) <span class="comment">/* Wait for transfer */</span> ;
<a name="l00109"></a>00109         i2c_receiveinit( BMA180_I2C_ADDR, 1, &amp;receive ) ;
<a name="l00110"></a>00110         <span class="keywordflow">while</span>(!i2c_transferred()) <span class="comment">/* Wait for transfer */</span> ;
<a name="l00111"></a>00111 <span class="comment">//      printf(&quot;CTRL_REG0 = %x\n&quot;,receive);</span>
<a name="l00112"></a>00112 
<a name="l00113"></a>00113         <span class="keyword">set</span>[0] = BMA180_SLOPE_TAPSENS_INFO ;
<a name="l00114"></a>00114         <span class="keyword">set</span>[1] = ((receive &amp; 0xF0) | BMA180_TAPSENS_INT_X) ;
<a name="l00115"></a>00115         i2c_transmitinit( BMA180_I2C_ADDR, 2, <span class="keyword">set</span> ) ;
<a name="l00116"></a>00116         <span class="keywordflow">while</span>(!i2c_transferred()) <span class="comment">/* Wait for transfer */</span> ;
<a name="l00117"></a>00117 <span class="comment">// set tapsens duration</span>
<a name="l00118"></a>00118         request = BMA180_GAIN_T ;
<a name="l00119"></a>00119         i2c_transmitinit( BMA180_I2C_ADDR, 1, &amp;request ) ;
<a name="l00120"></a>00120         <span class="keywordflow">while</span>(!i2c_transferred()) <span class="comment">/* Wait for transfer */</span> ;
<a name="l00121"></a>00121         i2c_receiveinit( BMA180_I2C_ADDR, 1, &amp;receive ) ;
<a name="l00122"></a>00122         <span class="keywordflow">while</span>(!i2c_transferred()) <span class="comment">/* Wait for transfer */</span> ;
<a name="l00123"></a>00123 <span class="comment">//      printf(&quot;CTRL_REG0 = %x\n&quot;,receive);</span>
<a name="l00124"></a>00124 
<a name="l00125"></a>00125         <span class="keyword">set</span>[0] = BMA180_GAIN_T ;
<a name="l00126"></a>00126         <span class="keyword">set</span>[1] = ((receive &amp; 0xF8) | BMA180_TAPSENS_DUR) ;
<a name="l00127"></a>00127         i2c_transmitinit( BMA180_I2C_ADDR, 2, <span class="keyword">set</span> ) ;
<a name="l00128"></a>00128         <span class="keywordflow">while</span>(!i2c_transferred()) <span class="comment">/* Wait for transfer */</span> ;
<a name="l00129"></a>00129 }
<a name="l00130"></a>00130 
<a name="l00131"></a>00131 <span class="keywordtype">void</span> bma180_set_int(uint8_t set_int){
<a name="l00132"></a>00132         uint8_t receive = 0 ;
<a name="l00133"></a>00133         uint8_t <span class="keyword">set</span>[] = {0,0} ;
<a name="l00134"></a>00134 
<a name="l00135"></a>00135         uint8_t request = BMA180_CTRL_REG3 ;
<a name="l00136"></a>00136         i2c_transmitinit( BMA180_I2C_ADDR, 1, &amp;request ) ;
<a name="l00137"></a>00137         <span class="keywordflow">while</span>(!i2c_transferred()) <span class="comment">/* Wait for transfer */</span> ;
<a name="l00138"></a>00138         i2c_receiveinit( BMA180_I2C_ADDR, 1, &amp;receive ) ;
<a name="l00139"></a>00139         <span class="keywordflow">while</span>(!i2c_transferred()) <span class="comment">/* Wait for transfer */</span> ;
<a name="l00140"></a>00140 <span class="comment">//      printf(&quot;CTRL_REG3 = %x\n&quot;,receive);</span>
<a name="l00141"></a>00141 
<a name="l00142"></a>00142         <span class="keyword">set</span>[0] = BMA180_CTRL_REG3;
<a name="l00143"></a>00143         <span class="keyword">set</span>[1] = set_int ;
<a name="l00144"></a>00144 <span class="comment">//      set[1] = (0x02) ;</span>
<a name="l00145"></a>00145         i2c_transmitinit( BMA180_I2C_ADDR, 2, <span class="keyword">set</span> ) ;
<a name="l00146"></a>00146         <span class="keywordflow">while</span>(!i2c_transferred()) <span class="comment">/* Wait for transfer */</span> ;
<a name="l00147"></a>00147 
<a name="l00148"></a>00148         request = BMA180_CTRL_REG3 ;
<a name="l00149"></a>00149         i2c_transmitinit( BMA180_I2C_ADDR, 1, &amp;request ) ;
<a name="l00150"></a>00150         <span class="keywordflow">while</span>(!i2c_transferred()) <span class="comment">/* Wait for transfer */</span> ;
<a name="l00151"></a>00151         i2c_receiveinit( BMA180_I2C_ADDR, 1, &amp;receive ) ;
<a name="l00152"></a>00152         <span class="keywordflow">while</span>(!i2c_transferred()) <span class="comment">/* Wait for transfer */</span> ;
<a name="l00153"></a>00153 <span class="comment">//      printf(&quot;CTRL_REG3 = %x\n&quot;,receive);</span>
<a name="l00154"></a>00154 }
<a name="l00155"></a>00155 
<a name="l00156"></a>00156 
<a name="l00157"></a>00157 <span class="keywordtype">void</span> bma180_reset_int(<span class="keywordtype">void</span>){
<a name="l00158"></a>00158         uint8_t receive = 0 ;
<a name="l00159"></a>00159         uint8_t <span class="keyword">set</span>[] = {0,0} ;
<a name="l00160"></a>00160 
<a name="l00161"></a>00161         uint8_t request = BMA180_CTRL_REG0 ;
<a name="l00162"></a>00162         i2c_transmitinit( BMA180_I2C_ADDR, 1, &amp;request ) ;
<a name="l00163"></a>00163         <span class="keywordflow">while</span>(!i2c_transferred()) <span class="comment">/* Wait for transfer */</span> ;
<a name="l00164"></a>00164         i2c_receiveinit( BMA180_I2C_ADDR, 1, &amp;receive ) ;
<a name="l00165"></a>00165         <span class="keywordflow">while</span>(!i2c_transferred()) <span class="comment">/* Wait for transfer */</span> ;
<a name="l00166"></a>00166 
<a name="l00167"></a>00167         <span class="keyword">set</span>[0] = BMA180_CTRL_REG0 ;
<a name="l00168"></a>00168         <span class="keyword">set</span>[1] = (receive | BMA180_RESET_INT) ;
<a name="l00169"></a>00169         i2c_transmitinit( BMA180_I2C_ADDR, 2, <span class="keyword">set</span> ) ;
<a name="l00170"></a>00170         <span class="keywordflow">while</span>(!i2c_transferred()) <span class="comment">/* Wait for transfer */</span> ;
<a name="l00171"></a>00171 }
<a name="l00172"></a>00172 
<a name="l00173"></a>00173 <span class="keywordtype">void</span> bma180_start(<span class="keywordtype">void</span>) {
<a name="l00174"></a>00174         uint8_t request = BMA180_CTRL_REG0 ;
<a name="l00175"></a>00175         uint8_t receive = 0 ;
<a name="l00176"></a>00176         uint8_t <span class="keyword">set</span>[] = {0,0} ;
<a name="l00177"></a>00177 
<a name="l00178"></a>00178         i2c_transmitinit( BMA180_I2C_ADDR, 1, &amp;request ) ;
<a name="l00179"></a>00179         <span class="keywordflow">while</span>(!i2c_transferred()) <span class="comment">/* Wait for transfer */</span> ;
<a name="l00180"></a>00180 
<a name="l00181"></a>00181         i2c_receiveinit( BMA180_I2C_ADDR, 1, &amp;receive ) ;
<a name="l00182"></a>00182         <span class="keywordflow">while</span>(!i2c_transferred()) <span class="comment">/* Wait for transfer */</span> ;
<a name="l00183"></a>00183 
<a name="l00184"></a>00184         <span class="keyword">set</span>[0] = BMA180_CTRL_REG0 ;
<a name="l00185"></a>00185         <span class="keyword">set</span>[1] = (receive &amp; ~BMA180_SLEEP) ;
<a name="l00186"></a>00186 
<a name="l00187"></a>00187         i2c_transmitinit( BMA180_I2C_ADDR, 2, <span class="keyword">set</span> ) ;
<a name="l00188"></a>00188         <span class="keywordflow">while</span>(!i2c_transferred()) <span class="comment">/* Wait for transfer */</span> ;
<a name="l00189"></a>00189 }
<a name="l00190"></a>00190 
<a name="l00191"></a>00191 <span class="keywordtype">void</span> bma180_stop(<span class="keywordtype">void</span>) {
<a name="l00192"></a>00192         uint8_t request = BMA180_CTRL_REG0 ;
<a name="l00193"></a>00193         uint8_t receive = 0 ;
<a name="l00194"></a>00194         uint8_t <span class="keyword">set</span>[] = {0,0} ;
<a name="l00195"></a>00195 
<a name="l00196"></a>00196         i2c_transmitinit( BMA180_I2C_ADDR, 1, &amp;request ) ;
<a name="l00197"></a>00197         <span class="keywordflow">while</span>(!i2c_transferred()) <span class="comment">/* Wait for transfer */</span> ;
<a name="l00198"></a>00198 
<a name="l00199"></a>00199         i2c_receiveinit( BMA180_I2C_ADDR, 1, &amp;receive ) ;
<a name="l00200"></a>00200         <span class="keywordflow">while</span>(!i2c_transferred()) <span class="comment">/* Wait for transfer */</span> ;
<a name="l00201"></a>00201 
<a name="l00202"></a>00202         <span class="keyword">set</span>[0] = BMA180_CTRL_REG0 ;
<a name="l00203"></a>00203         <span class="keyword">set</span>[1] = (receive | BMA180_SLEEP) ;
<a name="l00204"></a>00204 
<a name="l00205"></a>00205         i2c_transmitinit( BMA180_I2C_ADDR, 2, <span class="keyword">set</span> ) ;
<a name="l00206"></a>00206         <span class="keywordflow">while</span>(!i2c_transferred()) <span class="comment">/* Wait for transfer */</span> ;
<a name="l00207"></a>00207 }
<a name="l00208"></a>00208 
<a name="l00209"></a>00209 
<a name="l00210"></a>00210 <span class="keywordtype">void</span> bma180_get_data(uint8_t *buffer) {
<a name="l00211"></a>00211 
<a name="l00212"></a>00212         uint8_t request_MSB = BMA180_ACC_X_LSB ;
<a name="l00213"></a>00213 
<a name="l00214"></a>00214         i2c_transmitinit( BMA180_I2C_ADDR, 1, &amp;request_MSB ) ;
<a name="l00215"></a>00215         <span class="keywordflow">while</span>(!i2c_transferred()) <span class="comment">/* Wait for transfer */</span> ;
<a name="l00216"></a>00216 
<a name="l00217"></a>00217         i2c_receiveinit( BMA180_I2C_ADDR, 7, buffer ) ;
<a name="l00218"></a>00218         <span class="keywordflow">while</span>(!i2c_transferred()) <span class="comment">/* Wait for transfer */</span> ;
<a name="l00219"></a>00219 }
<a name="l00220"></a>00220 
<a name="l00221"></a>00221 <span class="keywordtype">void</span> bma180_decode(<span class="keyword">struct</span> bma180_data *<span class="keyword">const</span> acc_data , uint8_t *buffer) {
<a name="l00222"></a>00222 
<a name="l00223"></a>00223         int16_t temp_val;
<a name="l00224"></a>00224         temp_val = ((buffer[0]&gt;&gt;2) + (buffer[1]&lt;&lt;6));
<a name="l00225"></a>00225         <span class="keywordflow">if</span> ((temp_val &amp; 0x2000) == 0x2000){
<a name="l00226"></a>00226                 temp_val = (((~(temp_val) &amp; 0x3FFF)+1)*-1) ;
<a name="l00227"></a>00227         }
<a name="l00228"></a>00228         acc_data-&gt;acc_x = temp_val;
<a name="l00229"></a>00229                 temp_val = ((buffer[2]&gt;&gt;2) + (buffer[3]&lt;&lt;6));
<a name="l00230"></a>00230         <span class="keywordflow">if</span> ((temp_val &amp; 0x2000) == 0x2000){
<a name="l00231"></a>00231                 temp_val = (((~(temp_val) &amp; 0x3FFF)+1)*-1) ;
<a name="l00232"></a>00232         }
<a name="l00233"></a>00233         acc_data-&gt;acc_y = temp_val;
<a name="l00234"></a>00234                 temp_val = ((buffer[4]&gt;&gt;2) + (buffer[5]&lt;&lt;6));
<a name="l00235"></a>00235         <span class="keywordflow">if</span> ((temp_val &amp; 0x2000) == 0x2000){
<a name="l00236"></a>00236                 temp_val = (((~(temp_val) &amp; 0x3FFF)+1)*-1) ;
<a name="l00237"></a>00237         }
<a name="l00238"></a>00238         acc_data-&gt;acc_z = temp_val;
<a name="l00239"></a>00239 
<a name="l00240"></a>00240         acc_data-&gt;temp = buffer[6];
<a name="l00241"></a>00241 }
<a name="l00242"></a>00242 
<a name="l00243"></a>00243 <span class="comment">//void bma180_decode(struct bma180_data *const acc_data , uint8_t *buffer) {</span>
<a name="l00244"></a>00244 <span class="comment">//</span>
<a name="l00245"></a>00245 <span class="comment">//      acc_data-&gt;acc_x = ((buffer[0] &amp;&amp; 0xFC) + (buffer[1]&lt;&lt;8)) / 4;</span>
<a name="l00246"></a>00246 <span class="comment">//      acc_data-&gt;acc_y = ((buffer[2] &amp;&amp; 0xFC) + (buffer[3]&lt;&lt;8)) / 4;</span>
<a name="l00247"></a>00247 <span class="comment">//      acc_data-&gt;acc_z = ((buffer[4] &amp;&amp; 0xFC) + (buffer[5]&lt;&lt;8)) / 4;</span>
<a name="l00248"></a>00248 <span class="comment">//      acc_data-&gt;temp = buffer[6];</span>
<a name="l00249"></a>00249 <span class="comment">//}</span>
<a name="l00250"></a>00250 
<a name="l00251"></a>00251 
<a name="l00252"></a>00252 <span class="keywordtype">void</span> bma180_get_acc_x(<span class="keyword">struct</span> bma180_data *<span class="keyword">const</span> acc_data) {
<a name="l00253"></a>00253 
<a name="l00254"></a>00254         int16_t temp_val;
<a name="l00255"></a>00255         uint8_t request_MSB = BMA180_ACC_X_LSB ;
<a name="l00256"></a>00256         uint8_t precv[] = {0,0} ;
<a name="l00257"></a>00257 
<a name="l00258"></a>00258         i2c_transmitinit( BMA180_I2C_ADDR, 1, &amp;request_MSB ) ;
<a name="l00259"></a>00259         <span class="keywordflow">while</span>(!i2c_transferred()) <span class="comment">/* Wait for transfer */</span> ;
<a name="l00260"></a>00260 
<a name="l00261"></a>00261         i2c_receiveinit( BMA180_I2C_ADDR, 2, precv ) ;
<a name="l00262"></a>00262         <span class="keywordflow">while</span>(!i2c_transferred()) <span class="comment">/* Wait for transfer */</span> ;
<a name="l00263"></a>00263 
<a name="l00264"></a>00264         temp_val = ((precv[0]&gt;&gt;2) + (precv[1]&lt;&lt;6));
<a name="l00265"></a>00265 
<a name="l00266"></a>00266         <span class="keywordflow">if</span> ((temp_val &amp; 0x2000) == 0x2000){
<a name="l00267"></a>00267                 temp_val = (((~(temp_val) &amp; 0x3FFF)+1)*-1) ;
<a name="l00268"></a>00268         }
<a name="l00269"></a>00269 
<a name="l00270"></a>00270         acc_data-&gt;acc_x = temp_val;
<a name="l00271"></a>00271 }
<a name="l00272"></a>00272 
<a name="l00273"></a>00273 <span class="keywordtype">void</span> bma180_get_acc_y(<span class="keyword">struct</span> bma180_data *<span class="keyword">const</span> acc_data) {
<a name="l00274"></a>00274 
<a name="l00275"></a>00275         int16_t temp_val;
<a name="l00276"></a>00276         uint8_t request_MSB = BMA180_ACC_Y_LSB ;
<a name="l00277"></a>00277         uint8_t precv[] = {0,0} ;
<a name="l00278"></a>00278 
<a name="l00279"></a>00279         i2c_transmitinit( BMA180_I2C_ADDR, 1, &amp;request_MSB ) ;
<a name="l00280"></a>00280         <span class="keywordflow">while</span>(!i2c_transferred()) <span class="comment">/* Wait for transfer */</span> ;
<a name="l00281"></a>00281 
<a name="l00282"></a>00282         i2c_receiveinit( BMA180_I2C_ADDR, 2, precv ) ;
<a name="l00283"></a>00283         <span class="keywordflow">while</span>(!i2c_transferred()) <span class="comment">/* Wait for transfer */</span> ;
<a name="l00284"></a>00284 
<a name="l00285"></a>00285         temp_val = ((precv[0]&gt;&gt;2) + (precv[1]&lt;&lt;6));
<a name="l00286"></a>00286 
<a name="l00287"></a>00287         <span class="keywordflow">if</span> ((temp_val &amp; 0x2000) == 0x2000){
<a name="l00288"></a>00288                 temp_val = (((~(temp_val) &amp; 0x3FFF)+1)*-1) ;
<a name="l00289"></a>00289         }
<a name="l00290"></a>00290 
<a name="l00291"></a>00291         acc_data-&gt;acc_y = temp_val;
<a name="l00292"></a>00292 }
<a name="l00293"></a>00293 
<a name="l00294"></a>00294 <span class="keywordtype">void</span> bma180_get_acc_z(<span class="keyword">struct</span> bma180_data *<span class="keyword">const</span> acc_data) {
<a name="l00295"></a>00295 
<a name="l00296"></a>00296         int16_t temp_val;
<a name="l00297"></a>00297         uint8_t request_MSB = BMA180_ACC_Z_LSB ;
<a name="l00298"></a>00298         uint8_t precv[] = {0,0} ;
<a name="l00299"></a>00299 
<a name="l00300"></a>00300         i2c_transmitinit( BMA180_I2C_ADDR, 1, &amp;request_MSB ) ;
<a name="l00301"></a>00301         <span class="keywordflow">while</span>(!i2c_transferred()) <span class="comment">/* Wait for transfer */</span> ;
<a name="l00302"></a>00302 
<a name="l00303"></a>00303         i2c_receiveinit( BMA180_I2C_ADDR, 2, precv ) ;
<a name="l00304"></a>00304         <span class="keywordflow">while</span>(!i2c_transferred()) <span class="comment">/* Wait for transfer */</span> ;
<a name="l00305"></a>00305 
<a name="l00306"></a>00306         temp_val = ((precv[0]&gt;&gt;2) + (precv[1]&lt;&lt;6));
<a name="l00307"></a>00307 
<a name="l00308"></a>00308         <span class="keywordflow">if</span> ((temp_val &amp; 0x2000) == 0x2000){
<a name="l00309"></a>00309                 temp_val = (((~(temp_val) &amp; 0x3FFF)+1)*-1) ;
<a name="l00310"></a>00310         }
<a name="l00311"></a>00311 
<a name="l00312"></a>00312         acc_data-&gt;acc_z = temp_val;
<a name="l00313"></a>00313 }
<a name="l00314"></a>00314 
<a name="l00315"></a>00315 
<a name="l00316"></a>00316 <span class="keywordtype">void</span> bma180_get_temp(<span class="keyword">struct</span> bma180_data *<span class="keyword">const</span> acc_data) {
<a name="l00317"></a>00317 
<a name="l00318"></a>00318         uint8_t request_MSB = BMA180_TEMP ;
<a name="l00319"></a>00319         uint8_t precv = 0;
<a name="l00320"></a>00320 
<a name="l00321"></a>00321         i2c_transmitinit( BMA180_I2C_ADDR, 1, &amp;request_MSB ) ;
<a name="l00322"></a>00322         <span class="keywordflow">while</span>(!i2c_transferred()) <span class="comment">/* Wait for transfer */</span> ;
<a name="l00323"></a>00323 
<a name="l00324"></a>00324         i2c_receiveinit( BMA180_I2C_ADDR, 1, &amp;precv ) ;
<a name="l00325"></a>00325         <span class="keywordflow">while</span>(!i2c_transferred()) <span class="comment">/* Wait for transfer */</span> ;
<a name="l00326"></a>00326 
<a name="l00327"></a>00327         acc_data-&gt;temp = precv;
<a name="l00328"></a>00328 }
<a name="l00329"></a>00329 
<a name="l00330"></a>00330 
<a name="l00331"></a>00331 <span class="comment">// Jagun: 29 Aug 2012: added the following to comply with</span>
<a name="l00332"></a>00332 <span class="comment">// Contiki sensor interface structure</span>
<a name="l00333"></a>00333 <span class="keyword">struct </span>bma180_data __temp_acc_data;
<a name="l00334"></a>00334 
<a name="l00335"></a>00335 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00336"></a>00336 value(<span class="keywordtype">int</span> type)
<a name="l00337"></a>00337 {
<a name="l00338"></a>00338     <span class="keywordflow">switch</span>(type) {
<a name="l00339"></a>00339         <span class="keywordflow">case</span> BMA180_ACC_X:
<a name="l00340"></a>00340                         bma180_get_acc_x(&amp;__temp_acc_data);
<a name="l00341"></a>00341             <span class="keywordflow">return</span> __temp_acc_data.acc_x;
<a name="l00342"></a>00342 
<a name="l00343"></a>00343         <span class="keywordflow">case</span> BMA180_ACC_Y:
<a name="l00344"></a>00344                         bma180_get_acc_y(&amp;__temp_acc_data);
<a name="l00345"></a>00345             <span class="keywordflow">return</span> __temp_acc_data.acc_y;
<a name="l00346"></a>00346 
<a name="l00347"></a>00347         <span class="keywordflow">case</span> BMA180_ACC_Z:
<a name="l00348"></a>00348                         bma180_get_acc_z(&amp;__temp_acc_data);
<a name="l00349"></a>00349             <span class="keywordflow">return</span> __temp_acc_data.acc_z;
<a name="l00350"></a>00350 
<a name="l00351"></a>00351         <span class="keywordflow">case</span> BMA180_TEMPERATURE:
<a name="l00352"></a>00352                         bma180_get_temp(&amp;__temp_acc_data);
<a name="l00353"></a>00353             <span class="keywordflow">return</span> __temp_acc_data.temp;
<a name="l00354"></a>00354     }
<a name="l00355"></a>00355 }
<a name="l00356"></a>00356 
<a name="l00357"></a>00357 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00358"></a>00358 status(<span class="keywordtype">int</span> type)
<a name="l00359"></a>00359 {
<a name="l00360"></a>00360     <span class="comment">// TODO We don&#39;t seem to have an equivalent for this</span>
<a name="l00361"></a>00361     <span class="keywordflow">return</span> 1;
<a name="l00362"></a>00362 }
<a name="l00363"></a>00363 
<a name="l00364"></a>00364 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00365"></a>00365 configure(<span class="keywordtype">int</span> type, <span class="keywordtype">int</span> c)
<a name="l00366"></a>00366 {
<a name="l00367"></a>00367         bma180_init();
<a name="l00368"></a>00368         <span class="comment">//bma180_start();</span>
<a name="l00369"></a>00369 
<a name="l00370"></a>00370     <span class="keywordflow">return</span> 1;
<a name="l00371"></a>00371 }
<a name="l00372"></a>00372 
<a name="l00373"></a>00373 <span class="comment">// Instantiate the sensor </span>
<a name="l00374"></a>00374 SENSORS_SENSOR(bma180_sensor, <span class="stringliteral">&quot;bma180-Sensor&quot;</span>, value, configure, status);
<a name="l00375"></a>00375 
<a name="l00376"></a>00376 
</pre></div></div><!-- contents -->


<hr class="footer"/><address class="footer"><small>
Generated on Sun Jan 13 2013 10:57:27 for Contiki 2.6 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.7.6.1
</small></address>

</body>
</html>
