<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>Contiki 2.6: cpu/avr/dev/clock.c Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />



</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">Contiki 2.6
   
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.html"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.html"><span>Modules</span></a></li>
      <li><a href="annotated.html"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li><a href="dirs.html"><span>Directories</span></a></li>
      <li><a href="examples.html"><span>Examples</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>Globals</span></a></li>
    </ul>
  </div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="dir_bd0bc4a94a775a8b7ece71496ffca05e.html">cpu</a>      </li>
      <li class="navelem"><a class="el" href="dir_ae679ce24d3488b6e63878e50716e0ed.html">avr</a>      </li>
      <li class="navelem"><a class="el" href="dir_17977cf430592f8ac9daf52ded9255d2.html">dev</a>      </li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">clock.c</div>  </div>
</div><!--header-->
<div class="contents">
<a href="a00538.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment"> * Copyright (c) 2012, Swedish Institute of Computer Science.</span>
<a name="l00003"></a>00003 <span class="comment"> * All rights reserved.</span>
<a name="l00004"></a>00004 <span class="comment"> *</span>
<a name="l00005"></a>00005 <span class="comment"> * Redistribution and use in source and binary forms, with or without</span>
<a name="l00006"></a>00006 <span class="comment"> * modification, are permitted provided that the following conditions</span>
<a name="l00007"></a>00007 <span class="comment"> * are met:</span>
<a name="l00008"></a>00008 <span class="comment"> * 1. Redistributions of source code must retain the above copyright</span>
<a name="l00009"></a>00009 <span class="comment"> *    notice, this list of conditions and the following disclaimer.</span>
<a name="l00010"></a>00010 <span class="comment"> * 2. Redistributions in binary form must reproduce the above copyright</span>
<a name="l00011"></a>00011 <span class="comment"> *    notice, this list of conditions and the following disclaimer in the</span>
<a name="l00012"></a>00012 <span class="comment"> *    documentation and/or other materials provided with the distribution.</span>
<a name="l00013"></a>00013 <span class="comment"> * 3. Neither the name of the Institute nor the names of its contributors</span>
<a name="l00014"></a>00014 <span class="comment"> *    may be used to endorse or promote products derived from this software</span>
<a name="l00015"></a>00015 <span class="comment"> *    without specific prior written permission.</span>
<a name="l00016"></a>00016 <span class="comment"> *</span>
<a name="l00017"></a>00017 <span class="comment"> * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS&#39;&#39; AND</span>
<a name="l00018"></a>00018 <span class="comment"> * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</span>
<a name="l00019"></a>00019 <span class="comment"> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE</span>
<a name="l00020"></a>00020 <span class="comment"> * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE</span>
<a name="l00021"></a>00021 <span class="comment"> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</span>
<a name="l00022"></a>00022 <span class="comment"> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS</span>
<a name="l00023"></a>00023 <span class="comment"> * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)</span>
<a name="l00024"></a>00024 <span class="comment"> * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT</span>
<a name="l00025"></a>00025 <span class="comment"> * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY</span>
<a name="l00026"></a>00026 <span class="comment"> * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF</span>
<a name="l00027"></a>00027 <span class="comment"> * SUCH DAMAGE.</span>
<a name="l00028"></a>00028 <span class="comment"> *</span>
<a name="l00029"></a>00029 <span class="comment"> * This file is part of the Contiki operating system.</span>
<a name="l00030"></a>00030 <span class="comment"> *</span>
<a name="l00031"></a>00031 <span class="comment"> */</span><span class="comment"></span>
<a name="l00032"></a>00032 <span class="comment"> /**</span>
<a name="l00033"></a>00033 <span class="comment"> *  \brief This module contains AVR-specific code to implement</span>
<a name="l00034"></a>00034 <span class="comment"> *  the Contiki core clock functions.</span>
<a name="l00035"></a>00035 <span class="comment"> *  </span>
<a name="l00036"></a>00036 <span class="comment"> *  \author David Kopf &lt;dak664@embarqmail.com&gt; and others.</span>
<a name="l00037"></a>00037 <span class="comment"> *</span>
<a name="l00038"></a>00038 <span class="comment">*/</span><span class="comment"></span>
<a name="l00039"></a>00039 <span class="comment">/** \addtogroup avr</span>
<a name="l00040"></a>00040 <span class="comment"> * @{</span>
<a name="l00041"></a>00041 <span class="comment"> */</span><span class="comment"></span>
<a name="l00042"></a>00042 <span class="comment"> /**</span>
<a name="l00043"></a>00043 <span class="comment"> *  \defgroup avrclock AVR clock implementation</span>
<a name="l00044"></a>00044 <span class="comment"> * @{</span>
<a name="l00045"></a>00045 <span class="comment"> */</span><span class="comment"></span>
<a name="l00046"></a>00046 <span class="comment">/**</span>
<a name="l00047"></a>00047 <span class="comment"> *  \file</span>
<a name="l00048"></a>00048 <span class="comment"> *  This file contains AVR-specific code to implement the Contiki core clock functions.</span>
<a name="l00049"></a>00049 <span class="comment"> *</span>
<a name="l00050"></a>00050 <span class="comment"> */</span><span class="comment"></span>
<a name="l00051"></a>00051 <span class="comment">/**</span>
<a name="l00052"></a>00052 <span class="comment"> * These routines define the AVR-specific calls declared in /core/sys/clock.h</span>
<a name="l00053"></a>00053 <span class="comment"> * CLOCK_SECOND is the number of ticks per second.</span>
<a name="l00054"></a>00054 <span class="comment"> * It is defined through CONF_CLOCK_SECOND in the contiki-conf.h for each platform.</span>
<a name="l00055"></a>00055 <span class="comment"> * The usual AVR defaults are 128 or 125 ticks per second, counting a prescaled CPU clock</span>
<a name="l00056"></a>00056 <span class="comment"> * using the 8 bit timer0.</span>
<a name="l00057"></a>00057 <span class="comment"> * </span>
<a name="l00058"></a>00058 <span class="comment"> * clock_time_t is usually declared by the platform as an unsigned 16 bit data type,</span>
<a name="l00059"></a>00059 <span class="comment"> * thus intervals up to 512 or 524 seconds can be measured with ~8 millisecond precision.</span>
<a name="l00060"></a>00060 <span class="comment"> * For longer intervals the 32 bit clock_seconds() is available.</span>
<a name="l00061"></a>00061 <span class="comment"> * </span>
<a name="l00062"></a>00062 <span class="comment"> * Since a carry to a higer byte can occur during an interrupt, declaring them non-static</span>
<a name="l00063"></a>00063 <span class="comment"> * for direct examination can cause occasional time reversals!</span>
<a name="l00064"></a>00064 <span class="comment"> *</span>
<a name="l00065"></a>00065 <span class="comment"> * clock-avr.h contains the specific setup code for each mcu.</span>
<a name="l00066"></a>00066 <span class="comment"> */</span>
<a name="l00067"></a>00067 <span class="preprocessor">#include &quot;sys/clock.h&quot;</span>
<a name="l00068"></a>00068 <span class="preprocessor">#include &quot;dev/clock-avr.h&quot;</span>
<a name="l00069"></a>00069 <span class="preprocessor">#include &quot;<a class="code" href="a00457.html" title="Event timer header file.">sys/etimer.h</a>&quot;</span>
<a name="l00070"></a>00070 
<a name="l00071"></a>00071 <span class="preprocessor">#include &lt;avr/io.h&gt;</span>
<a name="l00072"></a>00072 <span class="preprocessor">#include &lt;avr/interrupt.h&gt;</span>
<a name="l00073"></a>00073 
<a name="l00074"></a>00074 <span class="comment">/* Two tick counters avoid a software divide when CLOCK_SECOND is not a power of two. */</span>
<a name="l00075"></a>00075 <span class="preprocessor">#if CLOCK_SECOND &amp;&amp; (CLOCK_SECOND - 1)</span>
<a name="l00076"></a>00076 <span class="preprocessor"></span><span class="preprocessor">#define TWO_COUNTERS 1</span>
<a name="l00077"></a>00077 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00078"></a>00078 <span class="preprocessor"></span>
<a name="l00079"></a>00079 <span class="comment">/* count is usually a 16 bit variable, although the platform can declare it otherwise */</span>
<a name="l00080"></a>00080 <span class="keyword">static</span> <span class="keyword">volatile</span> clock_time_t count;
<a name="l00081"></a>00081 <span class="preprocessor">#if TWO_COUNTERS</span>
<a name="l00082"></a>00082 <span class="preprocessor"></span><span class="comment">/* scount is the 8 bit counter that counts ticks modulo CLOCK_SECONDS */</span>
<a name="l00083"></a>00083 <span class="keyword">static</span> <span class="keyword">volatile</span> uint8_t scount;
<a name="l00084"></a>00084 <span class="preprocessor">#endif</span>
<a name="l00085"></a>00085 <span class="preprocessor"></span><span class="comment">/* seconds is available globally but non-atomic update during interrupt can cause time reversals */</span>
<a name="l00086"></a>00086 <span class="keyword">volatile</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> seconds;
<a name="l00087"></a>00087 <span class="comment">/* sleepseconds is the number of seconds sleeping since startup, available globally */</span>
<a name="l00088"></a>00088 <span class="keywordtype">long</span> sleepseconds;
<a name="l00089"></a>00089 
<a name="l00090"></a>00090 <span class="comment">/* Set RADIOSTATS to monitor radio on time (must also be set in the radio driver) */</span>
<a name="l00091"></a>00091 <span class="preprocessor">#if RF230BB &amp;&amp; AVR_WEBSERVER</span>
<a name="l00092"></a>00092 <span class="preprocessor"></span><span class="preprocessor">#define RADIOSTATS 1</span>
<a name="l00093"></a>00093 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00094"></a>00094 <span class="preprocessor"></span>
<a name="l00095"></a>00095 <span class="preprocessor">#if RADIOSTATS</span>
<a name="l00096"></a>00096 <span class="preprocessor"></span><span class="keyword">static</span> <span class="keyword">volatile</span> uint8_t rcount;
<a name="l00097"></a>00097 <span class="keyword">volatile</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> radioontime;
<a name="l00098"></a>00098 <span class="keyword">extern</span> uint8_t RF230_receive_on;
<a name="l00099"></a>00099 <span class="preprocessor">#endif</span>
<a name="l00100"></a>00100 <span class="preprocessor"></span>
<a name="l00101"></a>00101 <span class="comment">/* Set RADIO_CONF_CALIBRATE_INTERVAL for periodic calibration of the PLL during extended radio on time.</span>
<a name="l00102"></a>00102 <span class="comment"> * The RF230 data sheet suggests every 5 minutes if the temperature is fluctuating.</span>
<a name="l00103"></a>00103 <span class="comment"> * At present the specified interval is ignored, and an 8 bit counter gives 256 second intervals.</span>
<a name="l00104"></a>00104 <span class="comment"> * Actual calibration is done by the driver on the next transmit request.</span>
<a name="l00105"></a>00105 <span class="comment"> */</span>
<a name="l00106"></a>00106 <span class="preprocessor">#if RADIO_CONF_CALIBRATE_INTERVAL</span>
<a name="l00107"></a>00107 <span class="preprocessor"></span><span class="keyword">extern</span> <span class="keyword">volatile</span> uint8_t rf230_calibrate;
<a name="l00108"></a>00108 <span class="keyword">static</span> uint8_t calibrate_interval;
<a name="l00109"></a>00109 <span class="preprocessor">#endif</span>
<a name="l00110"></a>00110 <span class="preprocessor"></span>
<a name="l00111"></a>00111 <span class="comment">/*---------------------------------------------------------------------------*/</span><span class="comment"></span>
<a name="l00112"></a>00112 <span class="comment">/**</span>
<a name="l00113"></a>00113 <span class="comment"> * Start the clock by enabling the timer comparison interrupts. </span>
<a name="l00114"></a>00114 <span class="comment"> */</span>
<a name="l00115"></a>00115 <span class="keywordtype">void</span>
<a name="l00116"></a><a class="code" href="a01892.html#ga78ab77b57cf2e00089f0a3a22508524c">00116</a> <a class="code" href="a01859.html#ga78ab77b57cf2e00089f0a3a22508524c" title="Initialize the clock library.">clock_init</a>(<span class="keywordtype">void</span>)
<a name="l00117"></a>00117 {
<a name="l00118"></a>00118   cli ();
<a name="l00119"></a>00119   OCRSetup();
<a name="l00120"></a>00120   sei ();
<a name="l00121"></a>00121 }
<a name="l00122"></a>00122 <span class="comment">/*---------------------------------------------------------------------------*/</span><span class="comment"></span>
<a name="l00123"></a>00123 <span class="comment">/**</span>
<a name="l00124"></a>00124 <span class="comment"> * Return the tick counter. When 16 bit it typically wraps every 10 minutes.</span>
<a name="l00125"></a>00125 <span class="comment"> * The comparison avoids the need to disable clock interrupts for an atomic</span>
<a name="l00126"></a>00126 <span class="comment"> * read of the multi-byte variable.</span>
<a name="l00127"></a>00127 <span class="comment"> */</span>
<a name="l00128"></a>00128 clock_time_t
<a name="l00129"></a><a class="code" href="a01892.html#gae5b7160f2e653725ba5e2024c3cb7bff">00129</a> <a class="code" href="a01859.html#ga50c22f9b9d60dd1f9e59b63a3a6676b1" title="Get the current clock time.">clock_time</a>(<span class="keywordtype">void</span>)
<a name="l00130"></a>00130 {
<a name="l00131"></a>00131   clock_time_t tmp;
<a name="l00132"></a>00132   <span class="keywordflow">do</span> {
<a name="l00133"></a>00133     tmp = count;
<a name="l00134"></a>00134   } <span class="keywordflow">while</span>(tmp != count);
<a name="l00135"></a>00135   <span class="keywordflow">return</span> tmp;
<a name="l00136"></a>00136 }
<a name="l00137"></a>00137 <span class="comment">/*---------------------------------------------------------------------------*/</span><span class="comment"></span>
<a name="l00138"></a>00138 <span class="comment">/**</span>
<a name="l00139"></a>00139 <span class="comment"> * Return seconds, default is time since startup.</span>
<a name="l00140"></a>00140 <span class="comment"> * The comparison avoids the need to disable clock interrupts for an atomic</span>
<a name="l00141"></a>00141 <span class="comment"> * read of the four-byte variable.</span>
<a name="l00142"></a>00142 <span class="comment"> */</span>
<a name="l00143"></a>00143 <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>
<a name="l00144"></a><a class="code" href="a01892.html#ga20a977b4c84576e47fec86463a5bb84f">00144</a> <a class="code" href="a01859.html#ga8bbd5d5a773349139eee79d365af36ab" title="Get the current value of the platform seconds.">clock_seconds</a>(<span class="keywordtype">void</span>)
<a name="l00145"></a>00145 {
<a name="l00146"></a>00146   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> tmp;
<a name="l00147"></a>00147   <span class="keywordflow">do</span> {
<a name="l00148"></a>00148     tmp = seconds;
<a name="l00149"></a>00149   } <span class="keywordflow">while</span>(tmp != seconds);
<a name="l00150"></a>00150   <span class="keywordflow">return</span> tmp;
<a name="l00151"></a>00151 }
<a name="l00152"></a>00152 <span class="comment">/*---------------------------------------------------------------------------*/</span><span class="comment"></span>
<a name="l00153"></a>00153 <span class="comment">/**</span>
<a name="l00154"></a>00154 <span class="comment"> * Set seconds, e.g. to a standard epoch for an absolute date/time.</span>
<a name="l00155"></a>00155 <span class="comment"> */</span>
<a name="l00156"></a>00156 <span class="keywordtype">void</span>
<a name="l00157"></a><a class="code" href="a01892.html#ga06b67aefbb407a877fc4b9cc9e6b70a8">00157</a> <a class="code" href="a01859.html#ga06b67aefbb407a877fc4b9cc9e6b70a8" title="Set the value of the platform seconds.">clock_set_seconds</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> sec)
<a name="l00158"></a>00158 {
<a name="l00159"></a>00159   seconds = sec;
<a name="l00160"></a>00160 }
<a name="l00161"></a>00161 <span class="comment">/*---------------------------------------------------------------------------*/</span><span class="comment"></span>
<a name="l00162"></a>00162 <span class="comment">/**</span>
<a name="l00163"></a>00163 <span class="comment"> * Wait for a number of clock ticks.</span>
<a name="l00164"></a>00164 <span class="comment"> */</span>
<a name="l00165"></a>00165 <span class="keywordtype">void</span>
<a name="l00166"></a><a class="code" href="a01892.html#ga82ef3aca786cc000eeece4a7d036b238">00166</a> <a class="code" href="a01859.html#ga82ef3aca786cc000eeece4a7d036b238" title="Wait for a given number of ticks.">clock_wait</a>(clock_time_t t)
<a name="l00167"></a>00167 {
<a name="l00168"></a>00168   clock_time_t endticks = <a class="code" href="a01859.html#ga50c22f9b9d60dd1f9e59b63a3a6676b1" title="Get the current clock time.">clock_time</a>() + t;
<a name="l00169"></a>00169   <span class="keywordflow">if</span> (<span class="keyword">sizeof</span>(clock_time_t) == 1) {
<a name="l00170"></a>00170     <span class="keywordflow">while</span> ((<span class="keywordtype">signed</span> <span class="keywordtype">char</span> )(<a class="code" href="a01859.html#ga50c22f9b9d60dd1f9e59b63a3a6676b1" title="Get the current clock time.">clock_time</a>() - endticks) &lt; 0) {;}
<a name="l00171"></a>00171   } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<span class="keyword">sizeof</span>(clock_time_t) == 2) {
<a name="l00172"></a>00172     <span class="keywordflow">while</span> ((<span class="keywordtype">signed</span> <span class="keywordtype">short</span>)(<a class="code" href="a01859.html#ga50c22f9b9d60dd1f9e59b63a3a6676b1" title="Get the current clock time.">clock_time</a>() - endticks) &lt; 0) {;}
<a name="l00173"></a>00173   } <span class="keywordflow">else</span> {
<a name="l00174"></a>00174     <span class="keywordflow">while</span> ((<span class="keywordtype">signed</span> <span class="keywordtype">long</span> )(<a class="code" href="a01859.html#ga50c22f9b9d60dd1f9e59b63a3a6676b1" title="Get the current clock time.">clock_time</a>() - endticks) &lt; 0) {;}
<a name="l00175"></a>00175   }
<a name="l00176"></a>00176 }
<a name="l00177"></a>00177 <span class="comment">/*---------------------------------------------------------------------------*/</span><span class="comment"></span>
<a name="l00178"></a>00178 <span class="comment">/**</span>
<a name="l00179"></a>00179 <span class="comment"> * Delay the CPU for up to 65535*(4000000/F_CPU) microseconds.</span>
<a name="l00180"></a>00180 <span class="comment"> * Copied from _delay_loop_2 in AVR library delay_basic.h, 4 clocks per loop.</span>
<a name="l00181"></a>00181 <span class="comment"> * For accurate short delays, inline _delay_loop_2 in the caller, use a constant</span>
<a name="l00182"></a>00182 <span class="comment"> * value for the delay, and disable interrupts if necessary.</span>
<a name="l00183"></a>00183 <span class="comment"> */</span>
<a name="l00184"></a>00184 <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">void</span> my_delay_loop_2(uint16_t __count) <a class="code" href="a01961.html#ga12175536a183e136ca9ac42d925e1812" title="Define __attribute__ to nothing since it isn&#39;t handled by IAR.">__attribute__</a>((always_inline));
<a name="l00185"></a>00185 <span class="keywordtype">void</span>
<a name="l00186"></a>00186 my_delay_loop_2(uint16_t __count)
<a name="l00187"></a>00187 {
<a name="l00188"></a>00188   __asm__ <span class="keyword">volatile</span> (
<a name="l00189"></a>00189     <span class="stringliteral">&quot;1: sbiw %0,1&quot;</span> <span class="stringliteral">&quot;\n\t&quot;</span>
<a name="l00190"></a>00190     <span class="stringliteral">&quot;brne 1b&quot;</span>
<a name="l00191"></a>00191     : <span class="stringliteral">&quot;=w&quot;</span> (__count)
<a name="l00192"></a>00192     : <span class="stringliteral">&quot;0&quot;</span> (__count)
<a name="l00193"></a>00193   );
<a name="l00194"></a>00194 }
<a name="l00195"></a>00195 <span class="keywordtype">void</span>
<a name="l00196"></a><a class="code" href="a01892.html#ga6d9b39ea66631c1ad3a5f7e2f36dbae1">00196</a> <a class="code" href="a01859.html#gac0603df16193735b2cf4b70d54133356" title="Delay a given number of microseconds.">clock_delay_usec</a>(uint16_t howlong)
<a name="l00197"></a>00197 {
<a name="l00198"></a>00198 <span class="preprocessor">#if 0</span>
<a name="l00199"></a>00199 <span class="preprocessor"></span><span class="comment">/* Accurate delay at any frequency, but introduces a 64 bit intermediate</span>
<a name="l00200"></a>00200 <span class="comment">  * and has a 279 clock overhead.</span>
<a name="l00201"></a>00201 <span class="comment"> */</span>
<a name="l00202"></a>00202   <span class="keywordflow">if</span>(howlong&lt;=(uint16_t)(279000000UL/F_CPU)) <span class="keywordflow">return</span>;
<a name="l00203"></a>00203   howlong-=(uint16_t) (279000000UL/F_CPU);
<a name="l00204"></a>00204   my_delay_loop_2(((uint64_t)(howlong) * (uint64_t) F_CPU) / 4000000ULL);
<a name="l00205"></a>00205   <span class="comment">/* Remaining numbers tweaked for the breakpoint CPU frequencies */</span>
<a name="l00206"></a>00206   <span class="comment">/* Add other frequencies as necessary */</span>
<a name="l00207"></a>00207 <span class="preprocessor">#elif F_CPU&gt;=16000000UL</span>
<a name="l00208"></a>00208 <span class="preprocessor"></span>  <span class="keywordflow">if</span>(howlong&lt;1) <span class="keywordflow">return</span>;
<a name="l00209"></a>00209   my_delay_loop_2((howlong*(uint16_t)(F_CPU/3250000)));
<a name="l00210"></a>00210 <span class="preprocessor">#elif F_CPU &gt;= 12000000UL</span>
<a name="l00211"></a>00211 <span class="preprocessor"></span>  <span class="keywordflow">if</span>(howlong&lt;2) <span class="keywordflow">return</span>;
<a name="l00212"></a>00212   howlong-=(uint16_t) (3*12000000/F_CPU);
<a name="l00213"></a>00213   my_delay_loop_2((howlong*(uint16_t)(F_CPU/3250000)));
<a name="l00214"></a>00214 <span class="preprocessor">#elif F_CPU &gt;= 8000000UL</span>
<a name="l00215"></a>00215 <span class="preprocessor"></span>  <span class="keywordflow">if</span>(howlong&lt;4) <span class="keywordflow">return</span>;
<a name="l00216"></a>00216   howlong-=(uint16_t) (3*8000000/F_CPU);
<a name="l00217"></a>00217   my_delay_loop_2((howlong*(uint16_t)(F_CPU/2000000))/2);
<a name="l00218"></a>00218 <span class="preprocessor">#elif F_CPU &gt;= 4000000UL</span>
<a name="l00219"></a>00219 <span class="preprocessor"></span>  <span class="keywordflow">if</span>(howlong&lt;5) <span class="keywordflow">return</span>;
<a name="l00220"></a>00220   howlong-=(uint16_t) (4*4000000/F_CPU);
<a name="l00221"></a>00221   my_delay_loop_2((howlong*(uint16_t)(F_CPU/2000000))/2);
<a name="l00222"></a>00222 <span class="preprocessor">#elif F_CPU &gt;= 2000000UL</span>
<a name="l00223"></a>00223 <span class="preprocessor"></span>  <span class="keywordflow">if</span>(howlong&lt;11) <span class="keywordflow">return</span>;
<a name="l00224"></a>00224   howlong-=(uint16_t) (10*2000000/F_CPU);
<a name="l00225"></a>00225   my_delay_loop_2((howlong*(uint16_t)(F_CPU/1000000))/4);
<a name="l00226"></a>00226 <span class="preprocessor">#elif F_CPU &gt;= 1000000UL</span>
<a name="l00227"></a>00227 <span class="preprocessor"></span>  <span class="keywordflow">if</span>(howlong&lt;=17) <span class="keywordflow">return</span>;
<a name="l00228"></a>00228   howlong-=(uint16_t) (17*1000000/F_CPU);
<a name="l00229"></a>00229   my_delay_loop_2((howlong*(uint16_t)(F_CPU/1000000))/4);
<a name="l00230"></a>00230 <span class="preprocessor">#else</span>
<a name="l00231"></a>00231 <span class="preprocessor"></span>  howlong &gt;&gt; 5;
<a name="l00232"></a>00232   <span class="keywordflow">if</span> (howlong &lt; 1) <span class="keywordflow">return</span>;
<a name="l00233"></a>00233   my_delay_loop_2(howlong);
<a name="l00234"></a>00234 <span class="preprocessor">#endif</span>
<a name="l00235"></a>00235 <span class="preprocessor"></span>}
<a name="l00236"></a>00236 <span class="preprocessor">#if 0</span>
<a name="l00237"></a>00237 <span class="preprocessor"></span><span class="comment">/*---------------------------------------------------------------------------*/</span><span class="comment"></span>
<a name="l00238"></a>00238 <span class="comment">/**</span>
<a name="l00239"></a>00239 <span class="comment"> * Legacy delay. The original clock_delay for the msp430 used a granularity</span>
<a name="l00240"></a>00240 <span class="comment"> * of 2.83 usec. This approximates that delay for values up to 1456 usec.</span>
<a name="l00241"></a>00241 <span class="comment"> * (The largest core call in leds.c uses 400).</span>
<a name="l00242"></a>00242 <span class="comment"> */</span>
<a name="l00243"></a>00243 <span class="keywordtype">void</span>
<a name="l00244"></a>00244 <a class="code" href="a01859.html#gab39f034abde9b75800698e459e43c3db" title="Legacy delay.">clock_delay</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> howlong)
<a name="l00245"></a>00245 {
<a name="l00246"></a>00246   <span class="keywordflow">if</span>(howlong&lt;2) <span class="keywordflow">return</span>;
<a name="l00247"></a>00247   <a class="code" href="a01859.html#gac0603df16193735b2cf4b70d54133356" title="Delay a given number of microseconds.">clock_delay_usec</a>((45*howlong)&gt;&gt;4);
<a name="l00248"></a>00248 }
<a name="l00249"></a>00249 <span class="preprocessor">#endif</span>
<a name="l00250"></a>00250 <span class="preprocessor"></span><span class="comment">/*---------------------------------------------------------------------------*/</span><span class="comment"></span>
<a name="l00251"></a>00251 <span class="comment">/**</span>
<a name="l00252"></a>00252 <span class="comment"> * Delay up to 65535 milliseconds.</span>
<a name="l00253"></a>00253 <span class="comment"> * \param dt   How many milliseconds to delay.</span>
<a name="l00254"></a>00254 <span class="comment"> *</span>
<a name="l00255"></a>00255 <span class="comment"> * Neither interrupts nor the watchdog timer is disabled over the delay.</span>
<a name="l00256"></a>00256 <span class="comment"> * Platforms are not required to implement this call.</span>
<a name="l00257"></a>00257 <span class="comment"> * \note This will break for CPUs clocked above 260 MHz.</span>
<a name="l00258"></a>00258 <span class="comment"> */</span>
<a name="l00259"></a>00259 <span class="keywordtype">void</span>
<a name="l00260"></a><a class="code" href="a01892.html#ga08450c50f5e6f4cf056d39ed340313e6">00260</a> <a class="code" href="a01892.html#ga08450c50f5e6f4cf056d39ed340313e6" title="Delay up to 65535 milliseconds.">clock_delay_msec</a>(uint16_t howlong)
<a name="l00261"></a>00261 {
<a name="l00262"></a>00262 
<a name="l00263"></a>00263 <span class="preprocessor">#if F_CPU&gt;=16000000</span>
<a name="l00264"></a>00264 <span class="preprocessor"></span>  <span class="keywordflow">while</span>(howlong--) <a class="code" href="a01859.html#gac0603df16193735b2cf4b70d54133356" title="Delay a given number of microseconds.">clock_delay_usec</a>(1000);
<a name="l00265"></a>00265 <span class="preprocessor">#elif F_CPU&gt;=8000000</span>
<a name="l00266"></a>00266 <span class="preprocessor"></span>  uint16_t i=996;
<a name="l00267"></a>00267   <span class="keywordflow">while</span>(howlong--) {<a class="code" href="a01859.html#gac0603df16193735b2cf4b70d54133356" title="Delay a given number of microseconds.">clock_delay_usec</a>(i);i=999;}
<a name="l00268"></a>00268 <span class="preprocessor">#elif F_CPU&gt;=4000000</span>
<a name="l00269"></a>00269 <span class="preprocessor"></span>  uint16_t i=992;
<a name="l00270"></a>00270   <span class="keywordflow">while</span>(howlong--) {<a class="code" href="a01859.html#gac0603df16193735b2cf4b70d54133356" title="Delay a given number of microseconds.">clock_delay_usec</a>(i);i=999;}
<a name="l00271"></a>00271 <span class="preprocessor">#elif F_CPU&gt;=2000000</span>
<a name="l00272"></a>00272 <span class="preprocessor"></span>  uint16_t i=989;
<a name="l00273"></a>00273   <span class="keywordflow">while</span>(howlong--) {<a class="code" href="a01859.html#gac0603df16193735b2cf4b70d54133356" title="Delay a given number of microseconds.">clock_delay_usec</a>(i);i=999;}
<a name="l00274"></a>00274 <span class="preprocessor">#else</span>
<a name="l00275"></a>00275 <span class="preprocessor"></span>  uint16_t i=983;
<a name="l00276"></a>00276   <span class="keywordflow">while</span>(howlong--) {<a class="code" href="a01859.html#gac0603df16193735b2cf4b70d54133356" title="Delay a given number of microseconds.">clock_delay_usec</a>(i);i=999;}
<a name="l00277"></a>00277 <span class="preprocessor">#endif</span>
<a name="l00278"></a>00278 <span class="preprocessor"></span>}
<a name="l00279"></a>00279 <span class="comment">/*---------------------------------------------------------------------------*/</span><span class="comment"></span>
<a name="l00280"></a>00280 <span class="comment">/**</span>
<a name="l00281"></a>00281 <span class="comment"> * Adjust the system current clock time.</span>
<a name="l00282"></a>00282 <span class="comment"> * \param dt   How many ticks to add</span>
<a name="l00283"></a>00283 <span class="comment"> *</span>
<a name="l00284"></a>00284 <span class="comment"> * Typically used to add ticks after an MCU sleep</span>
<a name="l00285"></a>00285 <span class="comment"> * clock_seconds will increment if necessary to reflect the tick addition.</span>
<a name="l00286"></a>00286 <span class="comment">  * Leap ticks or seconds can (rarely) be introduced if the ISR is not blocked.</span>
<a name="l00287"></a>00287 <span class="comment"> */</span>
<a name="l00288"></a>00288 <span class="keywordtype">void</span>
<a name="l00289"></a><a class="code" href="a01892.html#ga21e3e21923b005ad08f6d726285868b0">00289</a> <a class="code" href="a01892.html#ga21e3e21923b005ad08f6d726285868b0" title="Adjust the system current clock time.">clock_adjust_ticks</a>(clock_time_t howmany)
<a name="l00290"></a>00290 {
<a name="l00291"></a>00291   uint8_t sreg = SREG;cli();
<a name="l00292"></a>00292   count  += howmany;
<a name="l00293"></a>00293 <span class="preprocessor">#if TWO_COUNTERS</span>
<a name="l00294"></a>00294 <span class="preprocessor"></span>  howmany+= scount;
<a name="l00295"></a>00295 <span class="preprocessor">#endif</span>
<a name="l00296"></a>00296 <span class="preprocessor"></span>  <span class="keywordflow">while</span>(howmany &gt;= <a class="code" href="a01859.html#gae3ced0551b26c9b99cb45a86f34d100a" title="A second, measured in system clock time.">CLOCK_SECOND</a>) {
<a name="l00297"></a>00297     howmany -= <a class="code" href="a01859.html#gae3ced0551b26c9b99cb45a86f34d100a" title="A second, measured in system clock time.">CLOCK_SECOND</a>;
<a name="l00298"></a>00298     seconds++;
<a name="l00299"></a>00299     sleepseconds++;
<a name="l00300"></a>00300 <span class="preprocessor">#if RADIOSTATS</span>
<a name="l00301"></a>00301 <span class="preprocessor"></span>    <span class="keywordflow">if</span> (RF230_receive_on) radioontime += 1;
<a name="l00302"></a>00302 <span class="preprocessor">#endif</span>
<a name="l00303"></a>00303 <span class="preprocessor"></span>  }
<a name="l00304"></a>00304 <span class="preprocessor">#if TWO_COUNTERS</span>
<a name="l00305"></a>00305 <span class="preprocessor"></span>  scount = howmany;
<a name="l00306"></a>00306 <span class="preprocessor">#endif</span>
<a name="l00307"></a>00307 <span class="preprocessor"></span>  SREG=sreg;
<a name="l00308"></a>00308 }
<a name="l00309"></a>00309 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00310"></a>00310 <span class="comment">/* This it the timer comparison match interrupt.</span>
<a name="l00311"></a>00311 <span class="comment"> * It maintains the tick counter, clock_seconds, and etimer updates.</span>
<a name="l00312"></a>00312 <span class="comment"> *</span>
<a name="l00313"></a>00313 <span class="comment"> * If the interrupts derive from an external crystal, the CPU instruction</span>
<a name="l00314"></a>00314 <span class="comment"> * clock can optionally be phase locked to it. This allows accurate rtimer</span>
<a name="l00315"></a>00315 <span class="comment"> * interrupts for strobe detection during radio duty cycling.</span>
<a name="l00316"></a>00316 <span class="comment"> * Phase lock is accomplished by adjusting OSCCAL based on the phase error</span>
<a name="l00317"></a>00317 <span class="comment"> * since the last interrupt.</span>
<a name="l00318"></a>00318 <span class="comment"> */</span>
<a name="l00319"></a>00319 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00320"></a>00320 <span class="preprocessor">#if defined(DOXYGEN)</span>
<a name="l00321"></a>00321 <span class="preprocessor"></span><span class="comment">/** \brief ISR for the TIMER0 or TIMER2 interrupt as defined in</span>
<a name="l00322"></a>00322 <span class="comment"> *  clock-avr.h for the particular MCU.</span>
<a name="l00323"></a>00323 <span class="comment"> */</span>
<a name="l00324"></a>00324 <span class="keywordtype">void</span> <a class="code" href="a01892.html#gae2b3aacd86f9fbac816c7435dc3df9e5" title="ISR for the TIMER0 or TIMER2 interrupt as defined in clock-avr.h for the particular MCU...">AVR_OUTPUT_COMPARE_INT</a>(<span class="keywordtype">void</span>);
<a name="l00325"></a>00325 <span class="preprocessor">#else</span>
<a name="l00326"></a>00326 <span class="preprocessor"></span>ISR(<a class="code" href="a01892.html#gae2b3aacd86f9fbac816c7435dc3df9e5" title="ISR for the TIMER0 or TIMER2 interrupt as defined in clock-avr.h for the particular MCU...">AVR_OUTPUT_COMPARE_INT</a>)
<a name="l00327"></a>00327 {
<a name="l00328"></a>00328     count++;
<a name="l00329"></a>00329 <span class="preprocessor">#if TWO_COUNTERS</span>
<a name="l00330"></a>00330 <span class="preprocessor"></span>  <span class="keywordflow">if</span>(++scount &gt;= <a class="code" href="a01859.html#gae3ced0551b26c9b99cb45a86f34d100a" title="A second, measured in system clock time.">CLOCK_SECOND</a>) {
<a name="l00331"></a>00331     scount = 0;
<a name="l00332"></a>00332 <span class="preprocessor">#else</span>
<a name="l00333"></a>00333 <span class="preprocessor"></span>  <span class="keywordflow">if</span>(count%<a class="code" href="a01859.html#gae3ced0551b26c9b99cb45a86f34d100a" title="A second, measured in system clock time.">CLOCK_SECOND</a>==0) {
<a name="l00334"></a>00334 <span class="preprocessor">#endif</span>
<a name="l00335"></a>00335 <span class="preprocessor"></span>    seconds++;
<a name="l00336"></a>00336 
<a name="l00337"></a>00337 <span class="preprocessor">#if RADIO_CONF_CALIBRATE_INTERVAL</span>
<a name="l00338"></a>00338 <span class="preprocessor"></span>   <span class="comment">/* Force a radio PLL frequency calibration every 256 seconds */</span>
<a name="l00339"></a>00339     <span class="keywordflow">if</span> (++calibrate_interval==0) {
<a name="l00340"></a>00340       rf230_calibrate=1;
<a name="l00341"></a>00341     }
<a name="l00342"></a>00342 <span class="preprocessor">#endif</span>
<a name="l00343"></a>00343 <span class="preprocessor"></span>
<a name="l00344"></a>00344   }
<a name="l00345"></a>00345 
<a name="l00346"></a>00346 <span class="preprocessor">#if RADIOSTATS</span>
<a name="l00347"></a>00347 <span class="preprocessor"></span>   <span class="comment">/* Sample radio on time. Less accurate than ENERGEST but a smaller footprint */</span>
<a name="l00348"></a>00348   <span class="keywordflow">if</span> (RF230_receive_on) {
<a name="l00349"></a>00349     <span class="keywordflow">if</span> (++rcount &gt;= <a class="code" href="a01859.html#gae3ced0551b26c9b99cb45a86f34d100a" title="A second, measured in system clock time.">CLOCK_SECOND</a>) {
<a name="l00350"></a>00350       rcount=0;
<a name="l00351"></a>00351       radioontime++;
<a name="l00352"></a>00352     }
<a name="l00353"></a>00353   }
<a name="l00354"></a>00354 <span class="preprocessor">#endif</span>
<a name="l00355"></a>00355 <span class="preprocessor"></span> 
<a name="l00356"></a>00356 <span class="preprocessor">#if F_CPU == 0x800000 &amp;&amp; USE_32K_CRYSTAL</span>
<a name="l00357"></a>00357 <span class="preprocessor"></span><span class="comment">/* Special routine to phase lock CPU to 32768 watch crystal.</span>
<a name="l00358"></a>00358 <span class="comment"> * We are interrupting 128 times per second.</span>
<a name="l00359"></a>00359 <span class="comment"> * If RTIMER_ARCH_SECOND is a multiple of 128 we can use the residual modulo</span>
<a name="l00360"></a>00360 <span class="comment"> * 128 to determine whether the clock is too fast or too slow.</span>
<a name="l00361"></a>00361 <span class="comment"> * E.g. for 8192 the phase should be constant modulo 0x40</span>
<a name="l00362"></a>00362 <span class="comment"> * OSCCAL is started in the lower range at 90, allowed to stabilize, then</span>
<a name="l00363"></a>00363 <span class="comment"> * rapidly raised or lowered based on the phase comparison.</span>
<a name="l00364"></a>00364 <span class="comment"> * It gives less phase noise to do this every tick and doesn&#39;t seem to hurt anything.</span>
<a name="l00365"></a>00365 <span class="comment"> */</span>
<a name="l00366"></a>00366 <span class="preprocessor">#include &quot;rtimer-arch.h&quot;</span>
<a name="l00367"></a>00367 {
<a name="l00368"></a>00368 <span class="keyword">volatile</span> <span class="keyword">static</span> uint8_t lockcount;
<a name="l00369"></a>00369 <span class="keyword">volatile</span> <span class="keyword">static</span> int16_t last_phase;
<a name="l00370"></a>00370 <span class="keyword">volatile</span> <span class="keyword">static</span> uint8_t osccalhigh,osccallow;
<a name="l00371"></a>00371   <span class="keywordflow">if</span> (seconds &lt; 60) { <span class="comment">//give a minute to stabilize</span>
<a name="l00372"></a>00372     <span class="keywordflow">if</span>(++lockcount &gt;= 8192UL*128/RTIMER_ARCH_SECOND) {
<a name="l00373"></a>00373       lockcount=0;
<a name="l00374"></a>00374       rtimer_phase = TCNT3 &amp; 0x0fff;
<a name="l00375"></a>00375       <span class="keywordflow">if</span> (seconds &lt; 2) OSCCAL=100;
<a name="l00376"></a>00376       <span class="keywordflow">if</span> (last_phase &gt; rtimer_phase) osccalhigh=++OSCCAL; <span class="keywordflow">else</span> osccallow=--OSCCAL;
<a name="l00377"></a>00377       last_phase = rtimer_phase;
<a name="l00378"></a>00378     }
<a name="l00379"></a>00379   } <span class="keywordflow">else</span> {
<a name="l00380"></a>00380     uint8_t error = (TCNT3 - last_phase) &amp; 0x3f;
<a name="l00381"></a>00381     <span class="keywordflow">if</span> (error == 0) {
<a name="l00382"></a>00382     } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (error&lt;32) {
<a name="l00383"></a>00383       OSCCAL=osccallow-1;
<a name="l00384"></a>00384     } <span class="keywordflow">else</span> {
<a name="l00385"></a>00385       OSCCAL=osccalhigh+1;
<a name="l00386"></a>00386     }
<a name="l00387"></a>00387   }
<a name="l00388"></a>00388 }
<a name="l00389"></a>00389 <span class="preprocessor">#endif</span>
<a name="l00390"></a>00390 <span class="preprocessor"></span>
<a name="l00391"></a>00391 <span class="preprocessor">#if 1</span>
<a name="l00392"></a>00392 <span class="preprocessor"></span><span class="comment">/*  gcc will save all registers on the stack if an external routine is called */</span>
<a name="l00393"></a>00393   <span class="keywordflow">if</span>(<a class="code" href="a01862.html#ga1cc1db9f408e7c26035399ceb9ee1c5b" title="Check if there are any non-expired event timers.">etimer_pending</a>()) {
<a name="l00394"></a>00394     <a class="code" href="a01862.html#ga59f4cb712f2bba21ef307bcf67c83118" title="Make the event timer aware that the clock has changed.">etimer_request_poll</a>();
<a name="l00395"></a>00395   }
<a name="l00396"></a>00396 <span class="preprocessor">#else</span>
<a name="l00397"></a>00397 <span class="preprocessor"></span><span class="comment">/* doing this locally saves 9 pushes and 9 pops, but these etimer.c and process.c variables have to lose the static qualifier */</span>
<a name="l00398"></a>00398   <span class="keyword">extern</span> <span class="keyword">struct </span><a class="code" href="a00047.html" title="A timer.">etimer</a> *timerlist;
<a name="l00399"></a>00399   <span class="keyword">extern</span> <span class="keyword">volatile</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> poll_requested;
<a name="l00400"></a>00400 
<a name="l00401"></a>00401 <span class="preprocessor">#define PROCESS_STATE_NONE        0</span>
<a name="l00402"></a>00402 <span class="preprocessor"></span><span class="preprocessor">#define PROCESS_STATE_RUNNING     1</span>
<a name="l00403"></a>00403 <span class="preprocessor"></span><span class="preprocessor">#define PROCESS_STATE_CALLED      2</span>
<a name="l00404"></a>00404 <span class="preprocessor"></span>
<a name="l00405"></a>00405   <span class="keywordflow">if</span> (timerlist) {
<a name="l00406"></a>00406     <span class="keywordflow">if</span>(etimer_process.state == PROCESS_STATE_RUNNING || etimer_process.state == PROCESS_STATE_CALLED) {
<a name="l00407"></a>00407       etimer_process.needspoll = 1;
<a name="l00408"></a>00408       poll_requested = 1;
<a name="l00409"></a>00409     }
<a name="l00410"></a>00410   }
<a name="l00411"></a>00411 <span class="preprocessor">#endif</span>
<a name="l00412"></a>00412 <span class="preprocessor"></span>}
<a name="l00413"></a>00413 <span class="preprocessor">#endif </span><span class="comment">/* defined(DOXYGEN) */</span>
<a name="l00414"></a>00414 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00415"></a>00415 <span class="comment">/* Debugging aids */</span>
<a name="l00416"></a>00416 
<a name="l00417"></a>00417 <span class="preprocessor">#ifdef HANDLE_UNSUPPORTED_INTERRUPTS</span>
<a name="l00418"></a>00418 <span class="preprocessor"></span><span class="comment">/* Ignore unsupported interrupts, optionally hang for debugging */</span>
<a name="l00419"></a>00419 <span class="comment">/* BADISR is a gcc weak symbol that matches any undefined interrupt */</span>
<a name="l00420"></a>00420 ISR(BADISR_vect) {
<a name="l00421"></a>00421 <span class="comment">//static volatile uint8_t x;while (1) x++;</span>
<a name="l00422"></a>00422 }
<a name="l00423"></a>00423 <span class="preprocessor">#endif</span>
<a name="l00424"></a>00424 <span class="preprocessor"></span><span class="preprocessor">#ifdef HANG_ON_UNKNOWN_INTERRUPT</span>
<a name="l00425"></a>00425 <span class="preprocessor"></span><span class="comment">/* Hang on any unsupported interrupt */</span>
<a name="l00426"></a>00426 <span class="comment">/* Useful for diagnosing unknown interrupts that reset the mcu.</span>
<a name="l00427"></a>00427 <span class="comment"> * Currently set up for 12mega128rfa1.</span>
<a name="l00428"></a>00428 <span class="comment"> * For other mcus, enable all and then disable the conflicts.</span>
<a name="l00429"></a>00429 <span class="comment"> */</span>
<a name="l00430"></a>00430 <span class="keyword">static</span> <span class="keyword">volatile</span> uint8_t x;
<a name="l00431"></a>00431 ISR( _VECTOR(0)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00432"></a>00432 ISR( _VECTOR(1)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00433"></a>00433 ISR( _VECTOR(2)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00434"></a>00434 ISR( _VECTOR(3)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00435"></a>00435 ISR( _VECTOR(4)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00436"></a>00436 ISR( _VECTOR(5)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00437"></a>00437 ISR( _VECTOR(6)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00438"></a>00438 ISR( _VECTOR(7)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00439"></a>00439 ISR( _VECTOR(8)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00440"></a>00440 ISR( _VECTOR(9)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00441"></a>00441 ISR( _VECTOR(10)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00442"></a>00442 ISR( _VECTOR(11)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00443"></a>00443 ISR( _VECTOR(12)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00444"></a>00444 ISR( _VECTOR(13)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00445"></a>00445 ISR( _VECTOR(14)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00446"></a>00446 ISR( _VECTOR(15)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00447"></a>00447 ISR( _VECTOR(16)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00448"></a>00448 ISR( _VECTOR(17)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00449"></a>00449 ISR( _VECTOR(18)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00450"></a>00450 ISR( _VECTOR(19)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00451"></a>00451 <span class="comment">//ISR( _VECTOR(20)) {while (1) x++;}</span>
<a name="l00452"></a>00452 <span class="comment">//ISR( _VECTOR(21)) {while (1) x++;}</span>
<a name="l00453"></a>00453 ISR( _VECTOR(22)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00454"></a>00454 ISR( _VECTOR(23)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00455"></a>00455 ISR( _VECTOR(24)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00456"></a>00456 <span class="comment">//ISR( _VECTOR(25)) {while (1) x++;}</span>
<a name="l00457"></a>00457 ISR( _VECTOR(26)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00458"></a>00458 <span class="comment">//ISR( _VECTOR(27)) {while (1) x++;}</span>
<a name="l00459"></a>00459 ISR( _VECTOR(28)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00460"></a>00460 ISR( _VECTOR(29)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00461"></a>00461 ISR( _VECTOR(30)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00462"></a>00462 ISR( _VECTOR(31)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00463"></a>00463 <span class="comment">//ISR( _VECTOR(32)) {while (1) x++;}</span>
<a name="l00464"></a>00464 ISR( _VECTOR(33)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00465"></a>00465 ISR( _VECTOR(34)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00466"></a>00466 ISR( _VECTOR(35)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00467"></a>00467 <span class="comment">//ISR( _VECTOR(36)) {while (1) x++;}</span>
<a name="l00468"></a>00468 ISR( _VECTOR(37)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00469"></a>00469 <span class="comment">//ISR( _VECTOR(38)) {while (1) x++;}</span>
<a name="l00470"></a>00470 ISR( _VECTOR(39)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00471"></a>00471 ISR( _VECTOR(40)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00472"></a>00472 ISR( _VECTOR(41)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00473"></a>00473 ISR( _VECTOR(42)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00474"></a>00474 ISR( _VECTOR(43)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00475"></a>00475 ISR( _VECTOR(44)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00476"></a>00476 ISR( _VECTOR(45)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00477"></a>00477 ISR( _VECTOR(46)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00478"></a>00478 ISR( _VECTOR(47)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00479"></a>00479 ISR( _VECTOR(48)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00480"></a>00480 ISR( _VECTOR(49)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00481"></a>00481 ISR( _VECTOR(50)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00482"></a>00482 ISR( _VECTOR(51)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00483"></a>00483 ISR( _VECTOR(52)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00484"></a>00484 ISR( _VECTOR(53)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00485"></a>00485 ISR( _VECTOR(54)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00486"></a>00486 ISR( _VECTOR(55)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00487"></a>00487 ISR( _VECTOR(56)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00488"></a>00488 <span class="comment">//ISR( _VECTOR(57)) {while (1) x++;}</span>
<a name="l00489"></a>00489 <span class="comment">//ISR( _VECTOR(58)) {while (1) x++;}</span>
<a name="l00490"></a>00490 <span class="comment">//ISR( _VECTOR(59)) {while (1) x++;}</span>
<a name="l00491"></a>00491 <span class="comment">//ISR( _VECTOR(60)) {while (1) x++;}</span>
<a name="l00492"></a>00492 ISR( _VECTOR(61)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00493"></a>00493 ISR( _VECTOR(62)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00494"></a>00494 ISR( _VECTOR(63)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00495"></a>00495 ISR( _VECTOR(64)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00496"></a>00496 ISR( _VECTOR(65)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00497"></a>00497 ISR( _VECTOR(66)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00498"></a>00498 ISR( _VECTOR(67)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00499"></a>00499 ISR( _VECTOR(68)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00500"></a>00500 ISR( _VECTOR(69)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00501"></a>00501 ISR( _VECTOR(70)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00502"></a>00502 ISR( _VECTOR(71)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00503"></a>00503 ISR( _VECTOR(72)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00504"></a>00504 ISR( _VECTOR(73)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00505"></a>00505 ISR( _VECTOR(74)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00506"></a>00506 ISR( _VECTOR(75)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00507"></a>00507 ISR( _VECTOR(76)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00508"></a>00508 ISR( _VECTOR(77)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00509"></a>00509 ISR( _VECTOR(78)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00510"></a>00510 ISR( _VECTOR(79)) {<span class="keywordflow">while</span> (1) x++;}
<a name="l00511"></a>00511 <span class="preprocessor">#endif</span>
<a name="l00512"></a>00512 <span class="preprocessor"></span><span class="comment">/** @} */</span><span class="comment"></span>
<a name="l00513"></a>00513 <span class="comment">/** @} */</span>
</pre></div></div><!-- contents -->


<hr class="footer"/><address class="footer"><small>
Generated on Sun Jan 13 2013 10:57:24 for Contiki 2.6 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.7.6.1
</small></address>

</body>
</html>
