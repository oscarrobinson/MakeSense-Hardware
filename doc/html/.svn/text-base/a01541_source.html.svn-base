<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>Contiki 2.6: platform/OrisenPrime/dev/lea_6t.c Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />



</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">Contiki 2.6
   
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.html"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.html"><span>Modules</span></a></li>
      <li><a href="annotated.html"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li><a href="dirs.html"><span>Directories</span></a></li>
      <li><a href="examples.html"><span>Examples</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>Globals</span></a></li>
    </ul>
  </div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="dir_da81161b528b307837d2c2604d1aafcb.html">platform</a>      </li>
      <li class="navelem"><a class="el" href="dir_61c1519dc7c64251c41b08c597bd4931.html">OrisenPrime</a>      </li>
      <li class="navelem"><a class="el" href="dir_2c3bf02cfca604d79735b3e18babb9e3.html">dev</a>      </li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">lea_6t.c</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment"> * lea_6t.c</span>
<a name="l00003"></a>00003 <span class="comment"> *</span>
<a name="l00004"></a>00004 <span class="comment"> *  Created on: 1 Sep 2011</span>
<a name="l00005"></a>00005 <span class="comment"> *      Author: mcphillips</span>
<a name="l00006"></a>00006 <span class="comment"> */</span>
<a name="l00007"></a>00007 
<a name="l00008"></a>00008 <span class="preprocessor">#include &lt;stdio.h&gt;</span>
<a name="l00009"></a>00009 <span class="preprocessor">#include &quot;i2c.h&quot;</span>
<a name="l00010"></a>00010 <span class="preprocessor">#include &quot;include/lea_6t.h&quot;</span>
<a name="l00011"></a>00011 <span class="preprocessor">#include &quot;include/demo_software_defines.h&quot;</span>
<a name="l00012"></a>00012 
<a name="l00013"></a>00013 <span class="keyword">extern</span> <span class="keyword">volatile</span> uint8_t timer_delay;
<a name="l00014"></a>00014 
<a name="l00015"></a>00015 <span class="keywordtype">int</span> lea_6t_get_bytes_available(<span class="keywordtype">void</span>) {
<a name="l00016"></a>00016 <span class="comment">//      i2c_enable() ;</span>
<a name="l00017"></a>00017 
<a name="l00018"></a>00018         uint8_t request = LEA_6T_BYTES_AVAILABLE_HIGH ;
<a name="l00019"></a>00019         uint8_t read[] = {0,0} ;
<a name="l00020"></a>00020         uint16_t receive = 0;
<a name="l00021"></a>00021 
<a name="l00022"></a>00022         i2c_transmitinit( LEA_6T_I2C_ADDR, 1, &amp;request ) ;
<a name="l00023"></a>00023         <span class="keywordflow">while</span>(!i2c_transferred()) <span class="comment">/* Wait for transfer */</span> ;
<a name="l00024"></a>00024 
<a name="l00025"></a>00025         i2c_receiveinit( LEA_6T_I2C_ADDR, 1, &amp;read[0] ) ;
<a name="l00026"></a>00026         <span class="keywordflow">while</span>(!i2c_transferred()) <span class="comment">/* Wait for transfer */</span> ;
<a name="l00027"></a>00027 
<a name="l00028"></a>00028         request = LEA_6T_BYTES_AVAILABLE_LOW ;
<a name="l00029"></a>00029         i2c_transmitinit( LEA_6T_I2C_ADDR, 1, &amp;request ) ;
<a name="l00030"></a>00030         <span class="keywordflow">while</span>(!i2c_transferred()) <span class="comment">/* Wait for transfer */</span> ;
<a name="l00031"></a>00031 
<a name="l00032"></a>00032         i2c_receiveinit( LEA_6T_I2C_ADDR, 1, &amp;read[1] ) ;
<a name="l00033"></a>00033         <span class="keywordflow">while</span>(!i2c_transferred()) <span class="comment">/* Wait for transfer */</span> ;
<a name="l00034"></a>00034         receive = (read[0]&lt;&lt;8)|read[1];
<a name="l00035"></a>00035 
<a name="l00036"></a>00036         <span class="keywordflow">if</span> (receive){
<a name="l00037"></a>00037                 PRINTF(<span class="stringliteral">&quot;Number of Bytes available: %d\n&quot;</span>, receive) ;
<a name="l00038"></a>00038         }
<a name="l00039"></a>00039 
<a name="l00040"></a>00040 
<a name="l00041"></a>00041         <span class="keywordflow">return</span> receive;
<a name="l00042"></a>00042 
<a name="l00043"></a>00043 <span class="comment">//      i2c_disable() ;</span>
<a name="l00044"></a>00044 }
<a name="l00045"></a>00045 
<a name="l00046"></a>00046 <span class="keywordtype">void</span> lea_6t_get_data_stream(uint8_t *buffer, uint16_t len) {
<a name="l00047"></a>00047 
<a name="l00048"></a>00048         uint8_t request = LEA_6T_DATA_STREAM ;
<a name="l00049"></a>00049 
<a name="l00050"></a>00050         i2c_transmitinit( LEA_6T_I2C_ADDR, 1, &amp;request ) ;
<a name="l00051"></a>00051         <span class="keywordflow">while</span>(!i2c_transferred()) <span class="comment">/* Wait for transfer */</span> ;
<a name="l00052"></a>00052 
<a name="l00053"></a>00053         i2c_receiveinit( LEA_6T_I2C_ADDR, len, buffer ) ;
<a name="l00054"></a>00054         <span class="keywordflow">while</span>(!i2c_transferred()) <span class="comment">/* Wait for transfer */</span> ;
<a name="l00055"></a>00055 }
<a name="l00056"></a>00056 
<a name="l00057"></a>00057 <span class="keywordtype">int</span> lea_6t_check_ck(uint8_t *buffer, uint8_t len ) {
<a name="l00058"></a>00058         uint8_t ck_a = 0;
<a name="l00059"></a>00059         uint8_t ck_b = 0;
<a name="l00060"></a>00060         uint8_t i = 0;
<a name="l00061"></a>00061         <span class="keywordflow">for</span> (i = 0; i &lt; (len - 4); i++ ){
<a name="l00062"></a>00062                 ck_a = ck_a + buffer[i+2];
<a name="l00063"></a>00063                 ck_b = ck_b + ck_a;
<a name="l00064"></a>00064         }
<a name="l00065"></a>00065 <span class="comment">//      printf(&quot;ck_a %x cal_a %x ck_b %x cal_b %x &quot;,buffer[])</span>
<a name="l00066"></a>00066         <span class="keywordflow">if</span> ((ck_a == buffer[len-2]) &amp;&amp; (ck_b == buffer[len-1])) <span class="keywordflow">return</span> 1;
<a name="l00067"></a>00067         <span class="keywordflow">else</span> <span class="keywordflow">return</span> 0;
<a name="l00068"></a>00068 }
<a name="l00069"></a>00069 
<a name="l00070"></a>00070 
<a name="l00071"></a>00071 <span class="keywordtype">void</span> lea_6t_decode_gps(<span class="keyword">struct</span> nav_sol_packet *nsp, uint8_t *buffer) {
<a name="l00072"></a>00072         nsp-&gt;header = buffer[0] + (buffer[1]&lt;&lt;8);
<a name="l00073"></a>00073         nsp-&gt;id = buffer[2] + (buffer[3]&lt;&lt;8);
<a name="l00074"></a>00074         nsp-&gt;length = buffer[4] + (buffer[5]&lt;&lt;8) ;
<a name="l00075"></a>00075         nsp-&gt;itow = buffer[6] + (buffer[7]&lt;&lt;8) + (buffer[8]&lt;&lt;16) + (buffer[9]&lt;&lt;24) ;
<a name="l00076"></a>00076         nsp-&gt;frac = buffer[10] + (buffer[11]&lt;&lt;8) + (buffer[12]&lt;&lt;16) + (buffer[13]&lt;&lt;24) ;
<a name="l00077"></a>00077         nsp-&gt;week = buffer[14] + (buffer[15]&lt;&lt;8) ;
<a name="l00078"></a>00078         nsp-&gt;gpsfix = buffer[16] ;
<a name="l00079"></a>00079         nsp-&gt;flags = buffer[17] ;
<a name="l00080"></a>00080         nsp-&gt;ecef_x = buffer[18] + (buffer[19]&lt;&lt;8) + (buffer[20]&lt;&lt;16) + (buffer[21]&lt;&lt;24) ;
<a name="l00081"></a>00081         nsp-&gt;ecef_y = buffer[22] + (buffer[23]&lt;&lt;8) + (buffer[24]&lt;&lt;16) + (buffer[25]&lt;&lt;24) ;
<a name="l00082"></a>00082         nsp-&gt;ecef_z = buffer[26] + (buffer[27]&lt;&lt;8) + (buffer[28]&lt;&lt;16) + (buffer[29]&lt;&lt;24) ;
<a name="l00083"></a>00083         nsp-&gt;pacc = buffer[30] + (buffer[31]&lt;&lt;8) + (buffer[32]&lt;&lt;16) + (buffer[33]&lt;&lt;24) ;
<a name="l00084"></a>00084         nsp-&gt;ecefvx = buffer[34] + (buffer[35]&lt;&lt;8) + (buffer[36]&lt;&lt;16) + (buffer[37]&lt;&lt;24) ;
<a name="l00085"></a>00085         nsp-&gt;ecefvy = buffer[38] + (buffer[39]&lt;&lt;8) + (buffer[40]&lt;&lt;16) + (buffer[41]&lt;&lt;24) ;
<a name="l00086"></a>00086         nsp-&gt;ecefvz = buffer[42] + (buffer[43]&lt;&lt;8) + (buffer[44]&lt;&lt;16) + (buffer[45]&lt;&lt;24) ;
<a name="l00087"></a>00087         nsp-&gt;sacc = buffer[46] + (buffer[47]&lt;&lt;8) + (buffer[48]&lt;&lt;16) + (buffer[49]&lt;&lt;24) ;
<a name="l00088"></a>00088         nsp-&gt;pdop = buffer[50] + (buffer[51]&lt;&lt;8) ;
<a name="l00089"></a>00089         nsp-&gt;res1 = buffer[52] ;
<a name="l00090"></a>00090         nsp-&gt;numsv = buffer[53] ;
<a name="l00091"></a>00091         nsp-&gt;res2 = buffer[54] + (buffer[55]&lt;&lt;8) + (buffer[56]&lt;&lt;16) + (buffer[57]&lt;&lt;24) ;
<a name="l00092"></a>00092         nsp-&gt;ck_a = buffer[58] ;
<a name="l00093"></a>00093         nsp-&gt;ck_b = buffer[59] ;
<a name="l00094"></a>00094 }
<a name="l00095"></a>00095 
<a name="l00096"></a>00096 
<a name="l00097"></a>00097 <span class="keywordtype">void</span> lea_6t_set_gps(<span class="keywordtype">void</span>) {
<a name="l00098"></a>00098 
<a name="l00099"></a>00099         uint8_t <span class="keyword">set</span>[8][15] = {
<a name="l00100"></a>00100                         { 0xB5, 0x62, 0x06, 0x01, 0x06, 0x00, 0x01, 0x06, 0x00, 0x01, 0x00, 0x00, 0x15, 0x9c }, <span class="comment">//NAV-SOL uart1</span>
<a name="l00101"></a>00101                         { 0xB5, 0x62, 0x06, 0x01, 0x06, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFD, 0x15 }, <span class="comment">//NMEW-GPGGA off</span>
<a name="l00102"></a>00102                         { 0xB5, 0x62, 0x06, 0x01, 0x06, 0x00, 0xF0, 0x01, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x1A }, <span class="comment">//NMEW-GPGLL off</span>
<a name="l00103"></a>00103                         { 0xB5, 0x62, 0x06, 0x01, 0x06, 0x00, 0xF0, 0x02, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x1F }, <span class="comment">//NMEW-GPGSA off</span>
<a name="l00104"></a>00104                         { 0xB5, 0x62, 0x06, 0x01, 0x06, 0x00, 0xF0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24 }, <span class="comment">//NMEW-GPGSV off</span>
<a name="l00105"></a>00105                         { 0xB5, 0x62, 0x06, 0x01, 0x06, 0x00, 0xF0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x01, 0x29 }, <span class="comment">//NMEW-GPRMC off</span>
<a name="l00106"></a>00106                         { 0xB5, 0x62, 0x06, 0x01, 0x06, 0x00, 0xF0, 0x05, 0x00, 0x00, 0x00, 0x00, 0x02, 0x2E }, <span class="comment">//NMEW-GPVTG off</span>
<a name="l00107"></a>00107                         { 0xB5, 0x62, 0x06, 0x08, 0x06, 0x00, 0xC8, 0x00, 0x01, 0x00, 0x01, 0x00, 0xDE, 0x6A } <span class="comment">//Set 5Hz Sample Rate</span>
<a name="l00108"></a>00108         };
<a name="l00109"></a>00109 <span class="preprocessor">#if 0</span>
<a name="l00110"></a>00110 <span class="preprocessor"></span>        i2c_transmitinit( LEA_6T_I2C_ADDR, 15, <span class="keyword">set</span>[0]) ;
<a name="l00111"></a>00111         <span class="keywordflow">while</span>(!i2c_transferred()) <span class="comment">/* Wait for transfer */</span> ;
<a name="l00112"></a>00112         timer_delay = 10;
<a name="l00113"></a>00113         <span class="keywordflow">while</span>(timer_delay &gt; 0){}
<a name="l00114"></a>00114 
<a name="l00115"></a>00115         i2c_transmitinit( LEA_6T_I2C_ADDR, 15, <span class="keyword">set</span>[1] ) ;
<a name="l00116"></a>00116         <span class="keywordflow">while</span>(!i2c_transferred()) <span class="comment">/* Wait for transfer */</span> ;
<a name="l00117"></a>00117         timer_delay = 10;
<a name="l00118"></a>00118         <span class="keywordflow">while</span>(timer_delay &gt; 0){}
<a name="l00119"></a>00119 
<a name="l00120"></a>00120         i2c_transmitinit( LEA_6T_I2C_ADDR, 15, <span class="keyword">set</span>[2] ) ;
<a name="l00121"></a>00121         <span class="keywordflow">while</span>(!i2c_transferred()) <span class="comment">/* Wait for transfer */</span> ;
<a name="l00122"></a>00122         timer_delay = 10;
<a name="l00123"></a>00123         <span class="keywordflow">while</span>(timer_delay &gt; 0){}
<a name="l00124"></a>00124 
<a name="l00125"></a>00125         i2c_transmitinit( LEA_6T_I2C_ADDR, 15, <span class="keyword">set</span>[3] ) ;
<a name="l00126"></a>00126         <span class="keywordflow">while</span>(!i2c_transferred()) <span class="comment">/* Wait for transfer */</span> ;
<a name="l00127"></a>00127         timer_delay = 10;
<a name="l00128"></a>00128         <span class="keywordflow">while</span>(timer_delay &gt; 0){}
<a name="l00129"></a>00129 
<a name="l00130"></a>00130         i2c_transmitinit( LEA_6T_I2C_ADDR, 15, <span class="keyword">set</span>[4] ) ;
<a name="l00131"></a>00131         <span class="keywordflow">while</span>(!i2c_transferred()) <span class="comment">/* Wait for transfer */</span> ;
<a name="l00132"></a>00132         timer_delay = 10;
<a name="l00133"></a>00133         <span class="keywordflow">while</span>(timer_delay &gt; 0){}
<a name="l00134"></a>00134 
<a name="l00135"></a>00135         i2c_transmitinit( LEA_6T_I2C_ADDR, 15, <span class="keyword">set</span>[5] ) ;
<a name="l00136"></a>00136         <span class="keywordflow">while</span>(!i2c_transferred()) <span class="comment">/* Wait for transfer */</span> ;
<a name="l00137"></a>00137         timer_delay = 10;
<a name="l00138"></a>00138         <span class="keywordflow">while</span>(timer_delay &gt; 0){}
<a name="l00139"></a>00139 
<a name="l00140"></a>00140         i2c_transmitinit( LEA_6T_I2C_ADDR, 15, <span class="keyword">set</span>[6] ) ;
<a name="l00141"></a>00141         <span class="keywordflow">while</span>(!i2c_transferred()) <span class="comment">/* Wait for transfer */</span> ;
<a name="l00142"></a>00142         timer_delay = 10;
<a name="l00143"></a>00143         <span class="keywordflow">while</span>(timer_delay &gt; 0){}
<a name="l00144"></a>00144 <span class="preprocessor">#endif</span>
<a name="l00145"></a>00145 <span class="preprocessor"></span>        i2c_transmitinit( LEA_6T_I2C_ADDR, 15, <span class="keyword">set</span>[7] ) ;
<a name="l00146"></a>00146         <span class="keywordflow">while</span>(!i2c_transferred()) <span class="comment">/* Wait for transfer */</span> ;
<a name="l00147"></a>00147         timer_delay = 10;
<a name="l00148"></a>00148         <span class="keywordflow">while</span>(timer_delay &gt; 0){}
<a name="l00149"></a>00149 
<a name="l00150"></a>00150 }
<a name="l00151"></a>00151 
</pre></div></div><!-- contents -->


<hr class="footer"/><address class="footer"><small>
Generated on Sun Jan 13 2013 10:57:27 for Contiki 2.6 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.7.6.1
</small></address>

</body>
</html>
