<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>Contiki 2.6: core/net/uip6.c Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />



</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">Contiki 2.6
   
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.html"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.html"><span>Modules</span></a></li>
      <li><a href="annotated.html"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li><a href="dirs.html"><span>Directories</span></a></li>
      <li><a href="examples.html"><span>Examples</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>Globals</span></a></li>
    </ul>
  </div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="dir_3b4aaa38be606d755c8f09da5f4b54fc.html">core</a>      </li>
      <li class="navelem"><a class="el" href="dir_e85a2b0fd2c84e4058315392b52d2635.html">net</a>      </li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">uip6.c</div>  </div>
</div><!--header-->
<div class="contents">
<a href="a00436.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**</span>
<a name="l00002"></a>00002 <span class="comment"> * \addtogroup uip6</span>
<a name="l00003"></a>00003 <span class="comment"> * @{</span>
<a name="l00004"></a>00004 <span class="comment"> */</span>
<a name="l00005"></a>00005 <span class="comment"></span>
<a name="l00006"></a>00006 <span class="comment">/**</span>
<a name="l00007"></a>00007 <span class="comment"> * \file</span>
<a name="l00008"></a>00008 <span class="comment"> *         The uIP TCP/IPv6 stack code.</span>
<a name="l00009"></a>00009 <span class="comment"> *</span>
<a name="l00010"></a>00010 <span class="comment"> * \author Adam Dunkels &lt;adam@sics.se&gt;</span>
<a name="l00011"></a>00011 <span class="comment"> * \author Julien Abeille &lt;jabeille@cisco.com&gt; (IPv6 related code)</span>
<a name="l00012"></a>00012 <span class="comment"> * \author Mathilde Durvy &lt;mdurvy@cisco.com&gt; (IPv6 related code)</span>
<a name="l00013"></a>00013 <span class="comment"> */</span>
<a name="l00014"></a>00014 <span class="comment">/*</span>
<a name="l00015"></a>00015 <span class="comment"> * Copyright (c) 2001-2003, Adam Dunkels.</span>
<a name="l00016"></a>00016 <span class="comment"> * All rights reserved.</span>
<a name="l00017"></a>00017 <span class="comment"> *</span>
<a name="l00018"></a>00018 <span class="comment"> * Redistribution and use in source and binary forms, with or without</span>
<a name="l00019"></a>00019 <span class="comment"> * modification, are permitted provided that the following conditions</span>
<a name="l00020"></a>00020 <span class="comment"> * are met:</span>
<a name="l00021"></a>00021 <span class="comment"> * 1. Redistributions of source code must retain the above copyright</span>
<a name="l00022"></a>00022 <span class="comment"> *    notice, this list of conditions and the following disclaimer.</span>
<a name="l00023"></a>00023 <span class="comment"> * 2. Redistributions in binary form must reproduce the above copyright</span>
<a name="l00024"></a>00024 <span class="comment"> *    notice, this list of conditions and the following disclaimer in the</span>
<a name="l00025"></a>00025 <span class="comment"> *    documentation and/or other materials provided with the distribution.</span>
<a name="l00026"></a>00026 <span class="comment"> * 3. The name of the author may not be used to endorse or promote</span>
<a name="l00027"></a>00027 <span class="comment"> *    products derived from this software without specific prior</span>
<a name="l00028"></a>00028 <span class="comment"> *    written permission.</span>
<a name="l00029"></a>00029 <span class="comment"> *</span>
<a name="l00030"></a>00030 <span class="comment"> * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS&#39;&#39; AND ANY EXPRESS</span>
<a name="l00031"></a>00031 <span class="comment"> * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED</span>
<a name="l00032"></a>00032 <span class="comment"> * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE</span>
<a name="l00033"></a>00033 <span class="comment"> * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY</span>
<a name="l00034"></a>00034 <span class="comment"> * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</span>
<a name="l00035"></a>00035 <span class="comment"> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE</span>
<a name="l00036"></a>00036 <span class="comment"> * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS</span>
<a name="l00037"></a>00037 <span class="comment"> * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,</span>
<a name="l00038"></a>00038 <span class="comment"> * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING</span>
<a name="l00039"></a>00039 <span class="comment"> * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS</span>
<a name="l00040"></a>00040 <span class="comment"> * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</span>
<a name="l00041"></a>00041 <span class="comment"> *</span>
<a name="l00042"></a>00042 <span class="comment"> * This file is part of the uIP TCP/IP stack.</span>
<a name="l00043"></a>00043 <span class="comment"> *</span>
<a name="l00044"></a>00044 <span class="comment"> * $Id: uip6.c,v 1.25 2011/01/04 22:11:37 joxe Exp $</span>
<a name="l00045"></a>00045 <span class="comment"> *</span>
<a name="l00046"></a>00046 <span class="comment"> */</span>
<a name="l00047"></a>00047 
<a name="l00048"></a>00048 <span class="comment">/*</span>
<a name="l00049"></a>00049 <span class="comment"> * uIP is a small implementation of the IP, UDP and TCP protocols (as</span>
<a name="l00050"></a>00050 <span class="comment"> * well as some basic ICMP stuff). The implementation couples the IP,</span>
<a name="l00051"></a>00051 <span class="comment"> * UDP, TCP and the application layers very tightly. To keep the size</span>
<a name="l00052"></a>00052 <span class="comment"> * of the compiled code down, this code frequently uses the goto</span>
<a name="l00053"></a>00053 <span class="comment"> * statement. While it would be possible to break the uip_process()</span>
<a name="l00054"></a>00054 <span class="comment"> * function into many smaller functions, this would increase the code</span>
<a name="l00055"></a>00055 <span class="comment"> * size because of the overhead of parameter passing and the fact that</span>
<a name="l00056"></a>00056 <span class="comment"> * the optimier would not be as efficient.</span>
<a name="l00057"></a>00057 <span class="comment"> *</span>
<a name="l00058"></a>00058 <span class="comment"> * The principle is that we have a small buffer, called the uip_buf,</span>
<a name="l00059"></a>00059 <span class="comment"> * in which the device driver puts an incoming packet. The TCP/IP</span>
<a name="l00060"></a>00060 <span class="comment"> * stack parses the headers in the packet, and calls the</span>
<a name="l00061"></a>00061 <span class="comment"> * application. If the remote host has sent data to the application,</span>
<a name="l00062"></a>00062 <span class="comment"> * this data is present in the uip_buf and the application read the</span>
<a name="l00063"></a>00063 <span class="comment"> * data from there. It is up to the application to put this data into</span>
<a name="l00064"></a>00064 <span class="comment"> * a byte stream if needed. The application will not be fed with data</span>
<a name="l00065"></a>00065 <span class="comment"> * that is out of sequence.</span>
<a name="l00066"></a>00066 <span class="comment"> *</span>
<a name="l00067"></a>00067 <span class="comment"> * If the application whishes to send data to the peer, it should put</span>
<a name="l00068"></a>00068 <span class="comment"> * its data into the uip_buf. The uip_appdata pointer points to the</span>
<a name="l00069"></a>00069 <span class="comment"> * first available byte. The TCP/IP stack will calculate the</span>
<a name="l00070"></a>00070 <span class="comment"> * checksums, and fill in the necessary header fields and finally send</span>
<a name="l00071"></a>00071 <span class="comment"> * the packet back to the peer.</span>
<a name="l00072"></a>00072 <span class="comment"> */</span>
<a name="l00073"></a>00073 
<a name="l00074"></a>00074 <span class="preprocessor">#include &quot;<a class="code" href="a00435.html" title="Header file for the uIP TCP/IP stack.">net/uip.h</a>&quot;</span>
<a name="l00075"></a>00075 <span class="preprocessor">#include &quot;<a class="code" href="a00442.html" title="Configuration options for uIP.">net/uipopt.h</a>&quot;</span>
<a name="l00076"></a>00076 <span class="preprocessor">#include &quot;<a class="code" href="a00421.html" title="ICMPv6 echo request and error messages (RFC 4443)">net/uip-icmp6.h</a>&quot;</span>
<a name="l00077"></a>00077 <span class="preprocessor">#include &quot;<a class="code" href="a00423.html" title="Neighbor discovery (RFC 4861)">net/uip-nd6.h</a>&quot;</span>
<a name="l00078"></a>00078 <span class="preprocessor">#include &quot;<a class="code" href="a00415.html" title="Network interface and stateless autoconfiguration (RFC 4862)">net/uip-ds6.h</a>&quot;</span>
<a name="l00079"></a>00079 
<a name="l00080"></a>00080 <span class="preprocessor">#include &lt;string.h&gt;</span>
<a name="l00081"></a>00081 
<a name="l00082"></a>00082 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00083"></a>00083 <span class="comment">/* For Debug, logging, statistics                                            */</span>
<a name="l00084"></a>00084 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00085"></a>00085 
<a name="l00086"></a>00086 <span class="preprocessor">#define DEBUG DEBUG_NONE</span>
<a name="l00087"></a>00087 <span class="preprocessor"></span><span class="preprocessor">#include &quot;<a class="code" href="a00413.html" title="A set of debugging macros.">net/uip-debug.h</a>&quot;</span>
<a name="l00088"></a>00088 
<a name="l00089"></a>00089 <span class="preprocessor">#if UIP_CONF_IPV6_RPL</span>
<a name="l00090"></a>00090 <span class="preprocessor"></span><span class="preprocessor">#include &quot;rpl/rpl.h&quot;</span>
<a name="l00091"></a>00091 <span class="preprocessor">#endif </span><span class="comment">/* UIP_CONF_IPV6_RPL */</span>
<a name="l00092"></a>00092 
<a name="l00093"></a>00093 <span class="preprocessor">#if UIP_LOGGING == 1</span>
<a name="l00094"></a>00094 <span class="preprocessor"></span><span class="preprocessor">#include &lt;stdio.h&gt;</span>
<a name="l00095"></a>00095 <span class="keywordtype">void</span> <a class="code" href="a01828.html#gab58e1ceb7cb73ca2bcd73146b6c1b4e7" title="Print out a uIP log message.">uip_log</a>(<span class="keywordtype">char</span> *msg);
<a name="l00096"></a>00096 <span class="preprocessor">#define UIP_LOG(m) uip_log(m)</span>
<a name="l00097"></a>00097 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00098"></a>00098 <span class="preprocessor"></span><span class="preprocessor">#define UIP_LOG(m)</span>
<a name="l00099"></a>00099 <span class="preprocessor"></span><span class="preprocessor">#endif </span><span class="comment">/* UIP_LOGGING == 1 */</span>
<a name="l00100"></a>00100 
<a name="l00101"></a>00101 <span class="preprocessor">#if UIP_STATISTICS == 1</span>
<a name="l00102"></a>00102 <span class="preprocessor"></span><span class="keyword">struct </span><a class="code" href="a00121.html" title="The structure holding the TCP/IP statistics that are gathered if UIP_STATISTICS is set to 1...">uip_stats</a> uip_stat;
<a name="l00103"></a>00103 <span class="preprocessor">#endif </span><span class="comment">/* UIP_STATISTICS == 1 */</span>
<a name="l00104"></a>00104  
<a name="l00105"></a>00105 
<a name="l00106"></a>00106 <span class="comment">/*---------------------------------------------------------------------------*/</span><span class="comment"></span>
<a name="l00107"></a>00107 <span class="comment">/** @{ \name Layer 2 variables */</span>
<a name="l00108"></a>00108 <span class="comment">/*---------------------------------------------------------------------------*/</span><span class="comment"></span>
<a name="l00109"></a>00109 <span class="comment">/** Host L2 address */</span>
<a name="l00110"></a>00110 <span class="preprocessor">#if UIP_CONF_LL_802154</span>
<a name="l00111"></a>00111 <span class="preprocessor"></span><a class="code" href="a00108.html" title="802.3 address">uip_lladdr_t</a> <a class="code" href="a01926.html#ga89bf167a9f1014d2d78754742eb7e06d" title="Host L2 address.">uip_lladdr</a>;
<a name="l00112"></a>00112 <span class="preprocessor">#else </span><span class="comment">/*UIP_CONF_LL_802154*/</span>
<a name="l00113"></a><a class="code" href="a01929.html#ga4084552512a9e2a0678f6a17fefb1a60">00113</a> <a class="code" href="a00108.html" title="802.3 address">uip_lladdr_t</a> <a class="code" href="a01926.html#ga89bf167a9f1014d2d78754742eb7e06d" title="Host L2 address.">uip_lladdr</a> = {{0x00,0x06,0x98,0x00,0x02,0x32}};
<a name="l00114"></a>00114 <span class="preprocessor">#endif </span><span class="comment">/*UIP_CONF_LL_802154*/</span>
<a name="l00115"></a>00115 <span class="comment">/** @} */</span>
<a name="l00116"></a>00116 
<a name="l00117"></a>00117 <span class="comment">/*---------------------------------------------------------------------------*/</span><span class="comment"></span>
<a name="l00118"></a>00118 <span class="comment">/** @{ \name Layer 3 variables */</span>
<a name="l00119"></a>00119 <span class="comment">/*---------------------------------------------------------------------------*/</span><span class="comment"></span>
<a name="l00120"></a>00120 <span class="comment">/**</span>
<a name="l00121"></a>00121 <span class="comment"> * \brief Type of the next header in IPv6 header or extension headers</span>
<a name="l00122"></a>00122 <span class="comment"> *</span>
<a name="l00123"></a>00123 <span class="comment"> * Can be the next header field in the IPv6 header or in an extension header.</span>
<a name="l00124"></a>00124 <span class="comment"> * When doing fragment reassembly, we must change the value of the next header</span>
<a name="l00125"></a>00125 <span class="comment"> * field in the header before the fragmentation header, hence we need a pointer</span>
<a name="l00126"></a>00126 <span class="comment"> * to this field.</span>
<a name="l00127"></a>00127 <span class="comment"> */</span>
<a name="l00128"></a><a class="code" href="a01929.html#ga6a2217b24bdcc949e5831fbfa139bc45">00128</a> uint8_t *<a class="code" href="a01929.html#ga6a2217b24bdcc949e5831fbfa139bc45" title="Type of the next header in IPv6 header or extension headers.">uip_next_hdr</a>;<span class="comment"></span>
<a name="l00129"></a>00129 <span class="comment">/** \brief bitmap we use to record which IPv6 headers we have already seen */</span>
<a name="l00130"></a><a class="code" href="a01929.html#gafce90a5802ed54ef89b35951fb52d5a9">00130</a> uint8_t <a class="code" href="a01929.html#gafce90a5802ed54ef89b35951fb52d5a9" title="bitmap we use to record which IPv6 headers we have already seen">uip_ext_bitmap</a> = 0;<span class="comment"></span>
<a name="l00131"></a>00131 <span class="comment">/**</span>
<a name="l00132"></a>00132 <span class="comment"> * \brief length of the extension headers read. updated each time we process</span>
<a name="l00133"></a>00133 <span class="comment"> * a header</span>
<a name="l00134"></a>00134 <span class="comment"> */</span>
<a name="l00135"></a><a class="code" href="a01929.html#ga0c63b80e0f8038403df5fee2bac3aab8">00135</a> uint8_t <a class="code" href="a01816.html#ga0c63b80e0f8038403df5fee2bac3aab8" title="The length of the extension headers.">uip_ext_len</a> = 0;<span class="comment"></span>
<a name="l00136"></a>00136 <span class="comment">/** \brief length of the header options read */</span>
<a name="l00137"></a><a class="code" href="a01929.html#ga3612c8a7e64e9863f20b27e4f3def660">00137</a> uint8_t <a class="code" href="a01929.html#ga3612c8a7e64e9863f20b27e4f3def660" title="length of the header options read">uip_ext_opt_offset</a> = 0;<span class="comment"></span>
<a name="l00138"></a>00138 <span class="comment">/** @} */</span>
<a name="l00139"></a>00139 
<a name="l00140"></a>00140 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00141"></a>00141 <span class="comment">/* Buffers                                                                   */</span>
<a name="l00142"></a>00142 <span class="comment">/*---------------------------------------------------------------------------*/</span><span class="comment"></span>
<a name="l00143"></a>00143 <span class="comment">/** \name Buffer defines</span>
<a name="l00144"></a>00144 <span class="comment"> *  @{</span>
<a name="l00145"></a>00145 <span class="comment"> */</span>
<a name="l00146"></a>00146 <span class="preprocessor">#define FBUF                             ((struct uip_tcpip_hdr *)&amp;uip_reassbuf[0])</span>
<a name="l00147"></a>00147 <span class="preprocessor"></span><span class="preprocessor">#define UIP_IP_BUF                          ((struct uip_ip_hdr *)&amp;uip_buf[UIP_LLH_LEN])</span>
<a name="l00148"></a>00148 <span class="preprocessor"></span><span class="preprocessor">#define UIP_ICMP_BUF                      ((struct uip_icmp_hdr *)&amp;uip_buf[uip_l2_l3_hdr_len])</span>
<a name="l00149"></a>00149 <span class="preprocessor"></span><span class="preprocessor">#define UIP_UDP_BUF                        ((struct uip_udp_hdr *)&amp;uip_buf[UIP_LLH_LEN + UIP_IPH_LEN])</span>
<a name="l00150"></a>00150 <span class="preprocessor"></span><span class="preprocessor">#define UIP_TCP_BUF                        ((struct uip_tcp_hdr *)&amp;uip_buf[UIP_LLH_LEN + UIP_IPH_LEN])</span>
<a name="l00151"></a>00151 <span class="preprocessor"></span><span class="preprocessor">#define UIP_EXT_BUF                        ((struct uip_ext_hdr *)&amp;uip_buf[uip_l2_l3_hdr_len])</span>
<a name="l00152"></a>00152 <span class="preprocessor"></span><span class="preprocessor">#define UIP_ROUTING_BUF                ((struct uip_routing_hdr *)&amp;uip_buf[uip_l2_l3_hdr_len])</span>
<a name="l00153"></a>00153 <span class="preprocessor"></span><span class="preprocessor">#define UIP_FRAG_BUF                      ((struct uip_frag_hdr *)&amp;uip_buf[uip_l2_l3_hdr_len])</span>
<a name="l00154"></a>00154 <span class="preprocessor"></span><span class="preprocessor">#define UIP_HBHO_BUF                      ((struct uip_hbho_hdr *)&amp;uip_buf[uip_l2_l3_hdr_len])</span>
<a name="l00155"></a>00155 <span class="preprocessor"></span><span class="preprocessor">#define UIP_DESTO_BUF                    ((struct uip_desto_hdr *)&amp;uip_buf[uip_l2_l3_hdr_len])</span>
<a name="l00156"></a>00156 <span class="preprocessor"></span><span class="preprocessor">#define UIP_EXT_HDR_OPT_BUF            ((struct uip_ext_hdr_opt *)&amp;uip_buf[uip_l2_l3_hdr_len + uip_ext_opt_offset])</span>
<a name="l00157"></a>00157 <span class="preprocessor"></span><span class="preprocessor">#define UIP_EXT_HDR_OPT_PADN_BUF  ((struct uip_ext_hdr_opt_padn *)&amp;uip_buf[uip_l2_l3_hdr_len + uip_ext_opt_offset])</span>
<a name="l00158"></a>00158 <span class="preprocessor"></span><span class="preprocessor">#if UIP_CONF_IPV6_RPL</span>
<a name="l00159"></a>00159 <span class="preprocessor"></span><span class="preprocessor">#define UIP_EXT_HDR_OPT_RPL_BUF    ((struct uip_ext_hdr_opt_rpl *)&amp;uip_buf[uip_l2_l3_hdr_len + uip_ext_opt_offset])</span>
<a name="l00160"></a>00160 <span class="preprocessor"></span><span class="preprocessor">#endif </span><span class="comment">/* UIP_CONF_IPV6_RPL */</span>
<a name="l00161"></a>00161 <span class="preprocessor">#define UIP_ICMP6_ERROR_BUF            ((struct uip_icmp6_error *)&amp;uip_buf[uip_l2_l3_icmp_hdr_len])</span>
<a name="l00162"></a>00162 <span class="preprocessor"></span><span class="comment">/** @} */</span><span class="comment"></span>
<a name="l00163"></a>00163 <span class="comment">/** \name Buffer variables</span>
<a name="l00164"></a>00164 <span class="comment"> *  @{</span>
<a name="l00165"></a>00165 <span class="comment"> */</span><span class="comment"></span>
<a name="l00166"></a>00166 <span class="comment">/** Packet buffer for incoming and outgoing packets */</span>
<a name="l00167"></a>00167 <span class="preprocessor">#ifndef UIP_CONF_EXTERNAL_BUFFER</span>
<a name="l00168"></a><a class="code" href="a01929.html#gae7f37f0b1fb5172aad84a32067c4ccc7">00168</a> <span class="preprocessor"></span><a class="code" href="a00097.html" title="The uIP packet buffer.">uip_buf_t</a> uip_aligned_buf;
<a name="l00169"></a>00169 <span class="preprocessor">#endif </span><span class="comment">/* UIP_CONF_EXTERNAL_BUFFER */</span>
<a name="l00170"></a>00170 
<a name="l00171"></a>00171 <span class="comment">/* The uip_appdata pointer points to application data. */</span>
<a name="l00172"></a><a class="code" href="a01929.html#ga561b8eda32e059d4e7397f776268cc63">00172</a> <span class="keywordtype">void</span> *<a class="code" href="a01926.html#ga561b8eda32e059d4e7397f776268cc63" title="Pointer to the application data in the packet buffer.">uip_appdata</a>;
<a name="l00173"></a>00173 <span class="comment">/* The uip_appdata pointer points to the application data which is to be sent*/</span>
<a name="l00174"></a>00174 <span class="keywordtype">void</span> *uip_sappdata;
<a name="l00175"></a>00175 
<a name="l00176"></a>00176 <span class="preprocessor">#if UIP_URGDATA &gt; 0</span>
<a name="l00177"></a>00177 <span class="preprocessor"></span><span class="comment">/* The uip_urgdata pointer points to urgent data (out-of-band data), if present */</span>
<a name="l00178"></a>00178 <span class="keywordtype">void</span> *uip_urgdata;
<a name="l00179"></a>00179 uint16_t uip_urglen, uip_surglen;
<a name="l00180"></a>00180 <span class="preprocessor">#endif </span><span class="comment">/* UIP_URGDATA &gt; 0 */</span>
<a name="l00181"></a>00181 
<a name="l00182"></a>00182 <span class="comment">/* The uip_len is either 8 or 16 bits, depending on the maximum packet size.*/</span>
<a name="l00183"></a><a class="code" href="a01929.html#ga72af00d45662ba0dc2ba3781a556e25b">00183</a> uint16_t <a class="code" href="a01926.html#ga72af00d45662ba0dc2ba3781a556e25b" title="The length of the packet in the uip_buf buffer.">uip_len</a>, uip_slen;<span class="comment"></span>
<a name="l00184"></a>00184 <span class="comment">/** @} */</span>
<a name="l00185"></a>00185 
<a name="l00186"></a>00186 <span class="comment">/*---------------------------------------------------------------------------*/</span><span class="comment"></span>
<a name="l00187"></a>00187 <span class="comment">/** @{ \name General variables                                               */</span>
<a name="l00188"></a>00188 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00189"></a>00189 
<a name="l00190"></a>00190 <span class="comment">/* The uip_flags variable is used for communication between the TCP/IP stack</span>
<a name="l00191"></a>00191 <span class="comment">and the application program. */</span>
<a name="l00192"></a>00192 uint8_t uip_flags;
<a name="l00193"></a>00193 
<a name="l00194"></a>00194 <span class="comment">/* uip_conn always points to the current connection (set to NULL for UDP). */</span>
<a name="l00195"></a><a class="code" href="a01929.html#ga788ffac72342f6172343d7f8099cbe1a">00195</a> <span class="keyword">struct </span><a class="code" href="a00098.html" title="Representation of a uIP TCP connection.">uip_conn</a> *<a class="code" href="a01926.html#ga788ffac72342f6172343d7f8099cbe1a" title="Pointer to the current TCP connection.">uip_conn</a>;
<a name="l00196"></a>00196 
<a name="l00197"></a>00197 <span class="comment">/* Temporary variables. */</span>
<a name="l00198"></a>00198 <span class="preprocessor">#if (UIP_TCP || UIP_UDP)</span>
<a name="l00199"></a>00199 <span class="preprocessor"></span><span class="keyword">static</span> uint8_t c;
<a name="l00200"></a>00200 <span class="preprocessor">#endif</span>
<a name="l00201"></a>00201 <span class="preprocessor"></span>
<a name="l00202"></a>00202 <span class="preprocessor">#if UIP_ACTIVE_OPEN || UIP_UDP</span>
<a name="l00203"></a>00203 <span class="preprocessor"></span><span class="comment">/* Keeps track of the last port used for a new connection. */</span>
<a name="l00204"></a>00204 <span class="keyword">static</span> uint16_t lastport;
<a name="l00205"></a>00205 <span class="preprocessor">#endif </span><span class="comment">/* UIP_ACTIVE_OPEN || UIP_UDP */</span>
<a name="l00206"></a>00206 <span class="comment">/** @} */</span>
<a name="l00207"></a>00207 
<a name="l00208"></a>00208 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00209"></a>00209 <span class="comment">/* TCP                                                                       */</span>
<a name="l00210"></a>00210 <span class="comment">/*---------------------------------------------------------------------------*/</span><span class="comment"></span>
<a name="l00211"></a>00211 <span class="comment">/** \name TCP defines</span>
<a name="l00212"></a>00212 <span class="comment"> *@{</span>
<a name="l00213"></a>00213 <span class="comment"> */</span>
<a name="l00214"></a>00214 <span class="comment">/* Structures and definitions. */</span>
<a name="l00215"></a>00215 <span class="preprocessor">#define TCP_FIN 0x01</span>
<a name="l00216"></a>00216 <span class="preprocessor"></span><span class="preprocessor">#define TCP_SYN 0x02</span>
<a name="l00217"></a>00217 <span class="preprocessor"></span><span class="preprocessor">#define TCP_RST 0x04</span>
<a name="l00218"></a>00218 <span class="preprocessor"></span><span class="preprocessor">#define TCP_PSH 0x08</span>
<a name="l00219"></a>00219 <span class="preprocessor"></span><span class="preprocessor">#define TCP_ACK 0x10</span>
<a name="l00220"></a>00220 <span class="preprocessor"></span><span class="preprocessor">#define TCP_URG 0x20</span>
<a name="l00221"></a>00221 <span class="preprocessor"></span><span class="preprocessor">#define TCP_CTL 0x3f</span>
<a name="l00222"></a>00222 <span class="preprocessor"></span>
<a name="l00223"></a>00223 <span class="preprocessor">#define TCP_OPT_END     0   </span><span class="comment">/* End of TCP options list */</span>
<a name="l00224"></a>00224 <span class="preprocessor">#define TCP_OPT_NOOP    1   </span><span class="comment">/* &quot;No-operation&quot; TCP option */</span>
<a name="l00225"></a>00225 <span class="preprocessor">#define TCP_OPT_MSS     2   </span><span class="comment">/* Maximum segment size TCP option */</span>
<a name="l00226"></a>00226 
<a name="l00227"></a>00227 <span class="preprocessor">#define TCP_OPT_MSS_LEN 4   </span><span class="comment">/* Length of TCP MSS option. */</span>
<a name="l00228"></a>00228 <span class="comment">/** @} */</span><span class="comment"></span>
<a name="l00229"></a>00229 <span class="comment">/** \name TCP variables</span>
<a name="l00230"></a>00230 <span class="comment"> *@{</span>
<a name="l00231"></a>00231 <span class="comment"> */</span>
<a name="l00232"></a>00232 <span class="preprocessor">#if UIP_TCP</span>
<a name="l00233"></a>00233 <span class="preprocessor"></span><span class="comment">/* The uip_conns array holds all TCP connections. */</span>
<a name="l00234"></a>00234 <span class="keyword">struct </span>uip_conn uip_conns[<a class="code" href="a01824.html#gaf5fe83be78b78b9e7d9e7f1e34ab1cc5" title="The maximum number of simultaneously open TCP connections.">UIP_CONNS</a>];
<a name="l00235"></a>00235 
<a name="l00236"></a>00236 <span class="comment">/* The uip_listenports list all currently listning ports. */</span>
<a name="l00237"></a>00237 uint16_t uip_listenports[<a class="code" href="a01824.html#ga8f4ebd8ef6c0ea665ed351d87fec09fd" title="The maximum number of simultaneously listening TCP ports.">UIP_LISTENPORTS</a>];
<a name="l00238"></a>00238 
<a name="l00239"></a>00239 <span class="comment">/* The iss variable is used for the TCP initial sequence number. */</span>
<a name="l00240"></a>00240 <span class="keyword">static</span> uint8_t iss[4];
<a name="l00241"></a>00241 
<a name="l00242"></a>00242 <span class="comment">/* Temporary variables. */</span>
<a name="l00243"></a>00243 uint8_t <a class="code" href="a01926.html#gaf284d80df1a8b8c17c493739cb527e5c" title="4-byte array used for the 32-bit sequence number calculations.">uip_acc32</a>[4];
<a name="l00244"></a>00244 <span class="keyword">static</span> uint8_t opt;
<a name="l00245"></a>00245 <span class="keyword">static</span> uint16_t tmp16;
<a name="l00246"></a>00246 <span class="preprocessor">#endif </span><span class="comment">/* UIP_TCP */</span>
<a name="l00247"></a>00247 <span class="comment">/** @} */</span>
<a name="l00248"></a>00248 
<a name="l00249"></a>00249 <span class="comment">/*---------------------------------------------------------------------------*/</span><span class="comment"></span>
<a name="l00250"></a>00250 <span class="comment">/** @{ \name UDP variables                                                   */</span>
<a name="l00251"></a>00251 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00252"></a>00252 <span class="preprocessor">#if UIP_UDP</span>
<a name="l00253"></a><a class="code" href="a01929.html#ga210f227119fc972e6222c9cb452e15a9">00253</a> <span class="preprocessor"></span><span class="keyword">struct </span><a class="code" href="a00122.html" title="Representation of a uIP UDP connection.">uip_udp_conn</a> *<a class="code" href="a01926.html#ga210f227119fc972e6222c9cb452e15a9" title="The current UDP connection.">uip_udp_conn</a>;
<a name="l00254"></a>00254 <span class="keyword">struct </span>uip_udp_conn uip_udp_conns[<a class="code" href="a01823.html#ga196379ceb1219a99f4495e41ccc9bbfb" title="The maximum amount of concurrent UDP connections.">UIP_UDP_CONNS</a>];
<a name="l00255"></a>00255 <span class="preprocessor">#endif </span><span class="comment">/* UIP_UDP */</span>
<a name="l00256"></a>00256 <span class="comment">/** @} */</span>
<a name="l00257"></a>00257 
<a name="l00258"></a>00258 <span class="comment">/*---------------------------------------------------------------------------*/</span><span class="comment"></span>
<a name="l00259"></a>00259 <span class="comment">/** @{ \name ICMPv6 variables                                                */</span>
<a name="l00260"></a>00260 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00261"></a>00261 <span class="preprocessor">#if UIP_CONF_ICMP6</span>
<a name="l00262"></a>00262 <span class="preprocessor"></span><span class="comment">/** single possible icmpv6 &quot;connection&quot; */</span>
<a name="l00263"></a>00263 <span class="keyword">struct </span>uip_icmp6_conn uip_icmp6_conns;
<a name="l00264"></a>00264 <span class="preprocessor">#endif </span><span class="comment">/*UIP_CONF_ICMP6*/</span>
<a name="l00265"></a>00265 
<a name="l00266"></a>00266 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00267"></a>00267 <span class="comment">/* Functions                                                                 */</span>
<a name="l00268"></a>00268 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00269"></a>00269 <span class="preprocessor">#if (!UIP_ARCH_ADD32 &amp;&amp; UIP_TCP)</span>
<a name="l00270"></a>00270 <span class="preprocessor"></span><span class="keywordtype">void</span>
<a name="l00271"></a>00271 <a class="code" href="a01926.html#ga5a380cbebc834ec7aea86f6cfff7f19e" title="Carry out a 32-bit addition.">uip_add32</a>(uint8_t *op32, uint16_t op16)
<a name="l00272"></a>00272 {
<a name="l00273"></a>00273   <a class="code" href="a01926.html#gaf284d80df1a8b8c17c493739cb527e5c" title="4-byte array used for the 32-bit sequence number calculations.">uip_acc32</a>[3] = op32[3] + (op16 &amp; 0xff);
<a name="l00274"></a>00274   <a class="code" href="a01926.html#gaf284d80df1a8b8c17c493739cb527e5c" title="4-byte array used for the 32-bit sequence number calculations.">uip_acc32</a>[2] = op32[2] + (op16 &gt;&gt; 8);
<a name="l00275"></a>00275   uip_acc32[1] = op32[1];
<a name="l00276"></a>00276   uip_acc32[0] = op32[0];
<a name="l00277"></a>00277   
<a name="l00278"></a>00278   <span class="keywordflow">if</span>(uip_acc32[2] &lt; (op16 &gt;&gt; 8)) {
<a name="l00279"></a>00279     ++uip_acc32[1];
<a name="l00280"></a>00280     <span class="keywordflow">if</span>(uip_acc32[1] == 0) {
<a name="l00281"></a>00281       ++uip_acc32[0];
<a name="l00282"></a>00282     }
<a name="l00283"></a>00283   }
<a name="l00284"></a>00284   
<a name="l00285"></a>00285   
<a name="l00286"></a>00286   <span class="keywordflow">if</span>(uip_acc32[3] &lt; (op16 &amp; 0xff)) {
<a name="l00287"></a>00287     ++uip_acc32[2];
<a name="l00288"></a>00288     <span class="keywordflow">if</span>(uip_acc32[2] == 0) {
<a name="l00289"></a>00289       ++uip_acc32[1];
<a name="l00290"></a>00290       <span class="keywordflow">if</span>(uip_acc32[1] == 0) {
<a name="l00291"></a>00291         ++uip_acc32[0];
<a name="l00292"></a>00292       }
<a name="l00293"></a>00293     }
<a name="l00294"></a>00294   }
<a name="l00295"></a>00295 }
<a name="l00296"></a>00296 
<a name="l00297"></a>00297 <span class="preprocessor">#endif </span><span class="comment">/* UIP_ARCH_ADD32 &amp;&amp; UIP_TCP */</span>
<a name="l00298"></a>00298 
<a name="l00299"></a>00299 <span class="preprocessor">#if ! UIP_ARCH_CHKSUM</span>
<a name="l00300"></a>00300 <span class="preprocessor"></span><span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00301"></a>00301 <span class="keyword">static</span> uint16_t
<a name="l00302"></a>00302 chksum(uint16_t sum, <span class="keyword">const</span> uint8_t *data, uint16_t len)
<a name="l00303"></a>00303 {
<a name="l00304"></a>00304   uint16_t t;
<a name="l00305"></a>00305   <span class="keyword">const</span> uint8_t *dataptr;
<a name="l00306"></a>00306   <span class="keyword">const</span> uint8_t *last_byte;
<a name="l00307"></a>00307 
<a name="l00308"></a>00308   dataptr = data;
<a name="l00309"></a>00309   last_byte = data + len - 1;
<a name="l00310"></a>00310   
<a name="l00311"></a>00311   <span class="keywordflow">while</span>(dataptr &lt; last_byte) {   <span class="comment">/* At least two more bytes */</span>
<a name="l00312"></a>00312     t = (dataptr[0] &lt;&lt; 8) + dataptr[1];
<a name="l00313"></a>00313     sum += t;
<a name="l00314"></a>00314     <span class="keywordflow">if</span>(sum &lt; t) {
<a name="l00315"></a>00315       sum++;      <span class="comment">/* carry */</span>
<a name="l00316"></a>00316     }
<a name="l00317"></a>00317     dataptr += 2;
<a name="l00318"></a>00318   }
<a name="l00319"></a>00319   
<a name="l00320"></a>00320   <span class="keywordflow">if</span>(dataptr == last_byte) {
<a name="l00321"></a>00321     t = (dataptr[0] &lt;&lt; 8) + 0;
<a name="l00322"></a>00322     sum += t;
<a name="l00323"></a>00323     <span class="keywordflow">if</span>(sum &lt; t) {
<a name="l00324"></a>00324       sum++;      <span class="comment">/* carry */</span>
<a name="l00325"></a>00325     }
<a name="l00326"></a>00326   }
<a name="l00327"></a>00327 
<a name="l00328"></a>00328   <span class="comment">/* Return sum in host byte order. */</span>
<a name="l00329"></a>00329   <span class="keywordflow">return</span> sum;
<a name="l00330"></a>00330 }
<a name="l00331"></a>00331 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00332"></a>00332 uint16_t
<a name="l00333"></a><a class="code" href="a01929.html#gad9827a2bf893ba21b373eb2ea36ad688">00333</a> <a class="code" href="a01926.html#ga9287706e35d5fb2080d1f6f14551f76f" title="Calculate the Internet checksum over a buffer.">uip_chksum</a>(uint16_t *data, uint16_t len)
<a name="l00334"></a>00334 {
<a name="l00335"></a>00335   <span class="keywordflow">return</span> <a class="code" href="a01926.html#gada74c8133e50b38dca66dbe779395c80" title="Convert 16-bit quantity from host byte order to network byte order.">uip_htons</a>(chksum(0, (uint8_t *)data, len));
<a name="l00336"></a>00336 }
<a name="l00337"></a>00337 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00338"></a>00338 <span class="preprocessor">#ifndef UIP_ARCH_IPCHKSUM</span>
<a name="l00339"></a>00339 <span class="preprocessor"></span>uint16_t
<a name="l00340"></a><a class="code" href="a01929.html#ga707e869bd80c32239d214a8ebe560c04">00340</a> <a class="code" href="a01926.html#ga707e869bd80c32239d214a8ebe560c04" title="Calculate the IP header checksum of the packet header in uip_buf.">uip_ipchksum</a>(<span class="keywordtype">void</span>)
<a name="l00341"></a>00341 {
<a name="l00342"></a>00342   uint16_t sum;
<a name="l00343"></a>00343 
<a name="l00344"></a>00344   sum = chksum(0, &amp;uip_buf[<a class="code" href="a01828.html#gae6f4a2453dbd8bc60e6a82774552366a" title="The link level header length.">UIP_LLH_LEN</a>], UIP_IPH_LEN);
<a name="l00345"></a>00345   PRINTF(<span class="stringliteral">&quot;uip_ipchksum: sum 0x%04x\n&quot;</span>, sum);
<a name="l00346"></a>00346   <span class="keywordflow">return</span> (sum == 0) ? 0xffff : <a class="code" href="a01926.html#gada74c8133e50b38dca66dbe779395c80" title="Convert 16-bit quantity from host byte order to network byte order.">uip_htons</a>(sum);
<a name="l00347"></a>00347 }
<a name="l00348"></a>00348 <span class="preprocessor">#endif</span>
<a name="l00349"></a>00349 <span class="preprocessor"></span><span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00350"></a>00350 <span class="keyword">static</span> uint16_t
<a name="l00351"></a>00351 upper_layer_chksum(uint8_t proto)
<a name="l00352"></a>00352 {
<a name="l00353"></a>00353 <span class="comment">/* gcc 4.4.0 - 4.6.1 (maybe 4.3...) with -Os on 8 bit CPUS incorrectly compiles:</span>
<a name="l00354"></a>00354 <span class="comment"> * int bar (int);</span>
<a name="l00355"></a>00355 <span class="comment"> * int foo (unsigned char a, unsigned char b) {</span>
<a name="l00356"></a>00356 <span class="comment"> *   int len = (a &lt;&lt; 8) + b; //len becomes 0xff00&amp;&lt;random&gt;+b</span>
<a name="l00357"></a>00357 <span class="comment"> *   return len + bar (len);</span>
<a name="l00358"></a>00358 <span class="comment"> * }</span>
<a name="l00359"></a>00359 <span class="comment"> * upper_layer_len triggers this bug unless it is declared volatile.</span>
<a name="l00360"></a>00360 <span class="comment"> * See https://sourceforge.net/apps/mantisbt/contiki/view.php?id=3</span>
<a name="l00361"></a>00361 <span class="comment"> */</span>
<a name="l00362"></a>00362   <span class="keyword">volatile</span> uint16_t upper_layer_len;
<a name="l00363"></a>00363   uint16_t sum;
<a name="l00364"></a>00364   
<a name="l00365"></a>00365   upper_layer_len = (((uint16_t)(<a class="code" href="a01929.html#gaf966537cf73ee5973da59bba6b21b731" title="Pointer to IP header.">UIP_IP_BUF</a>-&gt;len[0]) &lt;&lt; 8) + <a class="code" href="a01929.html#gaf966537cf73ee5973da59bba6b21b731" title="Pointer to IP header.">UIP_IP_BUF</a>-&gt;len[1] - <a class="code" href="a01816.html#ga0c63b80e0f8038403df5fee2bac3aab8" title="The length of the extension headers.">uip_ext_len</a>);
<a name="l00366"></a>00366   
<a name="l00367"></a>00367   PRINTF(<span class="stringliteral">&quot;Upper layer checksum len: %d from: %d\n&quot;</span>, upper_layer_len,
<a name="l00368"></a>00368          UIP_IPH_LEN + <a class="code" href="a01828.html#gae6f4a2453dbd8bc60e6a82774552366a" title="The link level header length.">UIP_LLH_LEN</a> + <a class="code" href="a01816.html#ga0c63b80e0f8038403df5fee2bac3aab8" title="The length of the extension headers.">uip_ext_len</a>);
<a name="l00369"></a>00369 
<a name="l00370"></a>00370   <span class="comment">/* First sum pseudoheader. */</span>
<a name="l00371"></a>00371   <span class="comment">/* IP protocol and length fields. This addition cannot carry. */</span>
<a name="l00372"></a>00372   sum = upper_layer_len + proto;
<a name="l00373"></a>00373   <span class="comment">/* Sum IP source and destination addresses. */</span>
<a name="l00374"></a>00374   sum = chksum(sum, (uint8_t *)&amp;<a class="code" href="a01929.html#gaf966537cf73ee5973da59bba6b21b731" title="Pointer to IP header.">UIP_IP_BUF</a>-&gt;srcipaddr, 2 * <span class="keyword">sizeof</span>(<a class="code" href="a00112.html" title="Representation of an IP address.">uip_ipaddr_t</a>));
<a name="l00375"></a>00375 
<a name="l00376"></a>00376   <span class="comment">/* Sum TCP header and data. */</span>
<a name="l00377"></a>00377   sum = chksum(sum, &amp;uip_buf[UIP_IPH_LEN + <a class="code" href="a01828.html#gae6f4a2453dbd8bc60e6a82774552366a" title="The link level header length.">UIP_LLH_LEN</a> + <a class="code" href="a01816.html#ga0c63b80e0f8038403df5fee2bac3aab8" title="The length of the extension headers.">uip_ext_len</a>],
<a name="l00378"></a>00378                upper_layer_len);
<a name="l00379"></a>00379     
<a name="l00380"></a>00380   <span class="keywordflow">return</span> (sum == 0) ? 0xffff : <a class="code" href="a01926.html#gada74c8133e50b38dca66dbe779395c80" title="Convert 16-bit quantity from host byte order to network byte order.">uip_htons</a>(sum);
<a name="l00381"></a>00381 }
<a name="l00382"></a>00382 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00383"></a>00383 uint16_t
<a name="l00384"></a><a class="code" href="a01929.html#ga3ec91f3c5d75781b5ad9915828aaeba9">00384</a> <a class="code" href="a01926.html#ga3ec91f3c5d75781b5ad9915828aaeba9" title="Calculate the ICMP checksum of the packet in uip_buf.">uip_icmp6chksum</a>(<span class="keywordtype">void</span>)
<a name="l00385"></a>00385 {
<a name="l00386"></a>00386   <span class="keywordflow">return</span> upper_layer_chksum(UIP_PROTO_ICMP6);
<a name="l00387"></a>00387   
<a name="l00388"></a>00388 }
<a name="l00389"></a>00389 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00390"></a>00390 <span class="preprocessor">#if UIP_TCP</span>
<a name="l00391"></a>00391 <span class="preprocessor"></span>uint16_t
<a name="l00392"></a>00392 <a class="code" href="a01926.html#ga969ff8bccf86e1c4becc3c3fd23f93b4" title="Calculate the TCP checksum of the packet in uip_buf and uip_appdata.">uip_tcpchksum</a>(<span class="keywordtype">void</span>)
<a name="l00393"></a>00393 {
<a name="l00394"></a>00394   <span class="keywordflow">return</span> upper_layer_chksum(UIP_PROTO_TCP);
<a name="l00395"></a>00395 }
<a name="l00396"></a>00396 <span class="preprocessor">#endif </span><span class="comment">/* UIP_TCP */</span>
<a name="l00397"></a>00397 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00398"></a>00398 <span class="preprocessor">#if UIP_UDP &amp;&amp; UIP_UDP_CHECKSUMS</span>
<a name="l00399"></a>00399 <span class="preprocessor"></span>uint16_t
<a name="l00400"></a>00400 <a class="code" href="a01926.html#gaeb447241dcd4e7840ea4b0603fc2c330" title="Calculate the UDP checksum of the packet in uip_buf and uip_appdata.">uip_udpchksum</a>(<span class="keywordtype">void</span>)
<a name="l00401"></a>00401 {
<a name="l00402"></a>00402   <span class="keywordflow">return</span> upper_layer_chksum(UIP_PROTO_UDP);
<a name="l00403"></a>00403 }
<a name="l00404"></a>00404 <span class="preprocessor">#endif </span><span class="comment">/* UIP_UDP &amp;&amp; UIP_UDP_CHECKSUMS */</span>
<a name="l00405"></a>00405 <span class="preprocessor">#endif </span><span class="comment">/* UIP_ARCH_CHKSUM */</span>
<a name="l00406"></a>00406 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00407"></a>00407 <span class="keywordtype">void</span>
<a name="l00408"></a><a class="code" href="a01929.html#gac48ed5f0d27721ef62a3ed02a5ad8d2e">00408</a> <a class="code" href="a01926.html#gac48ed5f0d27721ef62a3ed02a5ad8d2e" title="uIP initialization function.">uip_init</a>(<span class="keywordtype">void</span>)
<a name="l00409"></a>00409 {
<a name="l00410"></a>00410    
<a name="l00411"></a>00411   <a class="code" href="a01929.html#ga5527d94e75153109f16a3fb59491a7bb" title="Initialize data structures.">uip_ds6_init</a>();
<a name="l00412"></a>00412 
<a name="l00413"></a>00413 <span class="preprocessor">#if UIP_TCP</span>
<a name="l00414"></a>00414 <span class="preprocessor"></span>  <span class="keywordflow">for</span>(c = 0; c &lt; <a class="code" href="a01824.html#ga8f4ebd8ef6c0ea665ed351d87fec09fd" title="The maximum number of simultaneously listening TCP ports.">UIP_LISTENPORTS</a>; ++c) {
<a name="l00415"></a>00415     uip_listenports[c] = 0;
<a name="l00416"></a>00416   }
<a name="l00417"></a>00417   <span class="keywordflow">for</span>(c = 0; c &lt; <a class="code" href="a01824.html#gaf5fe83be78b78b9e7d9e7f1e34ab1cc5" title="The maximum number of simultaneously open TCP connections.">UIP_CONNS</a>; ++c) {
<a name="l00418"></a>00418     uip_conns[c].<a class="code" href="a00098.html#aec4787356d50d91abe5b27d472abe630" title="TCP state and flags.">tcpstateflags</a> = UIP_CLOSED;
<a name="l00419"></a>00419   }
<a name="l00420"></a>00420 <span class="preprocessor">#endif </span><span class="comment">/* UIP_TCP */</span>
<a name="l00421"></a>00421 
<a name="l00422"></a>00422 <span class="preprocessor">#if UIP_ACTIVE_OPEN || UIP_UDP</span>
<a name="l00423"></a>00423 <span class="preprocessor"></span>  lastport = 1024;
<a name="l00424"></a>00424 <span class="preprocessor">#endif </span><span class="comment">/* UIP_ACTIVE_OPEN || UIP_UDP */</span>
<a name="l00425"></a>00425 
<a name="l00426"></a>00426 <span class="preprocessor">#if UIP_UDP</span>
<a name="l00427"></a>00427 <span class="preprocessor"></span>  <span class="keywordflow">for</span>(c = 0; c &lt; <a class="code" href="a01823.html#ga196379ceb1219a99f4495e41ccc9bbfb" title="The maximum amount of concurrent UDP connections.">UIP_UDP_CONNS</a>; ++c) {
<a name="l00428"></a>00428     uip_udp_conns[c].<a class="code" href="a00122.html#accfeb05db2d9ef4702f6b20a12791dcf" title="The local port number in network byte order.">lport</a> = 0;
<a name="l00429"></a>00429   }
<a name="l00430"></a>00430 <span class="preprocessor">#endif </span><span class="comment">/* UIP_UDP */</span>
<a name="l00431"></a>00431 }
<a name="l00432"></a>00432 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00433"></a>00433 <span class="preprocessor">#if UIP_TCP &amp;&amp; UIP_ACTIVE_OPEN</span>
<a name="l00434"></a>00434 <span class="preprocessor"></span><span class="keyword">struct </span>uip_conn *
<a name="l00435"></a>00435 <a class="code" href="a01814.html#gadd213d8b34d70919ccac28303219cb82" title="Connect to a remote host using TCP.">uip_connect</a>(<a class="code" href="a00112.html" title="Representation of an IP address.">uip_ipaddr_t</a> *<a class="code" href="a00098.html#a79510aa86d3fa0a0fc6cfc49b1da7279" title="The IP address of the remote host.">ripaddr</a>, uint16_t <a class="code" href="a00098.html#a7477a30cdd9b399067bf11bf18e620ad" title="The local remote TCP port, in network byte order.">rport</a>)
<a name="l00436"></a>00436 {
<a name="l00437"></a>00437   <span class="keyword">register</span> <span class="keyword">struct </span>uip_conn *conn, *cconn;
<a name="l00438"></a>00438   
<a name="l00439"></a>00439   <span class="comment">/* Find an unused local port. */</span>
<a name="l00440"></a>00440  again:
<a name="l00441"></a>00441   ++lastport;
<a name="l00442"></a>00442 
<a name="l00443"></a>00443   <span class="keywordflow">if</span>(lastport &gt;= 32000) {
<a name="l00444"></a>00444     lastport = 4096;
<a name="l00445"></a>00445   }
<a name="l00446"></a>00446 
<a name="l00447"></a>00447   <span class="comment">/* Check if this port is already in use, and if so try to find</span>
<a name="l00448"></a>00448 <span class="comment">     another one. */</span>
<a name="l00449"></a>00449   <span class="keywordflow">for</span>(c = 0; c &lt; <a class="code" href="a01824.html#gaf5fe83be78b78b9e7d9e7f1e34ab1cc5" title="The maximum number of simultaneously open TCP connections.">UIP_CONNS</a>; ++c) {
<a name="l00450"></a>00450     conn = &amp;uip_conns[c];
<a name="l00451"></a>00451     <span class="keywordflow">if</span>(conn-&gt;<a class="code" href="a00098.html#aec4787356d50d91abe5b27d472abe630" title="TCP state and flags.">tcpstateflags</a> != UIP_CLOSED &amp;&amp;
<a name="l00452"></a>00452        conn-&gt;<a class="code" href="a00098.html#a5e927bbfba71e139b345839b7e423ea5" title="The local TCP port, in network byte order.">lport</a> == <a class="code" href="a01926.html#gada74c8133e50b38dca66dbe779395c80" title="Convert 16-bit quantity from host byte order to network byte order.">uip_htons</a>(lastport)) {
<a name="l00453"></a>00453       <span class="keywordflow">goto</span> again;
<a name="l00454"></a>00454     }
<a name="l00455"></a>00455   }
<a name="l00456"></a>00456 
<a name="l00457"></a>00457   conn = 0;
<a name="l00458"></a>00458   <span class="keywordflow">for</span>(c = 0; c &lt; <a class="code" href="a01824.html#gaf5fe83be78b78b9e7d9e7f1e34ab1cc5" title="The maximum number of simultaneously open TCP connections.">UIP_CONNS</a>; ++c) {
<a name="l00459"></a>00459     cconn = &amp;uip_conns[c];
<a name="l00460"></a>00460     <span class="keywordflow">if</span>(cconn-&gt;<a class="code" href="a00098.html#aec4787356d50d91abe5b27d472abe630" title="TCP state and flags.">tcpstateflags</a> == UIP_CLOSED) {
<a name="l00461"></a>00461       conn = cconn;
<a name="l00462"></a>00462       <span class="keywordflow">break</span>;
<a name="l00463"></a>00463     }
<a name="l00464"></a>00464     <span class="keywordflow">if</span>(cconn-&gt;<a class="code" href="a00098.html#aec4787356d50d91abe5b27d472abe630" title="TCP state and flags.">tcpstateflags</a> == UIP_TIME_WAIT) {
<a name="l00465"></a>00465       <span class="keywordflow">if</span>(conn == 0 ||
<a name="l00466"></a>00466          cconn-&gt;<a class="code" href="a00098.html#a2d0c3e645bbae89194856aa5a8f49e4d" title="The retransmission timer.">timer</a> &gt; conn-&gt;<a class="code" href="a00098.html#a2d0c3e645bbae89194856aa5a8f49e4d" title="The retransmission timer.">timer</a>) {
<a name="l00467"></a>00467         conn = cconn;
<a name="l00468"></a>00468       }
<a name="l00469"></a>00469     }
<a name="l00470"></a>00470   }
<a name="l00471"></a>00471 
<a name="l00472"></a>00472   <span class="keywordflow">if</span>(conn == 0) {
<a name="l00473"></a>00473     <span class="keywordflow">return</span> 0;
<a name="l00474"></a>00474   }
<a name="l00475"></a>00475   
<a name="l00476"></a>00476   conn-&gt;<a class="code" href="a00098.html#aec4787356d50d91abe5b27d472abe630" title="TCP state and flags.">tcpstateflags</a> = UIP_SYN_SENT;
<a name="l00477"></a>00477 
<a name="l00478"></a>00478   conn-&gt;<a class="code" href="a00098.html#a9b6575dd439ad42a38466dcba22fcf58" title="The sequence number that was last sent by us.">snd_nxt</a>[0] = iss[0];
<a name="l00479"></a>00479   conn-&gt;<a class="code" href="a00098.html#a9b6575dd439ad42a38466dcba22fcf58" title="The sequence number that was last sent by us.">snd_nxt</a>[1] = iss[1];
<a name="l00480"></a>00480   conn-&gt;<a class="code" href="a00098.html#a9b6575dd439ad42a38466dcba22fcf58" title="The sequence number that was last sent by us.">snd_nxt</a>[2] = iss[2];
<a name="l00481"></a>00481   conn-&gt;<a class="code" href="a00098.html#a9b6575dd439ad42a38466dcba22fcf58" title="The sequence number that was last sent by us.">snd_nxt</a>[3] = iss[3];
<a name="l00482"></a>00482 
<a name="l00483"></a>00483   conn-&gt;<a class="code" href="a00098.html#a1c0f37a806ed9ae4ed11742696cba2c6" title="The sequence number that we expect to receive next.">rcv_nxt</a>[0] = 0;
<a name="l00484"></a>00484   conn-&gt;<a class="code" href="a00098.html#a1c0f37a806ed9ae4ed11742696cba2c6" title="The sequence number that we expect to receive next.">rcv_nxt</a>[1] = 0;
<a name="l00485"></a>00485   conn-&gt;<a class="code" href="a00098.html#a1c0f37a806ed9ae4ed11742696cba2c6" title="The sequence number that we expect to receive next.">rcv_nxt</a>[2] = 0;
<a name="l00486"></a>00486   conn-&gt;<a class="code" href="a00098.html#a1c0f37a806ed9ae4ed11742696cba2c6" title="The sequence number that we expect to receive next.">rcv_nxt</a>[3] = 0;
<a name="l00487"></a>00487 
<a name="l00488"></a>00488   conn-&gt;<a class="code" href="a00098.html#a9b2e09e250f0a9dadfe42ef3f1a469e1" title="Initial maximum segment size for the connection.">initialmss</a> = conn-&gt;<a class="code" href="a00098.html#a3f9fbf46c7c80197b1436fcff19151e4" title="Current maximum segment size for the connection.">mss</a> = <a class="code" href="a01824.html#ga4910467b83a639f06739c82cd362037e" title="The TCP maximum segment size.">UIP_TCP_MSS</a>;
<a name="l00489"></a>00489   
<a name="l00490"></a>00490   conn-&gt;<a class="code" href="a00098.html#a5c55920c6901817dce661762e785614e" title="Length of the data that was previously sent.">len</a> = 1;   <span class="comment">/* TCP length of the SYN is one. */</span>
<a name="l00491"></a>00491   conn-&gt;<a class="code" href="a00098.html#a974df0fa0057819fd67109d9f8f1beeb" title="The number of retransmissions for the last segment sent.">nrtx</a> = 0;
<a name="l00492"></a>00492   conn-&gt;<a class="code" href="a00098.html#a2d0c3e645bbae89194856aa5a8f49e4d" title="The retransmission timer.">timer</a> = 1; <span class="comment">/* Send the SYN next time around. */</span>
<a name="l00493"></a>00493   conn-&gt;<a class="code" href="a00098.html#aec8e06ea812558e5723d498f99faec63" title="Retransmission time-out.">rto</a> = <a class="code" href="a01824.html#ga15de27b044603284f68db05a378235a7" title="The initial retransmission timeout counted in timer pulses.">UIP_RTO</a>;
<a name="l00494"></a>00494   conn-&gt;<a class="code" href="a00098.html#a4f60a7dd9de9f9db9c63df199fc59088" title="Retransmission time-out calculation state variable.">sa</a> = 0;
<a name="l00495"></a>00495   conn-&gt;<a class="code" href="a00098.html#a82c6070fc4281ac4f8d427fd1a1a3655" title="Retransmission time-out calculation state variable.">sv</a> = 16;   <span class="comment">/* Initial value of the RTT variance. */</span>
<a name="l00496"></a>00496   conn-&gt;<a class="code" href="a00098.html#a5e927bbfba71e139b345839b7e423ea5" title="The local TCP port, in network byte order.">lport</a> = <a class="code" href="a01926.html#gada74c8133e50b38dca66dbe779395c80" title="Convert 16-bit quantity from host byte order to network byte order.">uip_htons</a>(lastport);
<a name="l00497"></a>00497   conn-&gt;<a class="code" href="a00098.html#a7477a30cdd9b399067bf11bf18e620ad" title="The local remote TCP port, in network byte order.">rport</a> = <a class="code" href="a00098.html#a7477a30cdd9b399067bf11bf18e620ad" title="The local remote TCP port, in network byte order.">rport</a>;
<a name="l00498"></a>00498   uip_ipaddr_copy(&amp;conn-&gt;<a class="code" href="a00098.html#a79510aa86d3fa0a0fc6cfc49b1da7279" title="The IP address of the remote host.">ripaddr</a>, ripaddr);
<a name="l00499"></a>00499   
<a name="l00500"></a>00500   <span class="keywordflow">return</span> conn;
<a name="l00501"></a>00501 }
<a name="l00502"></a>00502 <span class="preprocessor">#endif </span><span class="comment">/* UIP_TCP &amp;&amp; UIP_ACTIVE_OPEN */</span>
<a name="l00503"></a>00503 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00504"></a>00504 <span class="keywordtype">void</span>
<a name="l00505"></a>00505 remove_ext_hdr(<span class="keywordtype">void</span>)
<a name="l00506"></a>00506 {
<a name="l00507"></a>00507   <span class="comment">/* Remove ext header before TCP/UDP processing. */</span>
<a name="l00508"></a>00508   <span class="keywordflow">if</span>(<a class="code" href="a01816.html#ga0c63b80e0f8038403df5fee2bac3aab8" title="The length of the extension headers.">uip_ext_len</a> &gt; 0) {
<a name="l00509"></a>00509     PRINTF(<span class="stringliteral">&quot;Cutting ext-header before processing (extlen: %d, uiplen: %d)\n&quot;</span>,
<a name="l00510"></a>00510            <a class="code" href="a01816.html#ga0c63b80e0f8038403df5fee2bac3aab8" title="The length of the extension headers.">uip_ext_len</a>, <a class="code" href="a01926.html#ga72af00d45662ba0dc2ba3781a556e25b" title="The length of the packet in the uip_buf buffer.">uip_len</a>);
<a name="l00511"></a>00511     <span class="keywordflow">if</span>(<a class="code" href="a01926.html#ga72af00d45662ba0dc2ba3781a556e25b" title="The length of the packet in the uip_buf buffer.">uip_len</a> - UIP_IPH_LEN - <a class="code" href="a01816.html#ga0c63b80e0f8038403df5fee2bac3aab8" title="The length of the extension headers.">uip_ext_len</a> &lt; 0) {
<a name="l00512"></a>00512       PRINTF(<span class="stringliteral">&quot;ERROR: uip_len too short compared to ext len\n&quot;</span>);
<a name="l00513"></a>00513       <a class="code" href="a01816.html#ga0c63b80e0f8038403df5fee2bac3aab8" title="The length of the extension headers.">uip_ext_len</a> = 0;
<a name="l00514"></a>00514       <a class="code" href="a01926.html#ga72af00d45662ba0dc2ba3781a556e25b" title="The length of the packet in the uip_buf buffer.">uip_len</a> = 0;
<a name="l00515"></a>00515       <span class="keywordflow">return</span>;
<a name="l00516"></a>00516     }
<a name="l00517"></a>00517     memmove(((uint8_t *)UIP_TCP_BUF), (uint8_t *)UIP_TCP_BUF + <a class="code" href="a01816.html#ga0c63b80e0f8038403df5fee2bac3aab8" title="The length of the extension headers.">uip_ext_len</a>,
<a name="l00518"></a>00518             <a class="code" href="a01926.html#ga72af00d45662ba0dc2ba3781a556e25b" title="The length of the packet in the uip_buf buffer.">uip_len</a> - UIP_IPH_LEN - <a class="code" href="a01816.html#ga0c63b80e0f8038403df5fee2bac3aab8" title="The length of the extension headers.">uip_ext_len</a>);
<a name="l00519"></a>00519 
<a name="l00520"></a>00520     <a class="code" href="a01926.html#ga72af00d45662ba0dc2ba3781a556e25b" title="The length of the packet in the uip_buf buffer.">uip_len</a> -= <a class="code" href="a01816.html#ga0c63b80e0f8038403df5fee2bac3aab8" title="The length of the extension headers.">uip_ext_len</a>;
<a name="l00521"></a>00521 
<a name="l00522"></a>00522     <span class="comment">/* Update the IP length. */</span>
<a name="l00523"></a>00523     <a class="code" href="a01929.html#gaf966537cf73ee5973da59bba6b21b731" title="Pointer to IP header.">UIP_IP_BUF</a>-&gt;len[0] = (<a class="code" href="a01926.html#ga72af00d45662ba0dc2ba3781a556e25b" title="The length of the packet in the uip_buf buffer.">uip_len</a> - UIP_IPH_LEN) &gt;&gt; 8;
<a name="l00524"></a>00524     <a class="code" href="a01929.html#gaf966537cf73ee5973da59bba6b21b731" title="Pointer to IP header.">UIP_IP_BUF</a>-&gt;len[1] = (<a class="code" href="a01926.html#ga72af00d45662ba0dc2ba3781a556e25b" title="The length of the packet in the uip_buf buffer.">uip_len</a> - UIP_IPH_LEN) &amp; 0xff;
<a name="l00525"></a>00525     <a class="code" href="a01816.html#ga0c63b80e0f8038403df5fee2bac3aab8" title="The length of the extension headers.">uip_ext_len</a> = 0;
<a name="l00526"></a>00526   }
<a name="l00527"></a>00527 }
<a name="l00528"></a>00528 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00529"></a>00529 <span class="preprocessor">#if UIP_UDP</span>
<a name="l00530"></a>00530 <span class="preprocessor"></span><span class="keyword">struct </span>uip_udp_conn *
<a name="l00531"></a><a class="code" href="a01929.html#gae0ce3d16ecb813a6889616705f8d79c1">00531</a> <a class="code" href="a01926.html#gae0ce3d16ecb813a6889616705f8d79c1" title="Set up a new UDP connection.">uip_udp_new</a>(<span class="keyword">const</span> <a class="code" href="a00112.html" title="Representation of an IP address.">uip_ipaddr_t</a> *ripaddr, uint16_t rport)
<a name="l00532"></a>00532 {
<a name="l00533"></a>00533   <span class="keyword">register</span> <span class="keyword">struct </span>uip_udp_conn *conn;
<a name="l00534"></a>00534   
<a name="l00535"></a>00535   <span class="comment">/* Find an unused local port. */</span>
<a name="l00536"></a>00536  again:
<a name="l00537"></a>00537   ++lastport;
<a name="l00538"></a>00538 
<a name="l00539"></a>00539   <span class="keywordflow">if</span>(lastport &gt;= 32000) {
<a name="l00540"></a>00540     lastport = 4096;
<a name="l00541"></a>00541   }
<a name="l00542"></a>00542   
<a name="l00543"></a>00543   <span class="keywordflow">for</span>(c = 0; c &lt; <a class="code" href="a01823.html#ga196379ceb1219a99f4495e41ccc9bbfb" title="The maximum amount of concurrent UDP connections.">UIP_UDP_CONNS</a>; ++c) {
<a name="l00544"></a>00544     <span class="keywordflow">if</span>(uip_udp_conns[c].<a class="code" href="a00122.html#accfeb05db2d9ef4702f6b20a12791dcf" title="The local port number in network byte order.">lport</a> == <a class="code" href="a01926.html#gada74c8133e50b38dca66dbe779395c80" title="Convert 16-bit quantity from host byte order to network byte order.">uip_htons</a>(lastport)) {
<a name="l00545"></a>00545       <span class="keywordflow">goto</span> again;
<a name="l00546"></a>00546     }
<a name="l00547"></a>00547   }
<a name="l00548"></a>00548 
<a name="l00549"></a>00549   conn = 0;
<a name="l00550"></a>00550   <span class="keywordflow">for</span>(c = 0; c &lt; <a class="code" href="a01823.html#ga196379ceb1219a99f4495e41ccc9bbfb" title="The maximum amount of concurrent UDP connections.">UIP_UDP_CONNS</a>; ++c) {
<a name="l00551"></a>00551     <span class="keywordflow">if</span>(uip_udp_conns[c].<a class="code" href="a00122.html#accfeb05db2d9ef4702f6b20a12791dcf" title="The local port number in network byte order.">lport</a> == 0) {
<a name="l00552"></a>00552       conn = &amp;uip_udp_conns[c];
<a name="l00553"></a>00553       <span class="keywordflow">break</span>;
<a name="l00554"></a>00554     }
<a name="l00555"></a>00555   }
<a name="l00556"></a>00556 
<a name="l00557"></a>00557   <span class="keywordflow">if</span>(conn == 0) {
<a name="l00558"></a>00558     <span class="keywordflow">return</span> 0;
<a name="l00559"></a>00559   }
<a name="l00560"></a>00560   
<a name="l00561"></a>00561   conn-&gt;<a class="code" href="a00122.html#accfeb05db2d9ef4702f6b20a12791dcf" title="The local port number in network byte order.">lport</a> = UIP_HTONS(lastport);
<a name="l00562"></a>00562   conn-&gt;<a class="code" href="a00122.html#abd156fd08c61ac3593414d3dc7c15ec2" title="The remote port number in network byte order.">rport</a> = <a class="code" href="a00122.html#abd156fd08c61ac3593414d3dc7c15ec2" title="The remote port number in network byte order.">rport</a>;
<a name="l00563"></a>00563   <span class="keywordflow">if</span>(ripaddr == <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>) {
<a name="l00564"></a>00564     memset(&amp;conn-&gt;<a class="code" href="a00122.html#a8a661a2d544100b82d0d14a1985083d5" title="The IP address of the remote peer.">ripaddr</a>, 0, <span class="keyword">sizeof</span>(<a class="code" href="a00112.html" title="Representation of an IP address.">uip_ipaddr_t</a>));
<a name="l00565"></a>00565   } <span class="keywordflow">else</span> {
<a name="l00566"></a>00566     uip_ipaddr_copy(&amp;conn-&gt;<a class="code" href="a00122.html#a8a661a2d544100b82d0d14a1985083d5" title="The IP address of the remote peer.">ripaddr</a>, ripaddr);
<a name="l00567"></a>00567   }
<a name="l00568"></a>00568   conn-&gt;<a class="code" href="a00122.html#a96cd7b7c38301246d407aa014c86863f" title="Default time-to-live.">ttl</a> = <a class="code" href="a01929.html#gaecc8ec9970a01951fd9eec36e07884ef">uip_ds6_if</a>.cur_hop_limit;
<a name="l00569"></a>00569   
<a name="l00570"></a>00570   <span class="keywordflow">return</span> conn;
<a name="l00571"></a>00571 }
<a name="l00572"></a>00572 <span class="preprocessor">#endif </span><span class="comment">/* UIP_UDP */</span>
<a name="l00573"></a>00573 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00574"></a>00574 <span class="preprocessor">#if UIP_TCP</span>
<a name="l00575"></a>00575 <span class="preprocessor"></span><span class="keywordtype">void</span>
<a name="l00576"></a>00576 <a class="code" href="a01926.html#gaabeca814c253359788ec2dbd6c62f17e" title="Stop listening to the specified port.">uip_unlisten</a>(uint16_t port)
<a name="l00577"></a>00577 {
<a name="l00578"></a>00578   <span class="keywordflow">for</span>(c = 0; c &lt; <a class="code" href="a01824.html#ga8f4ebd8ef6c0ea665ed351d87fec09fd" title="The maximum number of simultaneously listening TCP ports.">UIP_LISTENPORTS</a>; ++c) {
<a name="l00579"></a>00579     <span class="keywordflow">if</span>(uip_listenports[c] == port) {
<a name="l00580"></a>00580       uip_listenports[c] = 0;
<a name="l00581"></a>00581       <span class="keywordflow">return</span>;
<a name="l00582"></a>00582     }
<a name="l00583"></a>00583   }
<a name="l00584"></a>00584 }
<a name="l00585"></a>00585 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00586"></a>00586 <span class="keywordtype">void</span>
<a name="l00587"></a>00587 <a class="code" href="a01926.html#ga50ff1ab4c8327f775eee393262ef1811" title="Start listening to the specified port.">uip_listen</a>(uint16_t port)
<a name="l00588"></a>00588 {
<a name="l00589"></a>00589   <span class="keywordflow">for</span>(c = 0; c &lt; <a class="code" href="a01824.html#ga8f4ebd8ef6c0ea665ed351d87fec09fd" title="The maximum number of simultaneously listening TCP ports.">UIP_LISTENPORTS</a>; ++c) {
<a name="l00590"></a>00590     <span class="keywordflow">if</span>(uip_listenports[c] == 0) {
<a name="l00591"></a>00591       uip_listenports[c] = port;
<a name="l00592"></a>00592       <span class="keywordflow">return</span>;
<a name="l00593"></a>00593     }
<a name="l00594"></a>00594   }
<a name="l00595"></a>00595 }
<a name="l00596"></a>00596 <span class="preprocessor">#endif</span>
<a name="l00597"></a>00597 <span class="preprocessor"></span><span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00598"></a>00598 
<a name="l00599"></a>00599 <span class="preprocessor">#if UIP_CONF_IPV6_REASSEMBLY</span>
<a name="l00600"></a>00600 <span class="preprocessor"></span><span class="preprocessor">#define UIP_REASS_BUFSIZE (UIP_BUFSIZE - UIP_LLH_LEN)</span>
<a name="l00601"></a>00601 <span class="preprocessor"></span>
<a name="l00602"></a>00602 <span class="keyword">static</span> uint8_t uip_reassbuf[UIP_REASS_BUFSIZE];
<a name="l00603"></a>00603 
<a name="l00604"></a>00604 <span class="keyword">static</span> uint8_t uip_reassbitmap[UIP_REASS_BUFSIZE / (8 * 8)];
<a name="l00605"></a>00605 <span class="comment">/*the first byte of an IP fragment is aligned on an 8-byte boundary */</span>
<a name="l00606"></a>00606 
<a name="l00607"></a>00607 <span class="keyword">static</span> <span class="keyword">const</span> uint8_t bitmap_bits[8] = {0xff, 0x7f, 0x3f, 0x1f,
<a name="l00608"></a>00608                                     0x0f, 0x07, 0x03, 0x01};
<a name="l00609"></a>00609 <span class="keyword">static</span> uint16_t uip_reasslen;
<a name="l00610"></a>00610 <span class="keyword">static</span> uint8_t uip_reassflags;
<a name="l00611"></a>00611 
<a name="l00612"></a>00612 <span class="preprocessor">#define UIP_REASS_FLAG_LASTFRAG 0x01</span>
<a name="l00613"></a>00613 <span class="preprocessor"></span><span class="preprocessor">#define UIP_REASS_FLAG_FIRSTFRAG 0x02</span>
<a name="l00614"></a>00614 <span class="preprocessor"></span><span class="preprocessor">#define UIP_REASS_FLAG_ERROR_MSG 0x04</span>
<a name="l00615"></a>00615 <span class="preprocessor"></span>
<a name="l00616"></a>00616 
<a name="l00617"></a>00617 <span class="comment">/*</span>
<a name="l00618"></a>00618 <span class="comment"> * See RFC 2460 for a description of fragmentation in IPv6</span>
<a name="l00619"></a>00619 <span class="comment"> * A typical Ipv6 fragment</span>
<a name="l00620"></a>00620 <span class="comment"> *  +------------------+--------+--------------+</span>
<a name="l00621"></a>00621 <span class="comment"> *  |  Unfragmentable  |Fragment|    first     |</span>
<a name="l00622"></a>00622 <span class="comment"> *  |       Part       | Header |   fragment   |</span>
<a name="l00623"></a>00623 <span class="comment"> *  +------------------+--------+--------------+</span>
<a name="l00624"></a>00624 <span class="comment"> */</span>
<a name="l00625"></a>00625 
<a name="l00626"></a>00626 
<a name="l00627"></a>00627 <span class="keyword">struct </span><a class="code" href="a00047.html" title="A timer.">etimer</a> uip_reass_timer; <span class="comment">/* timer for reassembly */</span>
<a name="l00628"></a>00628 uint8_t uip_reass_on; <span class="comment">/* equal to 1 if we are currently reassembling a packet */</span>
<a name="l00629"></a>00629 
<a name="l00630"></a>00630 <span class="keyword">static</span> uint32_t uip_id; <span class="comment">/* For every packet that is to be fragmented, the source</span>
<a name="l00631"></a>00631 <span class="comment">                        node generates an Identification value that is present</span>
<a name="l00632"></a>00632 <span class="comment">                        in all the fragments */</span>
<a name="l00633"></a>00633 <span class="preprocessor">#define IP_MF   0x0001</span>
<a name="l00634"></a>00634 <span class="preprocessor"></span>
<a name="l00635"></a>00635 <span class="keyword">static</span> uint16_t
<a name="l00636"></a>00636 uip_reass(<span class="keywordtype">void</span>)
<a name="l00637"></a>00637 {
<a name="l00638"></a>00638   uint16_t offset=0;
<a name="l00639"></a>00639   uint16_t len;
<a name="l00640"></a>00640   uint16_t i;
<a name="l00641"></a>00641   
<a name="l00642"></a>00642   <span class="comment">/* If ip_reasstmr is zero, no packet is present in the buffer */</span>
<a name="l00643"></a>00643   <span class="comment">/* We first write the unfragmentable part of IP header into the reassembly</span>
<a name="l00644"></a>00644 <span class="comment">     buffer. The reset the other reassembly variables. */</span>
<a name="l00645"></a>00645   <span class="keywordflow">if</span>(uip_reass_on == 0) {
<a name="l00646"></a>00646     PRINTF(<span class="stringliteral">&quot;Starting reassembly\n&quot;</span>);
<a name="l00647"></a>00647     memcpy(FBUF, <a class="code" href="a01929.html#gaf966537cf73ee5973da59bba6b21b731" title="Pointer to IP header.">UIP_IP_BUF</a>, <a class="code" href="a01816.html#ga0c63b80e0f8038403df5fee2bac3aab8" title="The length of the extension headers.">uip_ext_len</a> + UIP_IPH_LEN);
<a name="l00648"></a>00648     <span class="comment">/* temporary in case we do not receive the fragment with offset 0 first */</span>
<a name="l00649"></a>00649     <a class="code" href="a01862.html#gadb6c83643bbca82b614c50b27c586302" title="Set an event timer.">etimer_set</a>(&amp;uip_reass_timer, <a class="code" href="a01821.html#gac3882366feda1cb759ccbfe98327a7db" title="The maximum time an IP fragment should wait in the reassembly buffer before it is dropped...">UIP_REASS_MAXAGE</a>*<a class="code" href="a01859.html#gae3ced0551b26c9b99cb45a86f34d100a" title="A second, measured in system clock time.">CLOCK_SECOND</a>);
<a name="l00650"></a>00650     uip_reass_on = 1;
<a name="l00651"></a>00651     uip_reassflags = 0;
<a name="l00652"></a>00652     uip_id = UIP_FRAG_BUF-&gt;id;
<a name="l00653"></a>00653     <span class="comment">/* Clear the bitmap. */</span>
<a name="l00654"></a>00654     memset(uip_reassbitmap, 0, <span class="keyword">sizeof</span>(uip_reassbitmap));
<a name="l00655"></a>00655   }
<a name="l00656"></a>00656   <span class="comment">/*</span>
<a name="l00657"></a>00657 <span class="comment">   * Check if the incoming fragment matches the one currently present</span>
<a name="l00658"></a>00658 <span class="comment">   * in the reasembly buffer. If so, we proceed with copying the fragment</span>
<a name="l00659"></a>00659 <span class="comment">   * into the buffer.</span>
<a name="l00660"></a>00660 <span class="comment">   */</span>
<a name="l00661"></a>00661   <span class="keywordflow">if</span>(<a class="code" href="a01815.html#ga210e629f7252e4bc8458cbdf260b3318" title="Copy an IP address from one place to another.">uip_ipaddr_cmp</a>(&amp;FBUF-&gt;srcipaddr, &amp;<a class="code" href="a01929.html#gaf966537cf73ee5973da59bba6b21b731" title="Pointer to IP header.">UIP_IP_BUF</a>-&gt;srcipaddr) &amp;&amp;
<a name="l00662"></a>00662      <a class="code" href="a01815.html#ga210e629f7252e4bc8458cbdf260b3318" title="Copy an IP address from one place to another.">uip_ipaddr_cmp</a>(&amp;FBUF-&gt;destipaddr, &amp;<a class="code" href="a01929.html#gaf966537cf73ee5973da59bba6b21b731" title="Pointer to IP header.">UIP_IP_BUF</a>-&gt;destipaddr) &amp;&amp;
<a name="l00663"></a>00663      UIP_FRAG_BUF-&gt;id == uip_id) {
<a name="l00664"></a>00664     len = <a class="code" href="a01926.html#ga72af00d45662ba0dc2ba3781a556e25b" title="The length of the packet in the uip_buf buffer.">uip_len</a> - <a class="code" href="a01816.html#ga0c63b80e0f8038403df5fee2bac3aab8" title="The length of the extension headers.">uip_ext_len</a> - UIP_IPH_LEN - UIP_FRAGH_LEN;
<a name="l00665"></a>00665     offset = (uip_ntohs(UIP_FRAG_BUF-&gt;offsetresmore) &amp; 0xfff8);
<a name="l00666"></a>00666     <span class="comment">/* in byte, originaly in multiple of 8 bytes*/</span>
<a name="l00667"></a>00667     PRINTF(<span class="stringliteral">&quot;len %d\n&quot;</span>, len);
<a name="l00668"></a>00668     PRINTF(<span class="stringliteral">&quot;offset %d\n&quot;</span>, offset);
<a name="l00669"></a>00669     <span class="keywordflow">if</span>(offset == 0){
<a name="l00670"></a>00670       uip_reassflags |= UIP_REASS_FLAG_FIRSTFRAG;
<a name="l00671"></a>00671       <span class="comment">/*</span>
<a name="l00672"></a>00672 <span class="comment">       * The Next Header field of the last header of the Unfragmentable</span>
<a name="l00673"></a>00673 <span class="comment">       * Part is obtained from the Next Header field of the first</span>
<a name="l00674"></a>00674 <span class="comment">       * fragment&#39;s Fragment header.</span>
<a name="l00675"></a>00675 <span class="comment">       */</span>
<a name="l00676"></a>00676       *<a class="code" href="a01929.html#ga6a2217b24bdcc949e5831fbfa139bc45" title="Type of the next header in IPv6 header or extension headers.">uip_next_hdr</a> = UIP_FRAG_BUF-&gt;next;
<a name="l00677"></a>00677       memcpy(FBUF, <a class="code" href="a01929.html#gaf966537cf73ee5973da59bba6b21b731" title="Pointer to IP header.">UIP_IP_BUF</a>, <a class="code" href="a01816.html#ga0c63b80e0f8038403df5fee2bac3aab8" title="The length of the extension headers.">uip_ext_len</a> + UIP_IPH_LEN);
<a name="l00678"></a>00678       PRINTF(<span class="stringliteral">&quot;src &quot;</span>);
<a name="l00679"></a>00679       PRINT6ADDR(&amp;FBUF-&gt;srcipaddr);
<a name="l00680"></a>00680       PRINTF(<span class="stringliteral">&quot;dest &quot;</span>);
<a name="l00681"></a>00681       PRINT6ADDR(&amp;FBUF-&gt;destipaddr);
<a name="l00682"></a>00682       PRINTF(<span class="stringliteral">&quot;next %d\n&quot;</span>, <a class="code" href="a01929.html#gaf966537cf73ee5973da59bba6b21b731" title="Pointer to IP header.">UIP_IP_BUF</a>-&gt;proto);
<a name="l00683"></a>00683       
<a name="l00684"></a>00684     }
<a name="l00685"></a>00685     
<a name="l00686"></a>00686     <span class="comment">/* If the offset or the offset + fragment length overflows the</span>
<a name="l00687"></a>00687 <span class="comment">       reassembly buffer, we discard the entire packet. */</span>
<a name="l00688"></a>00688     <span class="keywordflow">if</span>(offset &gt; UIP_REASS_BUFSIZE ||
<a name="l00689"></a>00689        offset + len &gt; UIP_REASS_BUFSIZE) {
<a name="l00690"></a>00690       uip_reass_on = 0;
<a name="l00691"></a>00691       <a class="code" href="a01862.html#ga94628979920ab92a3cc0e69e537bef7d" title="Stop a pending event timer.">etimer_stop</a>(&amp;uip_reass_timer);
<a name="l00692"></a>00692       <span class="keywordflow">return</span> 0;
<a name="l00693"></a>00693     }
<a name="l00694"></a>00694 
<a name="l00695"></a>00695     <span class="comment">/* If this fragment has the More Fragments flag set to zero, it is the</span>
<a name="l00696"></a>00696 <span class="comment">       last fragment*/</span>
<a name="l00697"></a>00697     <span class="keywordflow">if</span>((uip_ntohs(UIP_FRAG_BUF-&gt;offsetresmore) &amp; IP_MF) == 0) {
<a name="l00698"></a>00698       uip_reassflags |= UIP_REASS_FLAG_LASTFRAG;
<a name="l00699"></a>00699       <span class="comment">/*calculate the size of the entire packet*/</span>
<a name="l00700"></a>00700       uip_reasslen = offset + len;
<a name="l00701"></a>00701       PRINTF(<span class="stringliteral">&quot;LAST FRAGMENT reasslen %d\n&quot;</span>, uip_reasslen);
<a name="l00702"></a>00702     } <span class="keywordflow">else</span> {
<a name="l00703"></a>00703       <span class="comment">/* If len is not a multiple of 8 octets and the M flag of that fragment</span>
<a name="l00704"></a>00704 <span class="comment">         is 1, then that fragment must be discarded and an ICMP Parameter</span>
<a name="l00705"></a>00705 <span class="comment">         Problem, Code 0, message should be sent to the source of the fragment,</span>
<a name="l00706"></a>00706 <span class="comment">         pointing to the Payload Length field of the fragment packet. */</span>
<a name="l00707"></a>00707       <span class="keywordflow">if</span>(len % 8 != 0){
<a name="l00708"></a>00708         <a class="code" href="a01929.html#ga1e39f07d91a68d158d653251fb1c98c3" title="Send an icmpv6 error message.">uip_icmp6_error_output</a>(<a class="code" href="a01929.html#ga8d80ba426cf5f5d177e7464c8076b62a" title="ip6 header bad">ICMP6_PARAM_PROB</a>, <a class="code" href="a01929.html#gae1dd9cc2c5f466eeb157320e65faba79" title="erroneous header field">ICMP6_PARAMPROB_HEADER</a>, 4);
<a name="l00709"></a>00709         uip_reassflags |= UIP_REASS_FLAG_ERROR_MSG;
<a name="l00710"></a>00710         <span class="comment">/* not clear if we should interrupt reassembly, but it seems so from</span>
<a name="l00711"></a>00711 <span class="comment">           the conformance tests */</span>
<a name="l00712"></a>00712         uip_reass_on = 0;
<a name="l00713"></a>00713         <a class="code" href="a01862.html#ga94628979920ab92a3cc0e69e537bef7d" title="Stop a pending event timer.">etimer_stop</a>(&amp;uip_reass_timer);
<a name="l00714"></a>00714         <span class="keywordflow">return</span> <a class="code" href="a01926.html#ga72af00d45662ba0dc2ba3781a556e25b" title="The length of the packet in the uip_buf buffer.">uip_len</a>;
<a name="l00715"></a>00715       }
<a name="l00716"></a>00716     }
<a name="l00717"></a>00717     
<a name="l00718"></a>00718     <span class="comment">/* Copy the fragment into the reassembly buffer, at the right</span>
<a name="l00719"></a>00719 <span class="comment">       offset. */</span>
<a name="l00720"></a>00720     memcpy((uint8_t *)FBUF + UIP_IPH_LEN + <a class="code" href="a01816.html#ga0c63b80e0f8038403df5fee2bac3aab8" title="The length of the extension headers.">uip_ext_len</a> + offset,
<a name="l00721"></a>00721            (uint8_t *)UIP_FRAG_BUF + UIP_FRAGH_LEN, len);
<a name="l00722"></a>00722     
<a name="l00723"></a>00723     <span class="comment">/* Update the bitmap. */</span>
<a name="l00724"></a>00724     <span class="keywordflow">if</span>(offset &gt;&gt; 6 == (offset + len) &gt;&gt; 6) {
<a name="l00725"></a>00725       uip_reassbitmap[offset &gt;&gt; 6] |=
<a name="l00726"></a>00726         bitmap_bits[(offset &gt;&gt; 3) &amp; 7] &amp;
<a name="l00727"></a>00727         ~bitmap_bits[((offset + len) &gt;&gt; 3)  &amp; 7];
<a name="l00728"></a>00728     } <span class="keywordflow">else</span> {
<a name="l00729"></a>00729       <span class="comment">/* If the two endpoints are in different bytes, we update the</span>
<a name="l00730"></a>00730 <span class="comment">         bytes in the endpoints and fill the stuff inbetween with</span>
<a name="l00731"></a>00731 <span class="comment">         0xff. */</span>
<a name="l00732"></a>00732       uip_reassbitmap[offset &gt;&gt; 6] |= bitmap_bits[(offset &gt;&gt; 3) &amp; 7];
<a name="l00733"></a>00733  
<a name="l00734"></a>00734       <span class="keywordflow">for</span>(i = (1 + (offset &gt;&gt; 6)); i &lt; ((offset + len) &gt;&gt; 6); ++i) {
<a name="l00735"></a>00735         uip_reassbitmap[i] = 0xff;
<a name="l00736"></a>00736       }
<a name="l00737"></a>00737       uip_reassbitmap[(offset + len) &gt;&gt; 6] |=
<a name="l00738"></a>00738         ~bitmap_bits[((offset + len) &gt;&gt; 3) &amp; 7];
<a name="l00739"></a>00739     }
<a name="l00740"></a>00740   
<a name="l00741"></a>00741     <span class="comment">/* Finally, we check if we have a full packet in the buffer. We do</span>
<a name="l00742"></a>00742 <span class="comment">       this by checking if we have the last fragment and if all bits</span>
<a name="l00743"></a>00743 <span class="comment">       in the bitmap are set. */</span>
<a name="l00744"></a>00744     
<a name="l00745"></a>00745     <span class="keywordflow">if</span>(uip_reassflags &amp; UIP_REASS_FLAG_LASTFRAG) {
<a name="l00746"></a>00746       <span class="comment">/* Check all bytes up to and including all but the last byte in</span>
<a name="l00747"></a>00747 <span class="comment">         the bitmap. */</span>
<a name="l00748"></a>00748       <span class="keywordflow">for</span>(i = 0; i &lt; (uip_reasslen &gt;&gt; 6); ++i) {
<a name="l00749"></a>00749         <span class="keywordflow">if</span>(uip_reassbitmap[i] != 0xff) {
<a name="l00750"></a>00750           <span class="keywordflow">return</span> 0;
<a name="l00751"></a>00751         }
<a name="l00752"></a>00752       }
<a name="l00753"></a>00753       <span class="comment">/* Check the last byte in the bitmap. It should contain just the</span>
<a name="l00754"></a>00754 <span class="comment">         right amount of bits. */</span>
<a name="l00755"></a>00755       <span class="keywordflow">if</span>(uip_reassbitmap[uip_reasslen &gt;&gt; 6] !=
<a name="l00756"></a>00756          (uint8_t)~bitmap_bits[(uip_reasslen &gt;&gt; 3) &amp; 7]) {
<a name="l00757"></a>00757         <span class="keywordflow">return</span> 0;
<a name="l00758"></a>00758       }
<a name="l00759"></a>00759 
<a name="l00760"></a>00760      <span class="comment">/* If we have come this far, we have a full packet in the</span>
<a name="l00761"></a>00761 <span class="comment">         buffer, so we copy it to uip_buf. We also reset the timer. */</span>
<a name="l00762"></a>00762       uip_reass_on = 0;
<a name="l00763"></a>00763       <a class="code" href="a01862.html#ga94628979920ab92a3cc0e69e537bef7d" title="Stop a pending event timer.">etimer_stop</a>(&amp;uip_reass_timer);
<a name="l00764"></a>00764 
<a name="l00765"></a>00765       uip_reasslen += UIP_IPH_LEN + <a class="code" href="a01816.html#ga0c63b80e0f8038403df5fee2bac3aab8" title="The length of the extension headers.">uip_ext_len</a>;
<a name="l00766"></a>00766       memcpy(<a class="code" href="a01929.html#gaf966537cf73ee5973da59bba6b21b731" title="Pointer to IP header.">UIP_IP_BUF</a>, FBUF, uip_reasslen);
<a name="l00767"></a>00767       <a class="code" href="a01929.html#gaf966537cf73ee5973da59bba6b21b731" title="Pointer to IP header.">UIP_IP_BUF</a>-&gt;len[0] = ((uip_reasslen - UIP_IPH_LEN) &gt;&gt; 8);
<a name="l00768"></a>00768       <a class="code" href="a01929.html#gaf966537cf73ee5973da59bba6b21b731" title="Pointer to IP header.">UIP_IP_BUF</a>-&gt;len[1] = ((uip_reasslen - UIP_IPH_LEN) &amp; 0xff);
<a name="l00769"></a>00769       PRINTF(<span class="stringliteral">&quot;REASSEMBLED PAQUET %d (%d)\n&quot;</span>, uip_reasslen,
<a name="l00770"></a>00770              (<a class="code" href="a01929.html#gaf966537cf73ee5973da59bba6b21b731" title="Pointer to IP header.">UIP_IP_BUF</a>-&gt;len[0] &lt;&lt; 8) | <a class="code" href="a01929.html#gaf966537cf73ee5973da59bba6b21b731" title="Pointer to IP header.">UIP_IP_BUF</a>-&gt;len[1]);
<a name="l00771"></a>00771    
<a name="l00772"></a>00772       <span class="keywordflow">return</span> uip_reasslen;
<a name="l00773"></a>00773       
<a name="l00774"></a>00774     }
<a name="l00775"></a>00775   } <span class="keywordflow">else</span> {
<a name="l00776"></a>00776     PRINTF(<span class="stringliteral">&quot;Already reassembling another paquet\n&quot;</span>);
<a name="l00777"></a>00777   }
<a name="l00778"></a>00778   <span class="keywordflow">return</span> 0;
<a name="l00779"></a>00779 }
<a name="l00780"></a>00780 
<a name="l00781"></a>00781 <span class="keywordtype">void</span>
<a name="l00782"></a>00782 <a class="code" href="a01813.html#gaf8a01d734ce7c50dd9ef03b2a4e7a0ce" title="Abandon the reassembly of the current packet.">uip_reass_over</a>(<span class="keywordtype">void</span>)
<a name="l00783"></a>00783 {
<a name="l00784"></a>00784    <span class="comment">/* to late, we abandon the reassembly of the packet */</span>
<a name="l00785"></a>00785 
<a name="l00786"></a>00786   uip_reass_on = 0;
<a name="l00787"></a>00787   <a class="code" href="a01862.html#ga94628979920ab92a3cc0e69e537bef7d" title="Stop a pending event timer.">etimer_stop</a>(&amp;uip_reass_timer);
<a name="l00788"></a>00788 
<a name="l00789"></a>00789   <span class="keywordflow">if</span>(uip_reassflags &amp; UIP_REASS_FLAG_FIRSTFRAG){
<a name="l00790"></a>00790     PRINTF(<span class="stringliteral">&quot;FRAG INTERRUPTED TOO LATE\n&quot;</span>);
<a name="l00791"></a>00791     <span class="comment">/* If the first fragment has been received, an ICMP Time Exceeded</span>
<a name="l00792"></a>00792 <span class="comment">       -- Fragment Reassembly Time Exceeded message should be sent to the</span>
<a name="l00793"></a>00793 <span class="comment">       source of that fragment. */</span><span class="comment"></span>
<a name="l00794"></a>00794 <span class="comment">    /** \note</span>
<a name="l00795"></a>00795 <span class="comment">     * We don&#39;t have a complete packet to put in the error message.</span>
<a name="l00796"></a>00796 <span class="comment">     * We could include the first fragment but since its not mandated by</span>
<a name="l00797"></a>00797 <span class="comment">     * any RFC, we decided not to include it as it reduces the size of</span>
<a name="l00798"></a>00798 <span class="comment">     * the packet.</span>
<a name="l00799"></a>00799 <span class="comment">     */</span>
<a name="l00800"></a>00800     <a class="code" href="a01926.html#ga72af00d45662ba0dc2ba3781a556e25b" title="The length of the packet in the uip_buf buffer.">uip_len</a> = 0;
<a name="l00801"></a>00801     <a class="code" href="a01816.html#ga0c63b80e0f8038403df5fee2bac3aab8" title="The length of the extension headers.">uip_ext_len</a> = 0;
<a name="l00802"></a>00802     memcpy(<a class="code" href="a01929.html#gaf966537cf73ee5973da59bba6b21b731" title="Pointer to IP header.">UIP_IP_BUF</a>, FBUF, UIP_IPH_LEN); <span class="comment">/* copy the header for src</span>
<a name="l00803"></a>00803 <span class="comment">                                              and dest address*/</span>
<a name="l00804"></a>00804     <a class="code" href="a01929.html#ga1e39f07d91a68d158d653251fb1c98c3" title="Send an icmpv6 error message.">uip_icmp6_error_output</a>(<a class="code" href="a01929.html#ga077f2445c09d34cea87ca9d435336c99" title="time exceeded">ICMP6_TIME_EXCEEDED</a>, <a class="code" href="a01929.html#ga4d8ca3e67d6cb7704a2e4d9ac3395815" title="ttl==0 in reass">ICMP6_TIME_EXCEED_REASSEMBLY</a>, 0);
<a name="l00805"></a>00805     
<a name="l00806"></a>00806     <a class="code" href="a01926.html#ga9c0814ed491fa452ec97910c0728d410" title="The uIP TCP/IP statistics.">UIP_STAT</a>(++uip_stat.ip.sent);
<a name="l00807"></a>00807     uip_flags = 0;
<a name="l00808"></a>00808   }
<a name="l00809"></a>00809 }
<a name="l00810"></a>00810 
<a name="l00811"></a>00811 <span class="preprocessor">#endif </span><span class="comment">/* UIP_CONF_IPV6_REASSEMBLY */</span>
<a name="l00812"></a>00812 
<a name="l00813"></a>00813 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00814"></a>00814 <span class="preprocessor">#if UIP_TCP</span>
<a name="l00815"></a>00815 <span class="preprocessor"></span><span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00816"></a>00816 uip_add_rcv_nxt(uint16_t n)
<a name="l00817"></a>00817 {
<a name="l00818"></a>00818   <a class="code" href="a01926.html#ga5a380cbebc834ec7aea86f6cfff7f19e" title="Carry out a 32-bit addition.">uip_add32</a>(uip_conn-&gt;<a class="code" href="a00098.html#a1c0f37a806ed9ae4ed11742696cba2c6" title="The sequence number that we expect to receive next.">rcv_nxt</a>, n);
<a name="l00819"></a>00819   uip_conn-&gt;<a class="code" href="a00098.html#a1c0f37a806ed9ae4ed11742696cba2c6" title="The sequence number that we expect to receive next.">rcv_nxt</a>[0] = uip_acc32[0];
<a name="l00820"></a>00820   uip_conn-&gt;<a class="code" href="a00098.html#a1c0f37a806ed9ae4ed11742696cba2c6" title="The sequence number that we expect to receive next.">rcv_nxt</a>[1] = uip_acc32[1];
<a name="l00821"></a>00821   uip_conn-&gt;<a class="code" href="a00098.html#a1c0f37a806ed9ae4ed11742696cba2c6" title="The sequence number that we expect to receive next.">rcv_nxt</a>[2] = uip_acc32[2];
<a name="l00822"></a>00822   uip_conn-&gt;<a class="code" href="a00098.html#a1c0f37a806ed9ae4ed11742696cba2c6" title="The sequence number that we expect to receive next.">rcv_nxt</a>[3] = uip_acc32[3];
<a name="l00823"></a>00823 }
<a name="l00824"></a>00824 <span class="preprocessor">#endif</span>
<a name="l00825"></a>00825 <span class="preprocessor"></span><span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00826"></a>00826 <span class="comment"></span>
<a name="l00827"></a>00827 <span class="comment">/**</span>
<a name="l00828"></a>00828 <span class="comment"> * \brief Process the options in Destination and Hop By Hop extension headers</span>
<a name="l00829"></a>00829 <span class="comment"> */</span>
<a name="l00830"></a>00830 <span class="keyword">static</span> uint8_t
<a name="l00831"></a>00831 ext_hdr_options_process(<span class="keywordtype">void</span>)
<a name="l00832"></a>00832 {
<a name="l00833"></a>00833  <span class="comment">/*</span>
<a name="l00834"></a>00834 <span class="comment">  * Length field in the extension header: length of the header in units of</span>
<a name="l00835"></a>00835 <span class="comment">  * 8 bytes, excluding the first 8 bytes</span>
<a name="l00836"></a>00836 <span class="comment">  * length field in an option : the length of data in the option</span>
<a name="l00837"></a>00837 <span class="comment">  */</span>
<a name="l00838"></a>00838   <a class="code" href="a01929.html#ga3612c8a7e64e9863f20b27e4f3def660" title="length of the header options read">uip_ext_opt_offset</a> = 2;
<a name="l00839"></a>00839   <span class="keywordflow">while</span>(<a class="code" href="a01929.html#ga3612c8a7e64e9863f20b27e4f3def660" title="length of the header options read">uip_ext_opt_offset</a> &lt; ((UIP_EXT_BUF-&gt;len &lt;&lt; 3) + 8)) {
<a name="l00840"></a>00840     <span class="keywordflow">switch</span>(UIP_EXT_HDR_OPT_BUF-&gt;type) {
<a name="l00841"></a>00841       <span class="comment">/*</span>
<a name="l00842"></a>00842 <span class="comment">       * for now we do not support any options except padding ones</span>
<a name="l00843"></a>00843 <span class="comment">       * PAD1 does not make sense as the header must be 8bytes aligned,</span>
<a name="l00844"></a>00844 <span class="comment">       * hence we can only have</span>
<a name="l00845"></a>00845 <span class="comment">       */</span>
<a name="l00846"></a>00846       <span class="keywordflow">case</span> UIP_EXT_HDR_OPT_PAD1:
<a name="l00847"></a>00847         PRINTF(<span class="stringliteral">&quot;Processing PAD1 option\n&quot;</span>);
<a name="l00848"></a>00848         <a class="code" href="a01929.html#ga3612c8a7e64e9863f20b27e4f3def660" title="length of the header options read">uip_ext_opt_offset</a> += 1;
<a name="l00849"></a>00849         <span class="keywordflow">break</span>;
<a name="l00850"></a>00850       <span class="keywordflow">case</span> UIP_EXT_HDR_OPT_PADN:
<a name="l00851"></a>00851         PRINTF(<span class="stringliteral">&quot;Processing PADN option\n&quot;</span>);
<a name="l00852"></a>00852         <a class="code" href="a01929.html#ga3612c8a7e64e9863f20b27e4f3def660" title="length of the header options read">uip_ext_opt_offset</a> += UIP_EXT_HDR_OPT_PADN_BUF-&gt;opt_len + 2;
<a name="l00853"></a>00853         <span class="keywordflow">break</span>;
<a name="l00854"></a>00854 <span class="preprocessor">#if UIP_CONF_IPV6_RPL</span>
<a name="l00855"></a>00855 <span class="preprocessor"></span>      <span class="keywordflow">case</span> UIP_EXT_HDR_OPT_RPL:
<a name="l00856"></a>00856         PRINTF(<span class="stringliteral">&quot;Processing RPL option\n&quot;</span>);
<a name="l00857"></a>00857         <span class="keywordflow">if</span>(rpl_verify_header(<a class="code" href="a01929.html#ga3612c8a7e64e9863f20b27e4f3def660" title="length of the header options read">uip_ext_opt_offset</a>)) {
<a name="l00858"></a>00858           PRINTF(<span class="stringliteral">&quot;RPL Option Error : Dropping Packet&quot;</span>);
<a name="l00859"></a>00859           <span class="keywordflow">return</span> 1;
<a name="l00860"></a>00860         }
<a name="l00861"></a>00861         <a class="code" href="a01929.html#ga3612c8a7e64e9863f20b27e4f3def660" title="length of the header options read">uip_ext_opt_offset</a> += (UIP_EXT_HDR_OPT_RPL_BUF-&gt;opt_len) + 2;
<a name="l00862"></a>00862         <span class="keywordflow">return</span> 0;
<a name="l00863"></a>00863 <span class="preprocessor">#endif </span><span class="comment">/* UIP_CONF_IPV6_RPL */</span>
<a name="l00864"></a>00864       <span class="keywordflow">default</span>:
<a name="l00865"></a>00865         <span class="comment">/*</span>
<a name="l00866"></a>00866 <span class="comment">         * check the two highest order bits of the option</span>
<a name="l00867"></a>00867 <span class="comment">         * - 00 skip over this option and continue processing the header.</span>
<a name="l00868"></a>00868 <span class="comment">         * - 01 discard the packet.</span>
<a name="l00869"></a>00869 <span class="comment">         * - 10 discard the packet and, regardless of whether or not the</span>
<a name="l00870"></a>00870 <span class="comment">         *   packet&#39;s Destination Address was a multicast address, send an</span>
<a name="l00871"></a>00871 <span class="comment">         *   ICMP Parameter Problem, Code 2, message to the packet&#39;s</span>
<a name="l00872"></a>00872 <span class="comment">         *   Source Address, pointing to the unrecognized Option Type.</span>
<a name="l00873"></a>00873 <span class="comment">         * - 11 discard the packet and, only if the packet&#39;s Destination</span>
<a name="l00874"></a>00874 <span class="comment">         *   Address was not a multicast address, send an ICMP Parameter</span>
<a name="l00875"></a>00875 <span class="comment">         *   Problem, Code 2, message to the packet&#39;s Source Address,</span>
<a name="l00876"></a>00876 <span class="comment">         *   pointing to the unrecognized Option Type.</span>
<a name="l00877"></a>00877 <span class="comment">         */</span>
<a name="l00878"></a>00878         PRINTF(<span class="stringliteral">&quot;MSB %x\n&quot;</span>, UIP_EXT_HDR_OPT_BUF-&gt;type);
<a name="l00879"></a>00879         <span class="keywordflow">switch</span>(UIP_EXT_HDR_OPT_BUF-&gt;type &amp; 0xC0) {
<a name="l00880"></a>00880           <span class="keywordflow">case</span> 0:
<a name="l00881"></a>00881             <span class="keywordflow">break</span>;
<a name="l00882"></a>00882           <span class="keywordflow">case</span> 0x40:
<a name="l00883"></a>00883             <span class="keywordflow">return</span> 1;
<a name="l00884"></a>00884           <span class="keywordflow">case</span> 0xC0:
<a name="l00885"></a>00885             <span class="keywordflow">if</span>(uip_is_addr_mcast(&amp;<a class="code" href="a01929.html#gaf966537cf73ee5973da59bba6b21b731" title="Pointer to IP header.">UIP_IP_BUF</a>-&gt;destipaddr)) {
<a name="l00886"></a>00886               <span class="keywordflow">return</span> 1;
<a name="l00887"></a>00887             }
<a name="l00888"></a>00888           <span class="keywordflow">case</span> 0x80:
<a name="l00889"></a>00889             <a class="code" href="a01929.html#ga1e39f07d91a68d158d653251fb1c98c3" title="Send an icmpv6 error message.">uip_icmp6_error_output</a>(<a class="code" href="a01929.html#ga8d80ba426cf5f5d177e7464c8076b62a" title="ip6 header bad">ICMP6_PARAM_PROB</a>, <a class="code" href="a01929.html#gaefd8dedadd9588644c52d2fbe53c012e" title="unrecognized option">ICMP6_PARAMPROB_OPTION</a>,
<a name="l00890"></a>00890                              (uint32_t)UIP_IPH_LEN + <a class="code" href="a01816.html#ga0c63b80e0f8038403df5fee2bac3aab8" title="The length of the extension headers.">uip_ext_len</a> + <a class="code" href="a01929.html#ga3612c8a7e64e9863f20b27e4f3def660" title="length of the header options read">uip_ext_opt_offset</a>);
<a name="l00891"></a>00891             <span class="keywordflow">return</span> 2;
<a name="l00892"></a>00892         }
<a name="l00893"></a>00893         <span class="comment">/* in the cases were we did not discard, update ext_opt* */</span>
<a name="l00894"></a>00894         <a class="code" href="a01929.html#ga3612c8a7e64e9863f20b27e4f3def660" title="length of the header options read">uip_ext_opt_offset</a> += UIP_EXT_HDR_OPT_BUF-&gt;len + 2;
<a name="l00895"></a>00895         <span class="keywordflow">break</span>;
<a name="l00896"></a>00896     }
<a name="l00897"></a>00897   }
<a name="l00898"></a>00898   <span class="keywordflow">return</span> 0;
<a name="l00899"></a>00899 }
<a name="l00900"></a>00900 
<a name="l00901"></a>00901 
<a name="l00902"></a>00902 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00903"></a>00903 <span class="keywordtype">void</span>
<a name="l00904"></a><a class="code" href="a01929.html#ga4c90e268d83fc6cd9cd78bfa435b8140">00904</a> <a class="code" href="a01926.html#ga4c90e268d83fc6cd9cd78bfa435b8140" title="process the options within a hop by hop or destination option header">uip_process</a>(uint8_t flag)
<a name="l00905"></a>00905 {
<a name="l00906"></a>00906 <span class="preprocessor">#if UIP_TCP</span>
<a name="l00907"></a>00907 <span class="preprocessor"></span>  <span class="keyword">register</span> <span class="keyword">struct </span>uip_conn *uip_connr = <a class="code" href="a01926.html#ga788ffac72342f6172343d7f8099cbe1a" title="Pointer to the current TCP connection.">uip_conn</a>;
<a name="l00908"></a>00908 <span class="preprocessor">#endif </span><span class="comment">/* UIP_TCP */</span>
<a name="l00909"></a>00909 <span class="preprocessor">#if UIP_UDP</span>
<a name="l00910"></a>00910 <span class="preprocessor"></span>  <span class="keywordflow">if</span>(flag == UIP_UDP_SEND_CONN) {
<a name="l00911"></a>00911     <span class="keywordflow">goto</span> udp_send;
<a name="l00912"></a>00912   }
<a name="l00913"></a>00913 <span class="preprocessor">#endif </span><span class="comment">/* UIP_UDP */</span>
<a name="l00914"></a>00914   uip_sappdata = <a class="code" href="a01926.html#ga561b8eda32e059d4e7397f776268cc63" title="Pointer to the application data in the packet buffer.">uip_appdata</a> = &amp;uip_buf[UIP_IPTCPH_LEN + <a class="code" href="a01828.html#gae6f4a2453dbd8bc60e6a82774552366a" title="The link level header length.">UIP_LLH_LEN</a>];
<a name="l00915"></a>00915    
<a name="l00916"></a>00916   <span class="comment">/* Check if we were invoked because of a poll request for a</span>
<a name="l00917"></a>00917 <span class="comment">     particular connection. */</span>
<a name="l00918"></a>00918   <span class="keywordflow">if</span>(flag == UIP_POLL_REQUEST) {
<a name="l00919"></a>00919 <span class="preprocessor">#if UIP_TCP</span>
<a name="l00920"></a>00920 <span class="preprocessor"></span>    <span class="keywordflow">if</span>((uip_connr-&gt;<a class="code" href="a00098.html#aec4787356d50d91abe5b27d472abe630" title="TCP state and flags.">tcpstateflags</a> &amp; UIP_TS_MASK) == UIP_ESTABLISHED &amp;&amp;
<a name="l00921"></a>00921        !uip_outstanding(uip_connr)) {
<a name="l00922"></a>00922       uip_flags = UIP_POLL;
<a name="l00923"></a>00923       <a class="code" href="a01808.html#ga41aa744caa46913b3b3aedb2a4e78546" title="The name of the application function that uIP should call in response to TCP/IP events.">UIP_APPCALL</a>();
<a name="l00924"></a>00924       <span class="keywordflow">goto</span> appsend;
<a name="l00925"></a>00925 <span class="preprocessor">#if UIP_ACTIVE_OPEN</span>
<a name="l00926"></a>00926 <span class="preprocessor"></span>    } <span class="keywordflow">else</span> <span class="keywordflow">if</span>((uip_connr-&gt;<a class="code" href="a00098.html#aec4787356d50d91abe5b27d472abe630" title="TCP state and flags.">tcpstateflags</a> &amp; UIP_TS_MASK) == UIP_SYN_SENT) {
<a name="l00927"></a>00927       <span class="comment">/* In the SYN_SENT state, we retransmit out SYN. */</span>
<a name="l00928"></a>00928       UIP_TCP_BUF-&gt;flags = 0;
<a name="l00929"></a>00929       <span class="keywordflow">goto</span> tcp_send_syn;
<a name="l00930"></a>00930 <span class="preprocessor">#endif </span><span class="comment">/* UIP_ACTIVE_OPEN */</span>
<a name="l00931"></a>00931     }
<a name="l00932"></a>00932     <span class="keywordflow">goto</span> drop;
<a name="l00933"></a>00933 <span class="preprocessor">#endif </span><span class="comment">/* UIP_TCP */</span>
<a name="l00934"></a>00934     <span class="comment">/* Check if we were invoked because of the perodic timer fireing. */</span>
<a name="l00935"></a>00935   } <span class="keywordflow">else</span> <span class="keywordflow">if</span>(flag == UIP_TIMER) {
<a name="l00936"></a>00936     <span class="comment">/* Reset the length variables. */</span>
<a name="l00937"></a>00937 <span class="preprocessor">#if UIP_TCP</span>
<a name="l00938"></a>00938 <span class="preprocessor"></span>    <a class="code" href="a01926.html#ga72af00d45662ba0dc2ba3781a556e25b" title="The length of the packet in the uip_buf buffer.">uip_len</a> = 0;
<a name="l00939"></a>00939     uip_slen = 0;
<a name="l00940"></a>00940     
<a name="l00941"></a>00941     <span class="comment">/* Increase the initial sequence number. */</span>
<a name="l00942"></a>00942     <span class="keywordflow">if</span>(++iss[3] == 0) {
<a name="l00943"></a>00943       <span class="keywordflow">if</span>(++iss[2] == 0) {
<a name="l00944"></a>00944         <span class="keywordflow">if</span>(++iss[1] == 0) {
<a name="l00945"></a>00945           ++iss[0];
<a name="l00946"></a>00946         }
<a name="l00947"></a>00947       }
<a name="l00948"></a>00948     }
<a name="l00949"></a>00949     
<a name="l00950"></a>00950     <span class="comment">/*</span>
<a name="l00951"></a>00951 <span class="comment">     * Check if the connection is in a state in which we simply wait</span>
<a name="l00952"></a>00952 <span class="comment">     * for the connection to time out. If so, we increase the</span>
<a name="l00953"></a>00953 <span class="comment">     * connection&#39;s timer and remove the connection if it times</span>
<a name="l00954"></a>00954 <span class="comment">     * out.</span>
<a name="l00955"></a>00955 <span class="comment">     */</span>
<a name="l00956"></a>00956     <span class="keywordflow">if</span>(uip_connr-&gt;<a class="code" href="a00098.html#aec4787356d50d91abe5b27d472abe630" title="TCP state and flags.">tcpstateflags</a> == UIP_TIME_WAIT ||
<a name="l00957"></a>00957        uip_connr-&gt;<a class="code" href="a00098.html#aec4787356d50d91abe5b27d472abe630" title="TCP state and flags.">tcpstateflags</a> == UIP_FIN_WAIT_2) {
<a name="l00958"></a>00958       ++(uip_connr-&gt;<a class="code" href="a00098.html#a2d0c3e645bbae89194856aa5a8f49e4d" title="The retransmission timer.">timer</a>);
<a name="l00959"></a>00959       <span class="keywordflow">if</span>(uip_connr-&gt;<a class="code" href="a00098.html#a2d0c3e645bbae89194856aa5a8f49e4d" title="The retransmission timer.">timer</a> == <a class="code" href="a01824.html#ga2bc3b489923793759526a3181eb667fa" title="How long a connection should stay in the TIME_WAIT state.">UIP_TIME_WAIT_TIMEOUT</a>) {
<a name="l00960"></a>00960         uip_connr-&gt;<a class="code" href="a00098.html#aec4787356d50d91abe5b27d472abe630" title="TCP state and flags.">tcpstateflags</a> = UIP_CLOSED;
<a name="l00961"></a>00961       }
<a name="l00962"></a>00962     } <span class="keywordflow">else</span> <span class="keywordflow">if</span>(uip_connr-&gt;<a class="code" href="a00098.html#aec4787356d50d91abe5b27d472abe630" title="TCP state and flags.">tcpstateflags</a> != UIP_CLOSED) {
<a name="l00963"></a>00963       <span class="comment">/*</span>
<a name="l00964"></a>00964 <span class="comment">       * If the connection has outstanding data, we increase the</span>
<a name="l00965"></a>00965 <span class="comment">       * connection&#39;s timer and see if it has reached the RTO value</span>
<a name="l00966"></a>00966 <span class="comment">       * in which case we retransmit.</span>
<a name="l00967"></a>00967 <span class="comment">       */</span>
<a name="l00968"></a>00968       <span class="keywordflow">if</span>(uip_outstanding(uip_connr)) {
<a name="l00969"></a>00969         <span class="keywordflow">if</span>(uip_connr-&gt;<a class="code" href="a00098.html#a2d0c3e645bbae89194856aa5a8f49e4d" title="The retransmission timer.">timer</a>-- == 0) {
<a name="l00970"></a>00970           <span class="keywordflow">if</span>(uip_connr-&gt;<a class="code" href="a00098.html#a974df0fa0057819fd67109d9f8f1beeb" title="The number of retransmissions for the last segment sent.">nrtx</a> == <a class="code" href="a01824.html#ga67cf1e0d2324c93f332c1f020c0fe8b3" title="The maximum number of times a segment should be retransmitted before the connection should be aborted...">UIP_MAXRTX</a> ||
<a name="l00971"></a>00971              ((uip_connr-&gt;<a class="code" href="a00098.html#aec4787356d50d91abe5b27d472abe630" title="TCP state and flags.">tcpstateflags</a> == UIP_SYN_SENT ||
<a name="l00972"></a>00972                uip_connr-&gt;<a class="code" href="a00098.html#aec4787356d50d91abe5b27d472abe630" title="TCP state and flags.">tcpstateflags</a> == UIP_SYN_RCVD) &amp;&amp;
<a name="l00973"></a>00973               uip_connr-&gt;<a class="code" href="a00098.html#a974df0fa0057819fd67109d9f8f1beeb" title="The number of retransmissions for the last segment sent.">nrtx</a> == <a class="code" href="a01824.html#ga24aa5bc36939cc9a0833e1df01478a7e" title="The maximum number of times a SYN segment should be retransmitted before a connection request should ...">UIP_MAXSYNRTX</a>)) {
<a name="l00974"></a>00974             uip_connr-&gt;<a class="code" href="a00098.html#aec4787356d50d91abe5b27d472abe630" title="TCP state and flags.">tcpstateflags</a> = UIP_CLOSED;
<a name="l00975"></a>00975                   
<a name="l00976"></a>00976             <span class="comment">/*</span>
<a name="l00977"></a>00977 <span class="comment">             * We call UIP_APPCALL() with uip_flags set to</span>
<a name="l00978"></a>00978 <span class="comment">             * UIP_TIMEDOUT to inform the application that the</span>
<a name="l00979"></a>00979 <span class="comment">             * connection has timed out.</span>
<a name="l00980"></a>00980 <span class="comment">             */</span>
<a name="l00981"></a>00981             uip_flags = UIP_TIMEDOUT;
<a name="l00982"></a>00982             <a class="code" href="a01808.html#ga41aa744caa46913b3b3aedb2a4e78546" title="The name of the application function that uIP should call in response to TCP/IP events.">UIP_APPCALL</a>();
<a name="l00983"></a>00983                   
<a name="l00984"></a>00984             <span class="comment">/* We also send a reset packet to the remote host. */</span>
<a name="l00985"></a>00985             UIP_TCP_BUF-&gt;flags = TCP_RST | TCP_ACK;
<a name="l00986"></a>00986             <span class="keywordflow">goto</span> tcp_send_nodata;
<a name="l00987"></a>00987           }
<a name="l00988"></a>00988                
<a name="l00989"></a>00989           <span class="comment">/* Exponential backoff. */</span>
<a name="l00990"></a>00990           uip_connr-&gt;<a class="code" href="a00098.html#a2d0c3e645bbae89194856aa5a8f49e4d" title="The retransmission timer.">timer</a> = <a class="code" href="a01824.html#ga15de27b044603284f68db05a378235a7" title="The initial retransmission timeout counted in timer pulses.">UIP_RTO</a> &lt;&lt; (uip_connr-&gt;<a class="code" href="a00098.html#a974df0fa0057819fd67109d9f8f1beeb" title="The number of retransmissions for the last segment sent.">nrtx</a> &gt; 4?
<a name="l00991"></a>00991                                          4:
<a name="l00992"></a>00992                                          uip_connr-&gt;<a class="code" href="a00098.html#a974df0fa0057819fd67109d9f8f1beeb" title="The number of retransmissions for the last segment sent.">nrtx</a>);
<a name="l00993"></a>00993           ++(uip_connr-&gt;<a class="code" href="a00098.html#a974df0fa0057819fd67109d9f8f1beeb" title="The number of retransmissions for the last segment sent.">nrtx</a>);
<a name="l00994"></a>00994                
<a name="l00995"></a>00995           <span class="comment">/*</span>
<a name="l00996"></a>00996 <span class="comment">           * Ok, so we need to retransmit. We do this differently</span>
<a name="l00997"></a>00997 <span class="comment">           * depending on which state we are in. In ESTABLISHED, we</span>
<a name="l00998"></a>00998 <span class="comment">           * call upon the application so that it may prepare the</span>
<a name="l00999"></a>00999 <span class="comment">           * data for the retransmit. In SYN_RCVD, we resend the</span>
<a name="l01000"></a>01000 <span class="comment">           * SYNACK that we sent earlier and in LAST_ACK we have to</span>
<a name="l01001"></a>01001 <span class="comment">           * retransmit our FINACK.</span>
<a name="l01002"></a>01002 <span class="comment">           */</span>
<a name="l01003"></a>01003           <a class="code" href="a01926.html#ga9c0814ed491fa452ec97910c0728d410" title="The uIP TCP/IP statistics.">UIP_STAT</a>(++uip_stat.tcp.rexmit);
<a name="l01004"></a>01004           <span class="keywordflow">switch</span>(uip_connr-&gt;<a class="code" href="a00098.html#aec4787356d50d91abe5b27d472abe630" title="TCP state and flags.">tcpstateflags</a> &amp; UIP_TS_MASK) {
<a name="l01005"></a>01005             <span class="keywordflow">case</span> UIP_SYN_RCVD:
<a name="l01006"></a>01006               <span class="comment">/* In the SYN_RCVD state, we should retransmit our SYNACK. */</span>
<a name="l01007"></a>01007               <span class="keywordflow">goto</span> tcp_send_synack;
<a name="l01008"></a>01008                      
<a name="l01009"></a>01009 <span class="preprocessor">#if UIP_ACTIVE_OPEN</span>
<a name="l01010"></a>01010 <span class="preprocessor"></span>            <span class="keywordflow">case</span> UIP_SYN_SENT:
<a name="l01011"></a>01011               <span class="comment">/* In the SYN_SENT state, we retransmit out SYN. */</span>
<a name="l01012"></a>01012               UIP_TCP_BUF-&gt;flags = 0;
<a name="l01013"></a>01013               <span class="keywordflow">goto</span> tcp_send_syn;
<a name="l01014"></a>01014 <span class="preprocessor">#endif </span><span class="comment">/* UIP_ACTIVE_OPEN */</span>
<a name="l01015"></a>01015                      
<a name="l01016"></a>01016             <span class="keywordflow">case</span> UIP_ESTABLISHED:
<a name="l01017"></a>01017               <span class="comment">/*</span>
<a name="l01018"></a>01018 <span class="comment">               * In the ESTABLISHED state, we call upon the application</span>
<a name="l01019"></a>01019 <span class="comment">               * to do the actual retransmit after which we jump into</span>
<a name="l01020"></a>01020 <span class="comment">               * the code for sending out the packet (the apprexmit</span>
<a name="l01021"></a>01021 <span class="comment">               * label).</span>
<a name="l01022"></a>01022 <span class="comment">               */</span>
<a name="l01023"></a>01023               uip_flags = UIP_REXMIT;
<a name="l01024"></a>01024               <a class="code" href="a01808.html#ga41aa744caa46913b3b3aedb2a4e78546" title="The name of the application function that uIP should call in response to TCP/IP events.">UIP_APPCALL</a>();
<a name="l01025"></a>01025               <span class="keywordflow">goto</span> apprexmit;
<a name="l01026"></a>01026                      
<a name="l01027"></a>01027             <span class="keywordflow">case</span> UIP_FIN_WAIT_1:
<a name="l01028"></a>01028             <span class="keywordflow">case</span> UIP_CLOSING:
<a name="l01029"></a>01029             <span class="keywordflow">case</span> UIP_LAST_ACK:
<a name="l01030"></a>01030               <span class="comment">/* In all these states we should retransmit a FINACK. */</span>
<a name="l01031"></a>01031               <span class="keywordflow">goto</span> tcp_send_finack;
<a name="l01032"></a>01032           }
<a name="l01033"></a>01033         }
<a name="l01034"></a>01034       } <span class="keywordflow">else</span> <span class="keywordflow">if</span>((uip_connr-&gt;<a class="code" href="a00098.html#aec4787356d50d91abe5b27d472abe630" title="TCP state and flags.">tcpstateflags</a> &amp; UIP_TS_MASK) == UIP_ESTABLISHED) {
<a name="l01035"></a>01035         <span class="comment">/*</span>
<a name="l01036"></a>01036 <span class="comment">         * If there was no need for a retransmission, we poll the</span>
<a name="l01037"></a>01037 <span class="comment">         * application for new data.</span>
<a name="l01038"></a>01038 <span class="comment">         */</span>
<a name="l01039"></a>01039         uip_flags = UIP_POLL;
<a name="l01040"></a>01040         <a class="code" href="a01808.html#ga41aa744caa46913b3b3aedb2a4e78546" title="The name of the application function that uIP should call in response to TCP/IP events.">UIP_APPCALL</a>();
<a name="l01041"></a>01041         <span class="keywordflow">goto</span> appsend;
<a name="l01042"></a>01042       }
<a name="l01043"></a>01043     }
<a name="l01044"></a>01044     <span class="keywordflow">goto</span> drop;
<a name="l01045"></a>01045 <span class="preprocessor">#endif </span><span class="comment">/* UIP_TCP */</span>
<a name="l01046"></a>01046   }
<a name="l01047"></a>01047 <span class="preprocessor">#if UIP_UDP</span>
<a name="l01048"></a>01048 <span class="preprocessor"></span>  <span class="keywordflow">if</span>(flag == UIP_UDP_TIMER) {
<a name="l01049"></a>01049     <span class="keywordflow">if</span>(uip_udp_conn-&gt;<a class="code" href="a00122.html#accfeb05db2d9ef4702f6b20a12791dcf" title="The local port number in network byte order.">lport</a> != 0) {
<a name="l01050"></a>01050       uip_conn = <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>;
<a name="l01051"></a>01051       uip_sappdata = <a class="code" href="a01926.html#ga561b8eda32e059d4e7397f776268cc63" title="Pointer to the application data in the packet buffer.">uip_appdata</a> = &amp;uip_buf[UIP_IPUDPH_LEN + <a class="code" href="a01828.html#gae6f4a2453dbd8bc60e6a82774552366a" title="The link level header length.">UIP_LLH_LEN</a>];
<a name="l01052"></a>01052       <a class="code" href="a01926.html#ga72af00d45662ba0dc2ba3781a556e25b" title="The length of the packet in the uip_buf buffer.">uip_len</a> = uip_slen = 0;
<a name="l01053"></a>01053       uip_flags = UIP_POLL;
<a name="l01054"></a>01054       UIP_UDP_APPCALL();
<a name="l01055"></a>01055       <span class="keywordflow">goto</span> udp_send;
<a name="l01056"></a>01056     } <span class="keywordflow">else</span> {
<a name="l01057"></a>01057       <span class="keywordflow">goto</span> drop;
<a name="l01058"></a>01058     }
<a name="l01059"></a>01059   }
<a name="l01060"></a>01060 <span class="preprocessor">#endif </span><span class="comment">/* UIP_UDP */</span>
<a name="l01061"></a>01061 
<a name="l01062"></a>01062   
<a name="l01063"></a>01063   <span class="comment">/* This is where the input processing starts. */</span>
<a name="l01064"></a>01064   <a class="code" href="a01926.html#ga9c0814ed491fa452ec97910c0728d410" title="The uIP TCP/IP statistics.">UIP_STAT</a>(++uip_stat.ip.recv);
<a name="l01065"></a>01065    
<a name="l01066"></a>01066   <span class="comment">/* Start of IP input header processing code. */</span>
<a name="l01067"></a>01067    
<a name="l01068"></a>01068   <span class="comment">/* Check validity of the IP header. */</span>
<a name="l01069"></a>01069   <span class="keywordflow">if</span>((<a class="code" href="a01929.html#gaf966537cf73ee5973da59bba6b21b731" title="Pointer to IP header.">UIP_IP_BUF</a>-&gt;vtc &amp; 0xf0) != 0x60)  { <span class="comment">/* IP version and header length. */</span>
<a name="l01070"></a>01070     <a class="code" href="a01926.html#ga9c0814ed491fa452ec97910c0728d410" title="The uIP TCP/IP statistics.">UIP_STAT</a>(++uip_stat.ip.drop);
<a name="l01071"></a>01071     <a class="code" href="a01926.html#ga9c0814ed491fa452ec97910c0728d410" title="The uIP TCP/IP statistics.">UIP_STAT</a>(++uip_stat.ip.vhlerr);
<a name="l01072"></a>01072     UIP_LOG(<span class="stringliteral">&quot;ipv6: invalid version.&quot;</span>);
<a name="l01073"></a>01073     <span class="keywordflow">goto</span> drop;
<a name="l01074"></a>01074   }
<a name="l01075"></a>01075   <span class="comment">/*</span>
<a name="l01076"></a>01076 <span class="comment">   * Check the size of the packet. If the size reported to us in</span>
<a name="l01077"></a>01077 <span class="comment">   * uip_len is smaller the size reported in the IP header, we assume</span>
<a name="l01078"></a>01078 <span class="comment">   * that the packet has been corrupted in transit. If the size of</span>
<a name="l01079"></a>01079 <span class="comment">   * uip_len is larger than the size reported in the IP packet header,</span>
<a name="l01080"></a>01080 <span class="comment">   * the packet has been padded and we set uip_len to the correct</span>
<a name="l01081"></a>01081 <span class="comment">   * value..</span>
<a name="l01082"></a>01082 <span class="comment">   */</span>
<a name="l01083"></a>01083    
<a name="l01084"></a>01084   <span class="keywordflow">if</span>((<a class="code" href="a01929.html#gaf966537cf73ee5973da59bba6b21b731" title="Pointer to IP header.">UIP_IP_BUF</a>-&gt;len[0] &lt;&lt; 8) + <a class="code" href="a01929.html#gaf966537cf73ee5973da59bba6b21b731" title="Pointer to IP header.">UIP_IP_BUF</a>-&gt;len[1] &lt;= <a class="code" href="a01926.html#ga72af00d45662ba0dc2ba3781a556e25b" title="The length of the packet in the uip_buf buffer.">uip_len</a>) {
<a name="l01085"></a>01085     <a class="code" href="a01926.html#ga72af00d45662ba0dc2ba3781a556e25b" title="The length of the packet in the uip_buf buffer.">uip_len</a> = (<a class="code" href="a01929.html#gaf966537cf73ee5973da59bba6b21b731" title="Pointer to IP header.">UIP_IP_BUF</a>-&gt;len[0] &lt;&lt; 8) + <a class="code" href="a01929.html#gaf966537cf73ee5973da59bba6b21b731" title="Pointer to IP header.">UIP_IP_BUF</a>-&gt;len[1] + UIP_IPH_LEN;
<a name="l01086"></a>01086     <span class="comment">/*</span>
<a name="l01087"></a>01087 <span class="comment">     * The length reported in the IPv6 header is the</span>
<a name="l01088"></a>01088 <span class="comment">     * length of the payload that follows the</span>
<a name="l01089"></a>01089 <span class="comment">     * header. However, uIP uses the uip_len variable</span>
<a name="l01090"></a>01090 <span class="comment">     * for holding the size of the entire packet,</span>
<a name="l01091"></a>01091 <span class="comment">     * including the IP header. For IPv4 this is not a</span>
<a name="l01092"></a>01092 <span class="comment">     * problem as the length field in the IPv4 header</span>
<a name="l01093"></a>01093 <span class="comment">     * contains the length of the entire packet. But</span>
<a name="l01094"></a>01094 <span class="comment">     * for IPv6 we need to add the size of the IPv6</span>
<a name="l01095"></a>01095 <span class="comment">     * header (40 bytes).</span>
<a name="l01096"></a>01096 <span class="comment">     */</span>
<a name="l01097"></a>01097   } <span class="keywordflow">else</span> {
<a name="l01098"></a>01098     UIP_LOG(<span class="stringliteral">&quot;ip: packet shorter than reported in IP header.&quot;</span>);
<a name="l01099"></a>01099     <span class="keywordflow">goto</span> drop;
<a name="l01100"></a>01100   }
<a name="l01101"></a>01101   
<a name="l01102"></a>01102   PRINTF(<span class="stringliteral">&quot;IPv6 packet received from &quot;</span>);
<a name="l01103"></a>01103   PRINT6ADDR(&amp;<a class="code" href="a01929.html#gaf966537cf73ee5973da59bba6b21b731" title="Pointer to IP header.">UIP_IP_BUF</a>-&gt;srcipaddr);
<a name="l01104"></a>01104   PRINTF(<span class="stringliteral">&quot; to &quot;</span>);
<a name="l01105"></a>01105   PRINT6ADDR(&amp;<a class="code" href="a01929.html#gaf966537cf73ee5973da59bba6b21b731" title="Pointer to IP header.">UIP_IP_BUF</a>-&gt;destipaddr);
<a name="l01106"></a>01106   PRINTF(<span class="stringliteral">&quot;\n&quot;</span>);
<a name="l01107"></a>01107 
<a name="l01108"></a>01108   <span class="keywordflow">if</span>(uip_is_addr_mcast(&amp;<a class="code" href="a01929.html#gaf966537cf73ee5973da59bba6b21b731" title="Pointer to IP header.">UIP_IP_BUF</a>-&gt;srcipaddr)){
<a name="l01109"></a>01109     <a class="code" href="a01926.html#ga9c0814ed491fa452ec97910c0728d410" title="The uIP TCP/IP statistics.">UIP_STAT</a>(++uip_stat.ip.drop);
<a name="l01110"></a>01110     PRINTF(<span class="stringliteral">&quot;Dropping packet, src is mcast\n&quot;</span>);
<a name="l01111"></a>01111     <span class="keywordflow">goto</span> drop;
<a name="l01112"></a>01112   }
<a name="l01113"></a>01113 
<a name="l01114"></a>01114 <span class="preprocessor">#if UIP_CONF_ROUTER</span>
<a name="l01115"></a>01115 <span class="preprocessor"></span>  <span class="comment">/*</span>
<a name="l01116"></a>01116 <span class="comment">   * Next header field processing. In IPv6, we can have extension headers,</span>
<a name="l01117"></a>01117 <span class="comment">   * if present, the Hop-by-Hop Option must be processed before forwarding</span>
<a name="l01118"></a>01118 <span class="comment">   * the packet.</span>
<a name="l01119"></a>01119 <span class="comment">   */</span>
<a name="l01120"></a>01120   <a class="code" href="a01929.html#ga6a2217b24bdcc949e5831fbfa139bc45" title="Type of the next header in IPv6 header or extension headers.">uip_next_hdr</a> = &amp;<a class="code" href="a01929.html#gaf966537cf73ee5973da59bba6b21b731" title="Pointer to IP header.">UIP_IP_BUF</a>-&gt;proto;
<a name="l01121"></a>01121   <a class="code" href="a01816.html#ga0c63b80e0f8038403df5fee2bac3aab8" title="The length of the extension headers.">uip_ext_len</a> = 0;
<a name="l01122"></a>01122   <a class="code" href="a01929.html#gafce90a5802ed54ef89b35951fb52d5a9" title="bitmap we use to record which IPv6 headers we have already seen">uip_ext_bitmap</a> = 0;
<a name="l01123"></a>01123   <span class="keywordflow">if</span>(*<a class="code" href="a01929.html#ga6a2217b24bdcc949e5831fbfa139bc45" title="Type of the next header in IPv6 header or extension headers.">uip_next_hdr</a> == UIP_PROTO_HBHO) {
<a name="l01124"></a>01124 <span class="preprocessor">#if UIP_CONF_IPV6_CHECKS</span>
<a name="l01125"></a>01125 <span class="preprocessor"></span>    <a class="code" href="a01929.html#gafce90a5802ed54ef89b35951fb52d5a9" title="bitmap we use to record which IPv6 headers we have already seen">uip_ext_bitmap</a> |= UIP_EXT_HDR_BITMAP_HBHO;
<a name="l01126"></a>01126 <span class="preprocessor">#endif </span><span class="comment">/*UIP_CONF_IPV6_CHECKS*/</span>
<a name="l01127"></a>01127     <span class="keywordflow">switch</span>(ext_hdr_options_process()) {
<a name="l01128"></a>01128       <span class="keywordflow">case</span> 0:
<a name="l01129"></a>01129         <span class="comment">/*continue*/</span>
<a name="l01130"></a>01130         <a class="code" href="a01929.html#ga6a2217b24bdcc949e5831fbfa139bc45" title="Type of the next header in IPv6 header or extension headers.">uip_next_hdr</a> = &amp;UIP_EXT_BUF-&gt;next;
<a name="l01131"></a>01131         <a class="code" href="a01816.html#ga0c63b80e0f8038403df5fee2bac3aab8" title="The length of the extension headers.">uip_ext_len</a> += (UIP_EXT_BUF-&gt;len &lt;&lt; 3) + 8;
<a name="l01132"></a>01132         <span class="keywordflow">break</span>;
<a name="l01133"></a>01133       <span class="keywordflow">case</span> 1:
<a name="l01134"></a>01134         <span class="comment">/*silently discard*/</span>
<a name="l01135"></a>01135         <span class="keywordflow">goto</span> drop;
<a name="l01136"></a>01136       <span class="keywordflow">case</span> 2:
<a name="l01137"></a>01137         <span class="comment">/* send icmp error message (created in ext_hdr_options_process)</span>
<a name="l01138"></a>01138 <span class="comment">         * and discard*/</span>
<a name="l01139"></a>01139         <span class="keywordflow">goto</span> send;
<a name="l01140"></a>01140     }
<a name="l01141"></a>01141   }
<a name="l01142"></a>01142 
<a name="l01143"></a>01143 
<a name="l01144"></a>01144   <span class="comment">/* TBD Some Parameter problem messages */</span>
<a name="l01145"></a>01145   <span class="keywordflow">if</span>(!<a class="code" href="a01929.html#ga015f9249ce301bc05616a89f0b6d6aab">uip_ds6_is_my_addr</a>(&amp;<a class="code" href="a01929.html#gaf966537cf73ee5973da59bba6b21b731" title="Pointer to IP header.">UIP_IP_BUF</a>-&gt;destipaddr) &amp;&amp;
<a name="l01146"></a>01146      !uip_ds6_is_my_maddr(&amp;<a class="code" href="a01929.html#gaf966537cf73ee5973da59bba6b21b731" title="Pointer to IP header.">UIP_IP_BUF</a>-&gt;destipaddr)) {
<a name="l01147"></a>01147     <span class="keywordflow">if</span>(!uip_is_addr_mcast(&amp;<a class="code" href="a01929.html#gaf966537cf73ee5973da59bba6b21b731" title="Pointer to IP header.">UIP_IP_BUF</a>-&gt;destipaddr) &amp;&amp;
<a name="l01148"></a>01148        !uip_is_addr_link_local(&amp;<a class="code" href="a01929.html#gaf966537cf73ee5973da59bba6b21b731" title="Pointer to IP header.">UIP_IP_BUF</a>-&gt;destipaddr) &amp;&amp;
<a name="l01149"></a>01149        !uip_is_addr_link_local(&amp;<a class="code" href="a01929.html#gaf966537cf73ee5973da59bba6b21b731" title="Pointer to IP header.">UIP_IP_BUF</a>-&gt;srcipaddr) &amp;&amp;
<a name="l01150"></a>01150        !uip_is_addr_unspecified(&amp;<a class="code" href="a01929.html#gaf966537cf73ee5973da59bba6b21b731" title="Pointer to IP header.">UIP_IP_BUF</a>-&gt;srcipaddr) &amp;&amp;
<a name="l01151"></a>01151        !uip_is_addr_loopback(&amp;<a class="code" href="a01929.html#gaf966537cf73ee5973da59bba6b21b731" title="Pointer to IP header.">UIP_IP_BUF</a>-&gt;destipaddr)) {
<a name="l01152"></a>01152 
<a name="l01153"></a>01153 
<a name="l01154"></a>01154       <span class="comment">/* Check MTU */</span>
<a name="l01155"></a>01155       <span class="keywordflow">if</span>(<a class="code" href="a01926.html#ga72af00d45662ba0dc2ba3781a556e25b" title="The length of the packet in the uip_buf buffer.">uip_len</a> &gt; <a class="code" href="a01822.html#gadeb506ec5eebfb9b32a6210eaa2ae38e" title="The maximum transmission unit at the IP Layer.">UIP_LINK_MTU</a>) {
<a name="l01156"></a>01156         <a class="code" href="a01929.html#ga1e39f07d91a68d158d653251fb1c98c3" title="Send an icmpv6 error message.">uip_icmp6_error_output</a>(<a class="code" href="a01929.html#ga5fb591c09385316c21ff48ca525377cc" title="packet too big">ICMP6_PACKET_TOO_BIG</a>, 0, <a class="code" href="a01822.html#gadeb506ec5eebfb9b32a6210eaa2ae38e" title="The maximum transmission unit at the IP Layer.">UIP_LINK_MTU</a>);
<a name="l01157"></a>01157         <a class="code" href="a01926.html#ga9c0814ed491fa452ec97910c0728d410" title="The uIP TCP/IP statistics.">UIP_STAT</a>(++uip_stat.ip.drop);
<a name="l01158"></a>01158         <span class="keywordflow">goto</span> send;
<a name="l01159"></a>01159       }
<a name="l01160"></a>01160       <span class="comment">/* Check Hop Limit */</span>
<a name="l01161"></a>01161       <span class="keywordflow">if</span>(<a class="code" href="a01929.html#gaf966537cf73ee5973da59bba6b21b731" title="Pointer to IP header.">UIP_IP_BUF</a>-&gt;ttl &lt;= 1) {
<a name="l01162"></a>01162         <a class="code" href="a01929.html#ga1e39f07d91a68d158d653251fb1c98c3" title="Send an icmpv6 error message.">uip_icmp6_error_output</a>(<a class="code" href="a01929.html#ga077f2445c09d34cea87ca9d435336c99" title="time exceeded">ICMP6_TIME_EXCEEDED</a>,
<a name="l01163"></a>01163                                <a class="code" href="a01929.html#gaff4b11555fb80f10e494578d350454a4" title="ttl==0 in transit">ICMP6_TIME_EXCEED_TRANSIT</a>, 0);
<a name="l01164"></a>01164         <a class="code" href="a01926.html#ga9c0814ed491fa452ec97910c0728d410" title="The uIP TCP/IP statistics.">UIP_STAT</a>(++uip_stat.ip.drop);
<a name="l01165"></a>01165         <span class="keywordflow">goto</span> send;
<a name="l01166"></a>01166       }
<a name="l01167"></a>01167 
<a name="l01168"></a>01168 <span class="preprocessor">#if UIP_CONF_IPV6_RPL</span>
<a name="l01169"></a>01169 <span class="preprocessor"></span>      rpl_update_header_empty();
<a name="l01170"></a>01170 <span class="preprocessor">#endif </span><span class="comment">/* UIP_CONF_IPV6_RPL */</span>
<a name="l01171"></a>01171 
<a name="l01172"></a>01172       <a class="code" href="a01929.html#gaf966537cf73ee5973da59bba6b21b731" title="Pointer to IP header.">UIP_IP_BUF</a>-&gt;ttl = <a class="code" href="a01929.html#gaf966537cf73ee5973da59bba6b21b731" title="Pointer to IP header.">UIP_IP_BUF</a>-&gt;ttl - 1;
<a name="l01173"></a>01173       PRINTF(<span class="stringliteral">&quot;Forwarding packet to &quot;</span>);
<a name="l01174"></a>01174       PRINT6ADDR(&amp;<a class="code" href="a01929.html#gaf966537cf73ee5973da59bba6b21b731" title="Pointer to IP header.">UIP_IP_BUF</a>-&gt;destipaddr);
<a name="l01175"></a>01175       PRINTF(<span class="stringliteral">&quot;\n&quot;</span>);
<a name="l01176"></a>01176       <a class="code" href="a01926.html#ga9c0814ed491fa452ec97910c0728d410" title="The uIP TCP/IP statistics.">UIP_STAT</a>(++uip_stat.ip.forwarded);
<a name="l01177"></a>01177       <span class="keywordflow">goto</span> send;
<a name="l01178"></a>01178     } <span class="keywordflow">else</span> {
<a name="l01179"></a>01179       <span class="keywordflow">if</span>((uip_is_addr_link_local(&amp;<a class="code" href="a01929.html#gaf966537cf73ee5973da59bba6b21b731" title="Pointer to IP header.">UIP_IP_BUF</a>-&gt;srcipaddr)) &amp;&amp;
<a name="l01180"></a>01180          (!uip_is_addr_unspecified(&amp;<a class="code" href="a01929.html#gaf966537cf73ee5973da59bba6b21b731" title="Pointer to IP header.">UIP_IP_BUF</a>-&gt;srcipaddr)) &amp;&amp;
<a name="l01181"></a>01181          (!uip_is_addr_loopback(&amp;<a class="code" href="a01929.html#gaf966537cf73ee5973da59bba6b21b731" title="Pointer to IP header.">UIP_IP_BUF</a>-&gt;destipaddr)) &amp;&amp;
<a name="l01182"></a>01182          (!uip_is_addr_mcast(&amp;<a class="code" href="a01929.html#gaf966537cf73ee5973da59bba6b21b731" title="Pointer to IP header.">UIP_IP_BUF</a>-&gt;destipaddr)) &amp;&amp;
<a name="l01183"></a>01183          (!uip_ds6_is_addr_onlink((&amp;<a class="code" href="a01929.html#gaf966537cf73ee5973da59bba6b21b731" title="Pointer to IP header.">UIP_IP_BUF</a>-&gt;destipaddr)))) {
<a name="l01184"></a>01184         PRINTF(<span class="stringliteral">&quot;LL source address with off link destination, dropping\n&quot;</span>);
<a name="l01185"></a>01185         <a class="code" href="a01929.html#ga1e39f07d91a68d158d653251fb1c98c3" title="Send an icmpv6 error message.">uip_icmp6_error_output</a>(<a class="code" href="a01929.html#ga24a92fa6c87bf49df9c7afbf3b7137f2" title="dest unreachable">ICMP6_DST_UNREACH</a>,
<a name="l01186"></a>01186                                <a class="code" href="a01929.html#ga4d4a04bb3d37647c35e2ab21fe5279c1" title="not a neighbor(obsolete)">ICMP6_DST_UNREACH_NOTNEIGHBOR</a>, 0);
<a name="l01187"></a>01187         <span class="keywordflow">goto</span> send;
<a name="l01188"></a>01188       }
<a name="l01189"></a>01189       PRINTF(<span class="stringliteral">&quot;Dropping packet, not for me and link local or multicast\n&quot;</span>);
<a name="l01190"></a>01190       <a class="code" href="a01926.html#ga9c0814ed491fa452ec97910c0728d410" title="The uIP TCP/IP statistics.">UIP_STAT</a>(++uip_stat.ip.drop);
<a name="l01191"></a>01191       <span class="keywordflow">goto</span> drop;
<a name="l01192"></a>01192     }
<a name="l01193"></a>01193   }
<a name="l01194"></a>01194 <span class="preprocessor">#else </span><span class="comment">/* UIP_CONF_ROUTER */</span>
<a name="l01195"></a>01195   <span class="keywordflow">if</span>(!<a class="code" href="a01929.html#ga015f9249ce301bc05616a89f0b6d6aab">uip_ds6_is_my_addr</a>(&amp;<a class="code" href="a01929.html#gaf966537cf73ee5973da59bba6b21b731" title="Pointer to IP header.">UIP_IP_BUF</a>-&gt;destipaddr) &amp;&amp;
<a name="l01196"></a>01196      !uip_ds6_is_my_maddr(&amp;<a class="code" href="a01929.html#gaf966537cf73ee5973da59bba6b21b731" title="Pointer to IP header.">UIP_IP_BUF</a>-&gt;destipaddr) &amp;&amp;
<a name="l01197"></a>01197      !uip_is_addr_mcast(&amp;<a class="code" href="a01929.html#gaf966537cf73ee5973da59bba6b21b731" title="Pointer to IP header.">UIP_IP_BUF</a>-&gt;destipaddr)) {
<a name="l01198"></a>01198     PRINTF(<span class="stringliteral">&quot;Dropping packet, not for me\n&quot;</span>);
<a name="l01199"></a>01199     <a class="code" href="a01926.html#ga9c0814ed491fa452ec97910c0728d410" title="The uIP TCP/IP statistics.">UIP_STAT</a>(++uip_stat.ip.drop);
<a name="l01200"></a>01200     <span class="keywordflow">goto</span> drop;
<a name="l01201"></a>01201   }
<a name="l01202"></a>01202 
<a name="l01203"></a>01203   <span class="comment">/*</span>
<a name="l01204"></a>01204 <span class="comment">   * Next header field processing. In IPv6, we can have extension headers,</span>
<a name="l01205"></a>01205 <span class="comment">   * they are processed here</span>
<a name="l01206"></a>01206 <span class="comment">   */</span>
<a name="l01207"></a>01207   <a class="code" href="a01929.html#ga6a2217b24bdcc949e5831fbfa139bc45" title="Type of the next header in IPv6 header or extension headers.">uip_next_hdr</a> = &amp;<a class="code" href="a01929.html#gaf966537cf73ee5973da59bba6b21b731" title="Pointer to IP header.">UIP_IP_BUF</a>-&gt;proto;
<a name="l01208"></a>01208   <a class="code" href="a01816.html#ga0c63b80e0f8038403df5fee2bac3aab8" title="The length of the extension headers.">uip_ext_len</a> = 0;
<a name="l01209"></a>01209   <a class="code" href="a01929.html#gafce90a5802ed54ef89b35951fb52d5a9" title="bitmap we use to record which IPv6 headers we have already seen">uip_ext_bitmap</a> = 0;
<a name="l01210"></a>01210 <span class="preprocessor">#endif </span><span class="comment">/* UIP_CONF_ROUTER */</span>
<a name="l01211"></a>01211 
<a name="l01212"></a>01212   <span class="keywordflow">while</span>(1) {
<a name="l01213"></a>01213     <span class="keywordflow">switch</span>(*<a class="code" href="a01929.html#ga6a2217b24bdcc949e5831fbfa139bc45" title="Type of the next header in IPv6 header or extension headers.">uip_next_hdr</a>){
<a name="l01214"></a>01214 <span class="preprocessor">#if UIP_TCP</span>
<a name="l01215"></a>01215 <span class="preprocessor"></span>      <span class="keywordflow">case</span> UIP_PROTO_TCP:
<a name="l01216"></a>01216         <span class="comment">/* TCP, for both IPv4 and IPv6 */</span>
<a name="l01217"></a>01217         <span class="keywordflow">goto</span> tcp_input;
<a name="l01218"></a>01218 <span class="preprocessor">#endif </span><span class="comment">/* UIP_TCP */</span>
<a name="l01219"></a>01219 <span class="preprocessor">#if UIP_UDP</span>
<a name="l01220"></a>01220 <span class="preprocessor"></span>      <span class="keywordflow">case</span> UIP_PROTO_UDP:
<a name="l01221"></a>01221         <span class="comment">/* UDP, for both IPv4 and IPv6 */</span>
<a name="l01222"></a>01222         <span class="keywordflow">goto</span> udp_input;
<a name="l01223"></a>01223 <span class="preprocessor">#endif </span><span class="comment">/* UIP_UDP */</span>
<a name="l01224"></a>01224       <span class="keywordflow">case</span> UIP_PROTO_ICMP6:
<a name="l01225"></a>01225         <span class="comment">/* ICMPv6 */</span>
<a name="l01226"></a>01226         <span class="keywordflow">goto</span> icmp6_input;
<a name="l01227"></a>01227       <span class="keywordflow">case</span> UIP_PROTO_HBHO:
<a name="l01228"></a>01228         PRINTF(<span class="stringliteral">&quot;Processing hbh header\n&quot;</span>);
<a name="l01229"></a>01229         <span class="comment">/* Hop by hop option header */</span>
<a name="l01230"></a>01230 <span class="preprocessor">#if UIP_CONF_IPV6_CHECKS</span>
<a name="l01231"></a>01231 <span class="preprocessor"></span>        <span class="comment">/* Hop by hop option header. If we saw one HBH already, drop */</span>
<a name="l01232"></a>01232         <span class="keywordflow">if</span>(<a class="code" href="a01929.html#gafce90a5802ed54ef89b35951fb52d5a9" title="bitmap we use to record which IPv6 headers we have already seen">uip_ext_bitmap</a> &amp; UIP_EXT_HDR_BITMAP_HBHO) {
<a name="l01233"></a>01233           <span class="keywordflow">goto</span> bad_hdr;
<a name="l01234"></a>01234         } <span class="keywordflow">else</span> {
<a name="l01235"></a>01235           <a class="code" href="a01929.html#gafce90a5802ed54ef89b35951fb52d5a9" title="bitmap we use to record which IPv6 headers we have already seen">uip_ext_bitmap</a> |= UIP_EXT_HDR_BITMAP_HBHO;
<a name="l01236"></a>01236         }
<a name="l01237"></a>01237 <span class="preprocessor">#endif </span><span class="comment">/*UIP_CONF_IPV6_CHECKS*/</span>
<a name="l01238"></a>01238         <span class="keywordflow">switch</span>(ext_hdr_options_process()) {
<a name="l01239"></a>01239           <span class="keywordflow">case</span> 0:
<a name="l01240"></a>01240             <span class="comment">/*continue*/</span>
<a name="l01241"></a>01241             <a class="code" href="a01929.html#ga6a2217b24bdcc949e5831fbfa139bc45" title="Type of the next header in IPv6 header or extension headers.">uip_next_hdr</a> = &amp;UIP_EXT_BUF-&gt;next;
<a name="l01242"></a>01242             <a class="code" href="a01816.html#ga0c63b80e0f8038403df5fee2bac3aab8" title="The length of the extension headers.">uip_ext_len</a> += (UIP_EXT_BUF-&gt;len &lt;&lt; 3) + 8;
<a name="l01243"></a>01243             <span class="keywordflow">break</span>;
<a name="l01244"></a>01244           <span class="keywordflow">case</span> 1:
<a name="l01245"></a>01245             <span class="comment">/*silently discard*/</span>
<a name="l01246"></a>01246             <span class="keywordflow">goto</span> drop;
<a name="l01247"></a>01247           <span class="keywordflow">case</span> 2:
<a name="l01248"></a>01248             <span class="comment">/* send icmp error message (created in ext_hdr_options_process)</span>
<a name="l01249"></a>01249 <span class="comment">             * and discard*/</span>
<a name="l01250"></a>01250             <span class="keywordflow">goto</span> send;
<a name="l01251"></a>01251         }
<a name="l01252"></a>01252         <span class="keywordflow">break</span>;
<a name="l01253"></a>01253       <span class="keywordflow">case</span> UIP_PROTO_DESTO:
<a name="l01254"></a>01254 <span class="preprocessor">#if UIP_CONF_IPV6_CHECKS</span>
<a name="l01255"></a>01255 <span class="preprocessor"></span>        <span class="comment">/* Destination option header. if we saw two already, drop */</span>
<a name="l01256"></a>01256         PRINTF(<span class="stringliteral">&quot;Processing desto header\n&quot;</span>);
<a name="l01257"></a>01257         <span class="keywordflow">if</span>(<a class="code" href="a01929.html#gafce90a5802ed54ef89b35951fb52d5a9" title="bitmap we use to record which IPv6 headers we have already seen">uip_ext_bitmap</a> &amp; UIP_EXT_HDR_BITMAP_DESTO1) {
<a name="l01258"></a>01258           <span class="keywordflow">if</span>(<a class="code" href="a01929.html#gafce90a5802ed54ef89b35951fb52d5a9" title="bitmap we use to record which IPv6 headers we have already seen">uip_ext_bitmap</a> &amp; UIP_EXT_HDR_BITMAP_DESTO2) {
<a name="l01259"></a>01259             <span class="keywordflow">goto</span> bad_hdr;
<a name="l01260"></a>01260           } <span class="keywordflow">else</span>{
<a name="l01261"></a>01261             <a class="code" href="a01929.html#gafce90a5802ed54ef89b35951fb52d5a9" title="bitmap we use to record which IPv6 headers we have already seen">uip_ext_bitmap</a> |= UIP_EXT_HDR_BITMAP_DESTO2;
<a name="l01262"></a>01262           }
<a name="l01263"></a>01263         } <span class="keywordflow">else</span> {
<a name="l01264"></a>01264           <a class="code" href="a01929.html#gafce90a5802ed54ef89b35951fb52d5a9" title="bitmap we use to record which IPv6 headers we have already seen">uip_ext_bitmap</a> |= UIP_EXT_HDR_BITMAP_DESTO1;
<a name="l01265"></a>01265         }
<a name="l01266"></a>01266 <span class="preprocessor">#endif </span><span class="comment">/*UIP_CONF_IPV6_CHECKS*/</span>
<a name="l01267"></a>01267         <span class="keywordflow">switch</span>(ext_hdr_options_process()) {
<a name="l01268"></a>01268           <span class="keywordflow">case</span> 0:
<a name="l01269"></a>01269             <span class="comment">/*continue*/</span>
<a name="l01270"></a>01270             <a class="code" href="a01929.html#ga6a2217b24bdcc949e5831fbfa139bc45" title="Type of the next header in IPv6 header or extension headers.">uip_next_hdr</a> = &amp;UIP_EXT_BUF-&gt;next;
<a name="l01271"></a>01271             <a class="code" href="a01816.html#ga0c63b80e0f8038403df5fee2bac3aab8" title="The length of the extension headers.">uip_ext_len</a> += (UIP_EXT_BUF-&gt;len &lt;&lt; 3) + 8;
<a name="l01272"></a>01272             <span class="keywordflow">break</span>;
<a name="l01273"></a>01273           <span class="keywordflow">case</span> 1:
<a name="l01274"></a>01274             <span class="comment">/*silently discard*/</span>
<a name="l01275"></a>01275             <span class="keywordflow">goto</span> drop;
<a name="l01276"></a>01276           <span class="keywordflow">case</span> 2:
<a name="l01277"></a>01277             <span class="comment">/* send icmp error message (created in ext_hdr_options_process)</span>
<a name="l01278"></a>01278 <span class="comment">             * and discard*/</span>
<a name="l01279"></a>01279             <span class="keywordflow">goto</span> send;
<a name="l01280"></a>01280         }
<a name="l01281"></a>01281         <span class="keywordflow">break</span>;
<a name="l01282"></a>01282       <span class="keywordflow">case</span> UIP_PROTO_ROUTING:
<a name="l01283"></a>01283 <span class="preprocessor">#if UIP_CONF_IPV6_CHECKS</span>
<a name="l01284"></a>01284 <span class="preprocessor"></span>        <span class="comment">/* Routing header. If we saw one already, drop */</span>
<a name="l01285"></a>01285         <span class="keywordflow">if</span>(<a class="code" href="a01929.html#gafce90a5802ed54ef89b35951fb52d5a9" title="bitmap we use to record which IPv6 headers we have already seen">uip_ext_bitmap</a> &amp; UIP_EXT_HDR_BITMAP_ROUTING) {
<a name="l01286"></a>01286           <span class="keywordflow">goto</span> bad_hdr;
<a name="l01287"></a>01287         } <span class="keywordflow">else</span> {
<a name="l01288"></a>01288           <a class="code" href="a01929.html#gafce90a5802ed54ef89b35951fb52d5a9" title="bitmap we use to record which IPv6 headers we have already seen">uip_ext_bitmap</a> |= UIP_EXT_HDR_BITMAP_ROUTING;
<a name="l01289"></a>01289         }
<a name="l01290"></a>01290 <span class="preprocessor">#endif </span><span class="comment">/*UIP_CONF_IPV6_CHECKS*/</span>
<a name="l01291"></a>01291         <span class="comment">/*</span>
<a name="l01292"></a>01292 <span class="comment">         * Routing Header  length field is in units of 8 bytes, excluding</span>
<a name="l01293"></a>01293 <span class="comment">         * As per RFC2460 section 4.4, if routing type is unrecognized:</span>
<a name="l01294"></a>01294 <span class="comment">         * if segments left = 0, ignore the header</span>
<a name="l01295"></a>01295 <span class="comment">         * if segments left &gt; 0, discard packet and send icmp error pointing</span>
<a name="l01296"></a>01296 <span class="comment">         * to the routing type</span>
<a name="l01297"></a>01297 <span class="comment">         */</span>
<a name="l01298"></a>01298 
<a name="l01299"></a>01299         PRINTF(<span class="stringliteral">&quot;Processing Routing header\n&quot;</span>);
<a name="l01300"></a>01300         <span class="keywordflow">if</span>(UIP_ROUTING_BUF-&gt;seg_left &gt; 0) {
<a name="l01301"></a>01301           <a class="code" href="a01929.html#ga1e39f07d91a68d158d653251fb1c98c3" title="Send an icmpv6 error message.">uip_icmp6_error_output</a>(<a class="code" href="a01929.html#ga8d80ba426cf5f5d177e7464c8076b62a" title="ip6 header bad">ICMP6_PARAM_PROB</a>, <a class="code" href="a01929.html#gae1dd9cc2c5f466eeb157320e65faba79" title="erroneous header field">ICMP6_PARAMPROB_HEADER</a>, UIP_IPH_LEN + <a class="code" href="a01816.html#ga0c63b80e0f8038403df5fee2bac3aab8" title="The length of the extension headers.">uip_ext_len</a> + 2);
<a name="l01302"></a>01302           <a class="code" href="a01926.html#ga9c0814ed491fa452ec97910c0728d410" title="The uIP TCP/IP statistics.">UIP_STAT</a>(++uip_stat.ip.drop);
<a name="l01303"></a>01303           UIP_LOG(<span class="stringliteral">&quot;ip6: unrecognized routing type&quot;</span>);
<a name="l01304"></a>01304           <span class="keywordflow">goto</span> send;
<a name="l01305"></a>01305         }
<a name="l01306"></a>01306         <a class="code" href="a01929.html#ga6a2217b24bdcc949e5831fbfa139bc45" title="Type of the next header in IPv6 header or extension headers.">uip_next_hdr</a> = &amp;UIP_EXT_BUF-&gt;next;
<a name="l01307"></a>01307         <a class="code" href="a01816.html#ga0c63b80e0f8038403df5fee2bac3aab8" title="The length of the extension headers.">uip_ext_len</a> += (UIP_EXT_BUF-&gt;len &lt;&lt; 3) + 8;
<a name="l01308"></a>01308         <span class="keywordflow">break</span>;
<a name="l01309"></a>01309       <span class="keywordflow">case</span> UIP_PROTO_FRAG:
<a name="l01310"></a>01310         <span class="comment">/* Fragmentation header:call the reassembly function, then leave */</span>
<a name="l01311"></a>01311 <span class="preprocessor">#if UIP_CONF_IPV6_REASSEMBLY</span>
<a name="l01312"></a>01312 <span class="preprocessor"></span>        PRINTF(<span class="stringliteral">&quot;Processing frag header\n&quot;</span>);
<a name="l01313"></a>01313         <a class="code" href="a01926.html#ga72af00d45662ba0dc2ba3781a556e25b" title="The length of the packet in the uip_buf buffer.">uip_len</a> = uip_reass();
<a name="l01314"></a>01314         <span class="keywordflow">if</span>(<a class="code" href="a01926.html#ga72af00d45662ba0dc2ba3781a556e25b" title="The length of the packet in the uip_buf buffer.">uip_len</a> == 0) {
<a name="l01315"></a>01315           <span class="keywordflow">goto</span> drop;
<a name="l01316"></a>01316         }
<a name="l01317"></a>01317         <span class="keywordflow">if</span>(uip_reassflags &amp; UIP_REASS_FLAG_ERROR_MSG){
<a name="l01318"></a>01318           <span class="comment">/* we are not done with reassembly, this is an error message */</span>
<a name="l01319"></a>01319           <span class="keywordflow">goto</span> send;
<a name="l01320"></a>01320         }
<a name="l01321"></a>01321         <span class="comment">/*packet is reassembled, reset the next hdr to the beginning</span>
<a name="l01322"></a>01322 <span class="comment">           of the IP header and restart the parsing of the reassembled pkt*/</span>
<a name="l01323"></a>01323         PRINTF(<span class="stringliteral">&quot;Processing reassembled packet\n&quot;</span>);
<a name="l01324"></a>01324         <a class="code" href="a01816.html#ga0c63b80e0f8038403df5fee2bac3aab8" title="The length of the extension headers.">uip_ext_len</a> = 0;
<a name="l01325"></a>01325         <a class="code" href="a01929.html#gafce90a5802ed54ef89b35951fb52d5a9" title="bitmap we use to record which IPv6 headers we have already seen">uip_ext_bitmap</a> = 0;
<a name="l01326"></a>01326         <a class="code" href="a01929.html#ga6a2217b24bdcc949e5831fbfa139bc45" title="Type of the next header in IPv6 header or extension headers.">uip_next_hdr</a> = &amp;<a class="code" href="a01929.html#gaf966537cf73ee5973da59bba6b21b731" title="Pointer to IP header.">UIP_IP_BUF</a>-&gt;proto;
<a name="l01327"></a>01327         <span class="keywordflow">break</span>;
<a name="l01328"></a>01328 <span class="preprocessor">#else </span><span class="comment">/* UIP_CONF_IPV6_REASSEMBLY */</span>
<a name="l01329"></a>01329         <a class="code" href="a01926.html#ga9c0814ed491fa452ec97910c0728d410" title="The uIP TCP/IP statistics.">UIP_STAT</a>(++uip_stat.ip.drop);
<a name="l01330"></a>01330         <a class="code" href="a01926.html#ga9c0814ed491fa452ec97910c0728d410" title="The uIP TCP/IP statistics.">UIP_STAT</a>(++uip_stat.ip.fragerr);
<a name="l01331"></a>01331         UIP_LOG(<span class="stringliteral">&quot;ip: fragment dropped.&quot;</span>);
<a name="l01332"></a>01332         <span class="keywordflow">goto</span> drop;
<a name="l01333"></a>01333 <span class="preprocessor">#endif </span><span class="comment">/* UIP_CONF_IPV6_REASSEMBLY */</span>
<a name="l01334"></a>01334       <span class="keywordflow">case</span> UIP_PROTO_NONE:
<a name="l01335"></a>01335         <span class="keywordflow">goto</span> drop;
<a name="l01336"></a>01336       <span class="keywordflow">default</span>:
<a name="l01337"></a>01337         <span class="keywordflow">goto</span> bad_hdr;
<a name="l01338"></a>01338     }
<a name="l01339"></a>01339   }
<a name="l01340"></a>01340   bad_hdr:
<a name="l01341"></a>01341   <span class="comment">/*</span>
<a name="l01342"></a>01342 <span class="comment">   * RFC 2460 send error message parameterr problem, code unrecognized</span>
<a name="l01343"></a>01343 <span class="comment">   * next header, pointing to the next header field</span>
<a name="l01344"></a>01344 <span class="comment">   */</span>
<a name="l01345"></a>01345   <a class="code" href="a01929.html#ga1e39f07d91a68d158d653251fb1c98c3" title="Send an icmpv6 error message.">uip_icmp6_error_output</a>(<a class="code" href="a01929.html#ga8d80ba426cf5f5d177e7464c8076b62a" title="ip6 header bad">ICMP6_PARAM_PROB</a>, <a class="code" href="a01929.html#gad82c600ff1d118554029c9258e014966" title="unrecognized next header">ICMP6_PARAMPROB_NEXTHEADER</a>, (uint32_t)(<a class="code" href="a01929.html#ga6a2217b24bdcc949e5831fbfa139bc45" title="Type of the next header in IPv6 header or extension headers.">uip_next_hdr</a> - (uint8_t *)<a class="code" href="a01929.html#gaf966537cf73ee5973da59bba6b21b731" title="Pointer to IP header.">UIP_IP_BUF</a>));
<a name="l01346"></a>01346   <a class="code" href="a01926.html#ga9c0814ed491fa452ec97910c0728d410" title="The uIP TCP/IP statistics.">UIP_STAT</a>(++uip_stat.ip.drop);
<a name="l01347"></a>01347   <a class="code" href="a01926.html#ga9c0814ed491fa452ec97910c0728d410" title="The uIP TCP/IP statistics.">UIP_STAT</a>(++uip_stat.ip.protoerr);
<a name="l01348"></a>01348   UIP_LOG(<span class="stringliteral">&quot;ip6: unrecognized header&quot;</span>);
<a name="l01349"></a>01349   <span class="keywordflow">goto</span> send;
<a name="l01350"></a>01350   <span class="comment">/* End of headers processing */</span>
<a name="l01351"></a>01351   
<a name="l01352"></a>01352   icmp6_input:
<a name="l01353"></a>01353   <span class="comment">/* This is IPv6 ICMPv6 processing code. */</span>
<a name="l01354"></a>01354   PRINTF(<span class="stringliteral">&quot;icmp6_input: length %d type: %d \n&quot;</span>, <a class="code" href="a01926.html#ga72af00d45662ba0dc2ba3781a556e25b" title="The length of the packet in the uip_buf buffer.">uip_len</a>, <a class="code" href="a01929.html#ga56e76f46008562daae1447c012fd92e2" title="Pointer to ICMP header.">UIP_ICMP_BUF</a>-&gt;type);
<a name="l01355"></a>01355 
<a name="l01356"></a>01356 <span class="preprocessor">#if UIP_CONF_IPV6_CHECKS</span>
<a name="l01357"></a>01357 <span class="preprocessor"></span>  <span class="comment">/* Compute and check the ICMP header checksum */</span>
<a name="l01358"></a>01358   <span class="keywordflow">if</span>(<a class="code" href="a01926.html#ga3ec91f3c5d75781b5ad9915828aaeba9" title="Calculate the ICMP checksum of the packet in uip_buf.">uip_icmp6chksum</a>() != 0xffff) {
<a name="l01359"></a>01359     <a class="code" href="a01926.html#ga9c0814ed491fa452ec97910c0728d410" title="The uIP TCP/IP statistics.">UIP_STAT</a>(++uip_stat.icmp.drop);
<a name="l01360"></a>01360     <a class="code" href="a01926.html#ga9c0814ed491fa452ec97910c0728d410" title="The uIP TCP/IP statistics.">UIP_STAT</a>(++uip_stat.icmp.chkerr);
<a name="l01361"></a>01361     UIP_LOG(<span class="stringliteral">&quot;icmpv6: bad checksum.&quot;</span>);
<a name="l01362"></a>01362     PRINTF(<span class="stringliteral">&quot;icmpv6: bad checksum.&quot;</span>);
<a name="l01363"></a>01363     <span class="keywordflow">goto</span> drop;
<a name="l01364"></a>01364   }
<a name="l01365"></a>01365 <span class="preprocessor">#endif </span><span class="comment">/*UIP_CONF_IPV6_CHECKS*/</span>
<a name="l01366"></a>01366 
<a name="l01367"></a>01367   <a class="code" href="a01926.html#ga9c0814ed491fa452ec97910c0728d410" title="The uIP TCP/IP statistics.">UIP_STAT</a>(++uip_stat.icmp.recv);
<a name="l01368"></a>01368   <span class="comment">/*</span>
<a name="l01369"></a>01369 <span class="comment">   * Here we process incoming ICMPv6 packets</span>
<a name="l01370"></a>01370 <span class="comment">   * For echo request, we send echo reply</span>
<a name="l01371"></a>01371 <span class="comment">   * For ND pkts, we call the appropriate function in uip-nd6.c</span>
<a name="l01372"></a>01372 <span class="comment">   * We do not treat Error messages for now</span>
<a name="l01373"></a>01373 <span class="comment">   * If no pkt is to be sent as an answer to the incoming one, we</span>
<a name="l01374"></a>01374 <span class="comment">   * &quot;goto drop&quot;. Else we just break; then at the after the &quot;switch&quot;</span>
<a name="l01375"></a>01375 <span class="comment">   * we &quot;goto send&quot;</span>
<a name="l01376"></a>01376 <span class="comment">   */</span>
<a name="l01377"></a>01377 <span class="preprocessor">#if UIP_CONF_ICMP6</span>
<a name="l01378"></a>01378 <span class="preprocessor"></span>  UIP_ICMP6_APPCALL(<a class="code" href="a01929.html#ga56e76f46008562daae1447c012fd92e2" title="Pointer to ICMP header.">UIP_ICMP_BUF</a>-&gt;type);
<a name="l01379"></a>01379 <span class="preprocessor">#endif </span><span class="comment">/*UIP_CONF_ICMP6*/</span>
<a name="l01380"></a>01380 
<a name="l01381"></a>01381   <span class="keywordflow">switch</span>(<a class="code" href="a01929.html#ga56e76f46008562daae1447c012fd92e2" title="Pointer to ICMP header.">UIP_ICMP_BUF</a>-&gt;type) {
<a name="l01382"></a>01382     <span class="keywordflow">case</span> <a class="code" href="a01929.html#ga57a1ac6d8a0a481176f3003a0e1ad629" title="Neighbor Solicitation.">ICMP6_NS</a>:
<a name="l01383"></a>01383       <a class="code" href="a01929.html#gae79fcc7ce6cca2ba75d940f1c4f412b0" title="Process a neighbor solicitation.">uip_nd6_ns_input</a>();
<a name="l01384"></a>01384       <span class="keywordflow">break</span>;
<a name="l01385"></a>01385     <span class="keywordflow">case</span> <a class="code" href="a01929.html#ga83d62d3e140863ae8cc314657b2502c2" title="Neighbor advertisement.">ICMP6_NA</a>:
<a name="l01386"></a>01386       <a class="code" href="a01929.html#ga1e60994806633470ed48b3610ef36ef9" title="Process a Neighbor Advertisement.">uip_nd6_na_input</a>();
<a name="l01387"></a>01387       <span class="keywordflow">break</span>;
<a name="l01388"></a>01388     <span class="keywordflow">case</span> <a class="code" href="a01929.html#gaa52eca388b7196c057a94380ebc5af11" title="Router Solicitation.">ICMP6_RS</a>:
<a name="l01389"></a>01389 <span class="preprocessor">#if UIP_CONF_ROUTER &amp;&amp; UIP_ND6_SEND_RA</span>
<a name="l01390"></a>01390 <span class="preprocessor"></span>    uip_nd6_rs_input();
<a name="l01391"></a>01391 <span class="preprocessor">#else </span><span class="comment">/* UIP_CONF_ROUTER &amp;&amp; UIP_ND6_SEND_RA */</span>
<a name="l01392"></a>01392     <a class="code" href="a01926.html#ga9c0814ed491fa452ec97910c0728d410" title="The uIP TCP/IP statistics.">UIP_STAT</a>(++uip_stat.icmp.drop);
<a name="l01393"></a>01393     <a class="code" href="a01926.html#ga72af00d45662ba0dc2ba3781a556e25b" title="The length of the packet in the uip_buf buffer.">uip_len</a> = 0;
<a name="l01394"></a>01394 <span class="preprocessor">#endif </span><span class="comment">/* UIP_CONF_ROUTER &amp;&amp; UIP_ND6_SEND_RA */</span>
<a name="l01395"></a>01395     <span class="keywordflow">break</span>;
<a name="l01396"></a>01396   <span class="keywordflow">case</span> <a class="code" href="a01929.html#gae6bd456160b928ad8b9c17473a864f3f" title="Router Advertisement.">ICMP6_RA</a>:
<a name="l01397"></a>01397 <span class="preprocessor">#if UIP_CONF_ROUTER</span>
<a name="l01398"></a>01398 <span class="preprocessor"></span>    <a class="code" href="a01926.html#ga9c0814ed491fa452ec97910c0728d410" title="The uIP TCP/IP statistics.">UIP_STAT</a>(++uip_stat.icmp.drop);
<a name="l01399"></a>01399     <a class="code" href="a01926.html#ga72af00d45662ba0dc2ba3781a556e25b" title="The length of the packet in the uip_buf buffer.">uip_len</a> = 0;
<a name="l01400"></a>01400 <span class="preprocessor">#else </span><span class="comment">/* UIP_CONF_ROUTER */</span>
<a name="l01401"></a>01401     <a class="code" href="a01929.html#ga38d101ca67e53122583f6b9a81debe29" title="process a Router Advertisement">uip_nd6_ra_input</a>();
<a name="l01402"></a>01402 <span class="preprocessor">#endif </span><span class="comment">/* UIP_CONF_ROUTER */</span>
<a name="l01403"></a>01403     <span class="keywordflow">break</span>;
<a name="l01404"></a>01404 <span class="preprocessor">#if UIP_CONF_IPV6_RPL</span>
<a name="l01405"></a>01405 <span class="preprocessor"></span>  <span class="keywordflow">case</span> <a class="code" href="a01929.html#gaca4ac7f4ff2d4e8083b68896b0611c10" title="RPL.">ICMP6_RPL</a>:
<a name="l01406"></a>01406     uip_rpl_input();
<a name="l01407"></a>01407     <span class="keywordflow">break</span>;
<a name="l01408"></a>01408 <span class="preprocessor">#endif </span><span class="comment">/* UIP_CONF_IPV6_RPL */</span>
<a name="l01409"></a>01409     <span class="keywordflow">case</span> <a class="code" href="a01929.html#gaf57992c702020d846f7e50511fb30a8c" title="Echo request.">ICMP6_ECHO_REQUEST</a>:
<a name="l01410"></a>01410       <a class="code" href="a01929.html#ga1cd1acc7b65238c4d6c6d8f812d46068" title="\ brief Process an echo request">uip_icmp6_echo_request_input</a>();
<a name="l01411"></a>01411       <span class="keywordflow">break</span>;
<a name="l01412"></a>01412     <span class="keywordflow">case</span> <a class="code" href="a01929.html#ga207d17b633cd095120a74bc1f2257b17" title="Echo reply.">ICMP6_ECHO_REPLY</a>:<span class="comment"></span>
<a name="l01413"></a>01413 <span class="comment">      /** \note We don&#39;t implement any application callback for now */</span>
<a name="l01414"></a>01414       PRINTF(<span class="stringliteral">&quot;Received an icmp6 echo reply\n&quot;</span>);
<a name="l01415"></a>01415       <a class="code" href="a01926.html#ga9c0814ed491fa452ec97910c0728d410" title="The uIP TCP/IP statistics.">UIP_STAT</a>(++uip_stat.icmp.recv);
<a name="l01416"></a>01416       <a class="code" href="a01926.html#ga72af00d45662ba0dc2ba3781a556e25b" title="The length of the packet in the uip_buf buffer.">uip_len</a> = 0;
<a name="l01417"></a>01417       <span class="keywordflow">break</span>;
<a name="l01418"></a>01418     <span class="keywordflow">default</span>:
<a name="l01419"></a>01419       PRINTF(<span class="stringliteral">&quot;Unknown icmp6 message type %d\n&quot;</span>, <a class="code" href="a01929.html#ga56e76f46008562daae1447c012fd92e2" title="Pointer to ICMP header.">UIP_ICMP_BUF</a>-&gt;type);
<a name="l01420"></a>01420       <a class="code" href="a01926.html#ga9c0814ed491fa452ec97910c0728d410" title="The uIP TCP/IP statistics.">UIP_STAT</a>(++uip_stat.icmp.drop);
<a name="l01421"></a>01421       <a class="code" href="a01926.html#ga9c0814ed491fa452ec97910c0728d410" title="The uIP TCP/IP statistics.">UIP_STAT</a>(++uip_stat.icmp.typeerr);
<a name="l01422"></a>01422       UIP_LOG(<span class="stringliteral">&quot;icmp6: unknown ICMP message.&quot;</span>);
<a name="l01423"></a>01423       <a class="code" href="a01926.html#ga72af00d45662ba0dc2ba3781a556e25b" title="The length of the packet in the uip_buf buffer.">uip_len</a> = 0;
<a name="l01424"></a>01424       <span class="keywordflow">break</span>;
<a name="l01425"></a>01425   }
<a name="l01426"></a>01426   
<a name="l01427"></a>01427   <span class="keywordflow">if</span>(<a class="code" href="a01926.html#ga72af00d45662ba0dc2ba3781a556e25b" title="The length of the packet in the uip_buf buffer.">uip_len</a> &gt; 0) {
<a name="l01428"></a>01428     <span class="keywordflow">goto</span> send;
<a name="l01429"></a>01429   } <span class="keywordflow">else</span> {
<a name="l01430"></a>01430     <span class="keywordflow">goto</span> drop;
<a name="l01431"></a>01431   }
<a name="l01432"></a>01432   <span class="comment">/* End of IPv6 ICMP processing. */</span>
<a name="l01433"></a>01433    
<a name="l01434"></a>01434 
<a name="l01435"></a>01435 <span class="preprocessor">#if UIP_UDP</span>
<a name="l01436"></a>01436 <span class="preprocessor"></span>  <span class="comment">/* UDP input processing. */</span>
<a name="l01437"></a>01437  udp_input:
<a name="l01438"></a>01438 
<a name="l01439"></a>01439   remove_ext_hdr();
<a name="l01440"></a>01440 
<a name="l01441"></a>01441   PRINTF(<span class="stringliteral">&quot;Receiving UDP packet\n&quot;</span>);
<a name="l01442"></a>01442   <a class="code" href="a01926.html#ga9c0814ed491fa452ec97910c0728d410" title="The uIP TCP/IP statistics.">UIP_STAT</a>(++uip_stat.udp.recv);
<a name="l01443"></a>01443  
<a name="l01444"></a>01444   <span class="comment">/* UDP processing is really just a hack. We don&#39;t do anything to the</span>
<a name="l01445"></a>01445 <span class="comment">     UDP/IP headers, but let the UDP application do all the hard</span>
<a name="l01446"></a>01446 <span class="comment">     work. If the application sets uip_slen, it has a packet to</span>
<a name="l01447"></a>01447 <span class="comment">     send. */</span>
<a name="l01448"></a>01448 <span class="preprocessor">#if UIP_UDP_CHECKSUMS</span>
<a name="l01449"></a>01449 <span class="preprocessor"></span>  <a class="code" href="a01926.html#ga72af00d45662ba0dc2ba3781a556e25b" title="The length of the packet in the uip_buf buffer.">uip_len</a> = <a class="code" href="a01926.html#ga72af00d45662ba0dc2ba3781a556e25b" title="The length of the packet in the uip_buf buffer.">uip_len</a> - UIP_IPUDPH_LEN;
<a name="l01450"></a>01450   <a class="code" href="a01926.html#ga561b8eda32e059d4e7397f776268cc63" title="Pointer to the application data in the packet buffer.">uip_appdata</a> = &amp;uip_buf[UIP_IPUDPH_LEN + <a class="code" href="a01828.html#gae6f4a2453dbd8bc60e6a82774552366a" title="The link level header length.">UIP_LLH_LEN</a>];
<a name="l01451"></a>01451   <span class="keywordflow">if</span>(UIP_UDP_BUF-&gt;udpchksum != 0 &amp;&amp; <a class="code" href="a01926.html#gaeb447241dcd4e7840ea4b0603fc2c330" title="Calculate the UDP checksum of the packet in uip_buf and uip_appdata.">uip_udpchksum</a>() != 0xffff) {
<a name="l01452"></a>01452     <a class="code" href="a01926.html#ga9c0814ed491fa452ec97910c0728d410" title="The uIP TCP/IP statistics.">UIP_STAT</a>(++uip_stat.udp.drop);
<a name="l01453"></a>01453     <a class="code" href="a01926.html#ga9c0814ed491fa452ec97910c0728d410" title="The uIP TCP/IP statistics.">UIP_STAT</a>(++uip_stat.udp.chkerr);
<a name="l01454"></a>01454     PRINTF(<span class="stringliteral">&quot;udp: bad checksum 0x%04x 0x%04x\n&quot;</span>, UIP_UDP_BUF-&gt;udpchksum,
<a name="l01455"></a>01455            <a class="code" href="a01926.html#gaeb447241dcd4e7840ea4b0603fc2c330" title="Calculate the UDP checksum of the packet in uip_buf and uip_appdata.">uip_udpchksum</a>());
<a name="l01456"></a>01456     <span class="keywordflow">goto</span> drop;
<a name="l01457"></a>01457   }
<a name="l01458"></a>01458 <span class="preprocessor">#else </span><span class="comment">/* UIP_UDP_CHECKSUMS */</span>
<a name="l01459"></a>01459   <a class="code" href="a01926.html#ga72af00d45662ba0dc2ba3781a556e25b" title="The length of the packet in the uip_buf buffer.">uip_len</a> = <a class="code" href="a01926.html#ga72af00d45662ba0dc2ba3781a556e25b" title="The length of the packet in the uip_buf buffer.">uip_len</a> - UIP_IPUDPH_LEN;
<a name="l01460"></a>01460 <span class="preprocessor">#endif </span><span class="comment">/* UIP_UDP_CHECKSUMS */</span>
<a name="l01461"></a>01461 
<a name="l01462"></a>01462   <span class="comment">/* Make sure that the UDP destination port number is not zero. */</span>
<a name="l01463"></a>01463   <span class="keywordflow">if</span>(UIP_UDP_BUF-&gt;destport == 0) {
<a name="l01464"></a>01464     PRINTF(<span class="stringliteral">&quot;udp: zero port.\n&quot;</span>);
<a name="l01465"></a>01465     <span class="keywordflow">goto</span> drop;
<a name="l01466"></a>01466   }
<a name="l01467"></a>01467 
<a name="l01468"></a>01468   <span class="comment">/* Demultiplex this UDP packet between the UDP &quot;connections&quot;. */</span>
<a name="l01469"></a>01469   <span class="keywordflow">for</span>(uip_udp_conn = &amp;uip_udp_conns[0];
<a name="l01470"></a>01470       uip_udp_conn &lt; &amp;uip_udp_conns[<a class="code" href="a01823.html#ga196379ceb1219a99f4495e41ccc9bbfb" title="The maximum amount of concurrent UDP connections.">UIP_UDP_CONNS</a>];
<a name="l01471"></a>01471       ++<a class="code" href="a01926.html#ga210f227119fc972e6222c9cb452e15a9" title="The current UDP connection.">uip_udp_conn</a>) {
<a name="l01472"></a>01472     <span class="comment">/* If the local UDP port is non-zero, the connection is considered</span>
<a name="l01473"></a>01473 <span class="comment">       to be used. If so, the local port number is checked against the</span>
<a name="l01474"></a>01474 <span class="comment">       destination port number in the received packet. If the two port</span>
<a name="l01475"></a>01475 <span class="comment">       numbers match, the remote port number is checked if the</span>
<a name="l01476"></a>01476 <span class="comment">       connection is bound to a remote port. Finally, if the</span>
<a name="l01477"></a>01477 <span class="comment">       connection is bound to a remote IP address, the source IP</span>
<a name="l01478"></a>01478 <span class="comment">       address of the packet is checked. */</span>
<a name="l01479"></a>01479     <span class="keywordflow">if</span>(uip_udp_conn-&gt;<a class="code" href="a00122.html#accfeb05db2d9ef4702f6b20a12791dcf" title="The local port number in network byte order.">lport</a> != 0 &amp;&amp;
<a name="l01480"></a>01480        UIP_UDP_BUF-&gt;destport == uip_udp_conn-&gt;<a class="code" href="a00122.html#accfeb05db2d9ef4702f6b20a12791dcf" title="The local port number in network byte order.">lport</a> &amp;&amp;
<a name="l01481"></a>01481        (uip_udp_conn-&gt;<a class="code" href="a00122.html#abd156fd08c61ac3593414d3dc7c15ec2" title="The remote port number in network byte order.">rport</a> == 0 ||
<a name="l01482"></a>01482         UIP_UDP_BUF-&gt;srcport == uip_udp_conn-&gt;<a class="code" href="a00122.html#abd156fd08c61ac3593414d3dc7c15ec2" title="The remote port number in network byte order.">rport</a>) &amp;&amp;
<a name="l01483"></a>01483        (uip_is_addr_unspecified(&amp;uip_udp_conn-&gt;<a class="code" href="a00122.html#a8a661a2d544100b82d0d14a1985083d5" title="The IP address of the remote peer.">ripaddr</a>) ||
<a name="l01484"></a>01484         <a class="code" href="a01815.html#ga210e629f7252e4bc8458cbdf260b3318" title="Copy an IP address from one place to another.">uip_ipaddr_cmp</a>(&amp;UIP_IP_BUF-&gt;srcipaddr, &amp;uip_udp_conn-&gt;<a class="code" href="a00122.html#a8a661a2d544100b82d0d14a1985083d5" title="The IP address of the remote peer.">ripaddr</a>))) {
<a name="l01485"></a>01485       <span class="keywordflow">goto</span> udp_found;
<a name="l01486"></a>01486     }
<a name="l01487"></a>01487   }
<a name="l01488"></a>01488   PRINTF(<span class="stringliteral">&quot;udp: no matching connection found\n&quot;</span>);
<a name="l01489"></a>01489 
<a name="l01490"></a>01490 <span class="preprocessor">#if UIP_UDP_SEND_UNREACH_NOPORT</span>
<a name="l01491"></a>01491 <span class="preprocessor"></span>  <a class="code" href="a01929.html#ga1e39f07d91a68d158d653251fb1c98c3" title="Send an icmpv6 error message.">uip_icmp6_error_output</a>(<a class="code" href="a01929.html#ga24a92fa6c87bf49df9c7afbf3b7137f2" title="dest unreachable">ICMP6_DST_UNREACH</a>, <a class="code" href="a01929.html#ga922cb86597072bd79bd099a13b2607c5" title="port unreachable">ICMP6_DST_UNREACH_NOPORT</a>, 0);
<a name="l01492"></a>01492   <a class="code" href="a01926.html#ga9c0814ed491fa452ec97910c0728d410" title="The uIP TCP/IP statistics.">UIP_STAT</a>(++uip_stat.ip.drop);
<a name="l01493"></a>01493   <span class="keywordflow">goto</span> send;
<a name="l01494"></a>01494 <span class="preprocessor">#else</span>
<a name="l01495"></a>01495 <span class="preprocessor"></span>  <span class="keywordflow">goto</span> drop;
<a name="l01496"></a>01496 <span class="preprocessor">#endif</span>
<a name="l01497"></a>01497 <span class="preprocessor"></span>
<a name="l01498"></a>01498  udp_found:
<a name="l01499"></a>01499   PRINTF(<span class="stringliteral">&quot;In udp_found\n&quot;</span>);
<a name="l01500"></a>01500  
<a name="l01501"></a>01501   uip_conn = <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>;
<a name="l01502"></a>01502   uip_flags = UIP_NEWDATA;
<a name="l01503"></a>01503   uip_sappdata = <a class="code" href="a01926.html#ga561b8eda32e059d4e7397f776268cc63" title="Pointer to the application data in the packet buffer.">uip_appdata</a> = &amp;uip_buf[UIP_IPUDPH_LEN + <a class="code" href="a01828.html#gae6f4a2453dbd8bc60e6a82774552366a" title="The link level header length.">UIP_LLH_LEN</a>];
<a name="l01504"></a>01504   uip_slen = 0;
<a name="l01505"></a>01505   UIP_UDP_APPCALL();
<a name="l01506"></a>01506 
<a name="l01507"></a>01507  udp_send:
<a name="l01508"></a>01508   PRINTF(<span class="stringliteral">&quot;In udp_send\n&quot;</span>);
<a name="l01509"></a>01509 
<a name="l01510"></a>01510   <span class="keywordflow">if</span>(uip_slen == 0) {
<a name="l01511"></a>01511     <span class="keywordflow">goto</span> drop;
<a name="l01512"></a>01512   }
<a name="l01513"></a>01513   <a class="code" href="a01926.html#ga72af00d45662ba0dc2ba3781a556e25b" title="The length of the packet in the uip_buf buffer.">uip_len</a> = uip_slen + UIP_IPUDPH_LEN;
<a name="l01514"></a>01514 
<a name="l01515"></a>01515   <span class="comment">/* For IPv6, the IP length field does not include the IPv6 IP header</span>
<a name="l01516"></a>01516 <span class="comment">     length. */</span>
<a name="l01517"></a>01517   UIP_IP_BUF-&gt;len[0] = ((<a class="code" href="a01926.html#ga72af00d45662ba0dc2ba3781a556e25b" title="The length of the packet in the uip_buf buffer.">uip_len</a> - UIP_IPH_LEN) &gt;&gt; 8);
<a name="l01518"></a>01518   UIP_IP_BUF-&gt;len[1] = ((<a class="code" href="a01926.html#ga72af00d45662ba0dc2ba3781a556e25b" title="The length of the packet in the uip_buf buffer.">uip_len</a> - UIP_IPH_LEN) &amp; 0xff);
<a name="l01519"></a>01519 
<a name="l01520"></a>01520   UIP_IP_BUF-&gt;ttl = uip_udp_conn-&gt;<a class="code" href="a00122.html#a96cd7b7c38301246d407aa014c86863f" title="Default time-to-live.">ttl</a>;
<a name="l01521"></a>01521   UIP_IP_BUF-&gt;proto = UIP_PROTO_UDP;
<a name="l01522"></a>01522 
<a name="l01523"></a>01523   UIP_UDP_BUF-&gt;udplen = UIP_HTONS(uip_slen + UIP_UDPH_LEN);
<a name="l01524"></a>01524   UIP_UDP_BUF-&gt;udpchksum = 0;
<a name="l01525"></a>01525 
<a name="l01526"></a>01526   UIP_UDP_BUF-&gt;srcport  = uip_udp_conn-&gt;<a class="code" href="a00122.html#accfeb05db2d9ef4702f6b20a12791dcf" title="The local port number in network byte order.">lport</a>;
<a name="l01527"></a>01527   UIP_UDP_BUF-&gt;destport = uip_udp_conn-&gt;<a class="code" href="a00122.html#abd156fd08c61ac3593414d3dc7c15ec2" title="The remote port number in network byte order.">rport</a>;
<a name="l01528"></a>01528 
<a name="l01529"></a>01529   uip_ipaddr_copy(&amp;UIP_IP_BUF-&gt;destipaddr, &amp;uip_udp_conn-&gt;<a class="code" href="a00122.html#a8a661a2d544100b82d0d14a1985083d5" title="The IP address of the remote peer.">ripaddr</a>);
<a name="l01530"></a>01530   <a class="code" href="a01929.html#gab4be25c579b63df6ce5b3a0d8b067b27" title="Source address selection, see RFC 3484.">uip_ds6_select_src</a>(&amp;UIP_IP_BUF-&gt;srcipaddr, &amp;UIP_IP_BUF-&gt;destipaddr);
<a name="l01531"></a>01531 
<a name="l01532"></a>01532   <a class="code" href="a01926.html#ga561b8eda32e059d4e7397f776268cc63" title="Pointer to the application data in the packet buffer.">uip_appdata</a> = &amp;uip_buf[<a class="code" href="a01828.html#gae6f4a2453dbd8bc60e6a82774552366a" title="The link level header length.">UIP_LLH_LEN</a> + UIP_IPTCPH_LEN];
<a name="l01533"></a>01533 
<a name="l01534"></a>01534 <span class="preprocessor">#if UIP_UDP_CHECKSUMS</span>
<a name="l01535"></a>01535 <span class="preprocessor"></span>  <span class="comment">/* Calculate UDP checksum. */</span>
<a name="l01536"></a>01536   UIP_UDP_BUF-&gt;udpchksum = ~(<a class="code" href="a01926.html#gaeb447241dcd4e7840ea4b0603fc2c330" title="Calculate the UDP checksum of the packet in uip_buf and uip_appdata.">uip_udpchksum</a>());
<a name="l01537"></a>01537   <span class="keywordflow">if</span>(UIP_UDP_BUF-&gt;udpchksum == 0) {
<a name="l01538"></a>01538     UIP_UDP_BUF-&gt;udpchksum = 0xffff;
<a name="l01539"></a>01539   }
<a name="l01540"></a>01540 <span class="preprocessor">#endif </span><span class="comment">/* UIP_UDP_CHECKSUMS */</span>
<a name="l01541"></a>01541   <a class="code" href="a01926.html#ga9c0814ed491fa452ec97910c0728d410" title="The uIP TCP/IP statistics.">UIP_STAT</a>(++uip_stat.udp.sent);
<a name="l01542"></a>01542   <span class="keywordflow">goto</span> ip_send_nolen;
<a name="l01543"></a>01543 <span class="preprocessor">#endif </span><span class="comment">/* UIP_UDP */</span>
<a name="l01544"></a>01544 
<a name="l01545"></a>01545 <span class="preprocessor">#if UIP_TCP</span>
<a name="l01546"></a>01546 <span class="preprocessor"></span>  <span class="comment">/* TCP input processing. */</span>
<a name="l01547"></a>01547  tcp_input:
<a name="l01548"></a>01548 
<a name="l01549"></a>01549   remove_ext_hdr();
<a name="l01550"></a>01550 
<a name="l01551"></a>01551   <a class="code" href="a01926.html#ga9c0814ed491fa452ec97910c0728d410" title="The uIP TCP/IP statistics.">UIP_STAT</a>(++uip_stat.tcp.recv);
<a name="l01552"></a>01552   PRINTF(<span class="stringliteral">&quot;Receiving TCP packet\n&quot;</span>);
<a name="l01553"></a>01553   <span class="comment">/* Start of TCP input header processing code. */</span>
<a name="l01554"></a>01554   
<a name="l01555"></a>01555   <span class="keywordflow">if</span>(<a class="code" href="a01926.html#ga969ff8bccf86e1c4becc3c3fd23f93b4" title="Calculate the TCP checksum of the packet in uip_buf and uip_appdata.">uip_tcpchksum</a>() != 0xffff) {   <span class="comment">/* Compute and check the TCP</span>
<a name="l01556"></a>01556 <span class="comment">                                       checksum. */</span>
<a name="l01557"></a>01557     <a class="code" href="a01926.html#ga9c0814ed491fa452ec97910c0728d410" title="The uIP TCP/IP statistics.">UIP_STAT</a>(++uip_stat.tcp.drop);
<a name="l01558"></a>01558     <a class="code" href="a01926.html#ga9c0814ed491fa452ec97910c0728d410" title="The uIP TCP/IP statistics.">UIP_STAT</a>(++uip_stat.tcp.chkerr);
<a name="l01559"></a>01559     PRINTF(<span class="stringliteral">&quot;tcp: bad checksum 0x%04x 0x%04x\n&quot;</span>, UIP_TCP_BUF-&gt;tcpchksum,
<a name="l01560"></a>01560            <a class="code" href="a01926.html#ga969ff8bccf86e1c4becc3c3fd23f93b4" title="Calculate the TCP checksum of the packet in uip_buf and uip_appdata.">uip_tcpchksum</a>());
<a name="l01561"></a>01561     <span class="keywordflow">goto</span> drop;
<a name="l01562"></a>01562   }
<a name="l01563"></a>01563 
<a name="l01564"></a>01564   <span class="comment">/* Make sure that the TCP port number is not zero. */</span>
<a name="l01565"></a>01565   <span class="keywordflow">if</span>(UIP_TCP_BUF-&gt;destport == 0 || UIP_TCP_BUF-&gt;srcport == 0) {
<a name="l01566"></a>01566     PRINTF(<span class="stringliteral">&quot;tcp: zero port.&quot;</span>);
<a name="l01567"></a>01567     <span class="keywordflow">goto</span> drop;
<a name="l01568"></a>01568   }
<a name="l01569"></a>01569 
<a name="l01570"></a>01570   <span class="comment">/* Demultiplex this segment. */</span>
<a name="l01571"></a>01571   <span class="comment">/* First check any active connections. */</span>
<a name="l01572"></a>01572   <span class="keywordflow">for</span>(uip_connr = &amp;uip_conns[0]; uip_connr &lt;= &amp;uip_conns[UIP_CONNS - 1];
<a name="l01573"></a>01573       ++uip_connr) {
<a name="l01574"></a>01574     <span class="keywordflow">if</span>(uip_connr-&gt;<a class="code" href="a00098.html#aec4787356d50d91abe5b27d472abe630" title="TCP state and flags.">tcpstateflags</a> != UIP_CLOSED &amp;&amp;
<a name="l01575"></a>01575        UIP_TCP_BUF-&gt;destport == uip_connr-&gt;<a class="code" href="a00098.html#a5e927bbfba71e139b345839b7e423ea5" title="The local TCP port, in network byte order.">lport</a> &amp;&amp;
<a name="l01576"></a>01576        UIP_TCP_BUF-&gt;srcport == uip_connr-&gt;<a class="code" href="a00098.html#a7477a30cdd9b399067bf11bf18e620ad" title="The local remote TCP port, in network byte order.">rport</a> &amp;&amp;
<a name="l01577"></a>01577        <a class="code" href="a01815.html#ga210e629f7252e4bc8458cbdf260b3318" title="Copy an IP address from one place to another.">uip_ipaddr_cmp</a>(&amp;UIP_IP_BUF-&gt;srcipaddr, &amp;uip_connr-&gt;<a class="code" href="a00098.html#a79510aa86d3fa0a0fc6cfc49b1da7279" title="The IP address of the remote host.">ripaddr</a>)) {
<a name="l01578"></a>01578       <span class="keywordflow">goto</span> found;
<a name="l01579"></a>01579     }
<a name="l01580"></a>01580   }
<a name="l01581"></a>01581 
<a name="l01582"></a>01582   <span class="comment">/* If we didn&#39;t find and active connection that expected the packet,</span>
<a name="l01583"></a>01583 <span class="comment">     either this packet is an old duplicate, or this is a SYN packet</span>
<a name="l01584"></a>01584 <span class="comment">     destined for a connection in LISTEN. If the SYN flag isn&#39;t set,</span>
<a name="l01585"></a>01585 <span class="comment">     it is an old packet and we send a RST. */</span>
<a name="l01586"></a>01586   <span class="keywordflow">if</span>((UIP_TCP_BUF-&gt;flags &amp; TCP_CTL) != TCP_SYN) {
<a name="l01587"></a>01587     <span class="keywordflow">goto</span> reset;
<a name="l01588"></a>01588   }
<a name="l01589"></a>01589   
<a name="l01590"></a>01590   tmp16 = UIP_TCP_BUF-&gt;destport;
<a name="l01591"></a>01591   <span class="comment">/* Next, check listening connections. */</span>
<a name="l01592"></a>01592   <span class="keywordflow">for</span>(c = 0; c &lt; <a class="code" href="a01824.html#ga8f4ebd8ef6c0ea665ed351d87fec09fd" title="The maximum number of simultaneously listening TCP ports.">UIP_LISTENPORTS</a>; ++c) {
<a name="l01593"></a>01593     <span class="keywordflow">if</span>(tmp16 == uip_listenports[c]) {
<a name="l01594"></a>01594       <span class="keywordflow">goto</span> found_listen;
<a name="l01595"></a>01595     }
<a name="l01596"></a>01596   }
<a name="l01597"></a>01597   
<a name="l01598"></a>01598   <span class="comment">/* No matching connection found, so we send a RST packet. */</span>
<a name="l01599"></a>01599   <a class="code" href="a01926.html#ga9c0814ed491fa452ec97910c0728d410" title="The uIP TCP/IP statistics.">UIP_STAT</a>(++uip_stat.tcp.synrst);
<a name="l01600"></a>01600 
<a name="l01601"></a>01601  reset:
<a name="l01602"></a>01602   PRINTF(<span class="stringliteral">&quot;In reset\n&quot;</span>);
<a name="l01603"></a>01603   <span class="comment">/* We do not send resets in response to resets. */</span>
<a name="l01604"></a>01604   <span class="keywordflow">if</span>(UIP_TCP_BUF-&gt;flags &amp; TCP_RST) {
<a name="l01605"></a>01605     <span class="keywordflow">goto</span> drop;
<a name="l01606"></a>01606   }
<a name="l01607"></a>01607 
<a name="l01608"></a>01608   <a class="code" href="a01926.html#ga9c0814ed491fa452ec97910c0728d410" title="The uIP TCP/IP statistics.">UIP_STAT</a>(++uip_stat.tcp.rst);
<a name="l01609"></a>01609   
<a name="l01610"></a>01610   UIP_TCP_BUF-&gt;flags = TCP_RST | TCP_ACK;
<a name="l01611"></a>01611   <a class="code" href="a01926.html#ga72af00d45662ba0dc2ba3781a556e25b" title="The length of the packet in the uip_buf buffer.">uip_len</a> = UIP_IPTCPH_LEN;
<a name="l01612"></a>01612   UIP_TCP_BUF-&gt;tcpoffset = 5 &lt;&lt; 4;
<a name="l01613"></a>01613 
<a name="l01614"></a>01614   <span class="comment">/* Flip the seqno and ackno fields in the TCP header. */</span>
<a name="l01615"></a>01615   c = UIP_TCP_BUF-&gt;seqno[3];
<a name="l01616"></a>01616   UIP_TCP_BUF-&gt;seqno[3] = UIP_TCP_BUF-&gt;ackno[3];
<a name="l01617"></a>01617   UIP_TCP_BUF-&gt;ackno[3] = c;
<a name="l01618"></a>01618   
<a name="l01619"></a>01619   c = UIP_TCP_BUF-&gt;seqno[2];
<a name="l01620"></a>01620   UIP_TCP_BUF-&gt;seqno[2] = UIP_TCP_BUF-&gt;ackno[2];
<a name="l01621"></a>01621   UIP_TCP_BUF-&gt;ackno[2] = c;
<a name="l01622"></a>01622   
<a name="l01623"></a>01623   c = UIP_TCP_BUF-&gt;seqno[1];
<a name="l01624"></a>01624   UIP_TCP_BUF-&gt;seqno[1] = UIP_TCP_BUF-&gt;ackno[1];
<a name="l01625"></a>01625   UIP_TCP_BUF-&gt;ackno[1] = c;
<a name="l01626"></a>01626   
<a name="l01627"></a>01627   c = UIP_TCP_BUF-&gt;seqno[0];
<a name="l01628"></a>01628   UIP_TCP_BUF-&gt;seqno[0] = UIP_TCP_BUF-&gt;ackno[0];
<a name="l01629"></a>01629   UIP_TCP_BUF-&gt;ackno[0] = c;
<a name="l01630"></a>01630 
<a name="l01631"></a>01631   <span class="comment">/* We also have to increase the sequence number we are</span>
<a name="l01632"></a>01632 <span class="comment">     acknowledging. If the least significant byte overflowed, we need</span>
<a name="l01633"></a>01633 <span class="comment">     to propagate the carry to the other bytes as well. */</span>
<a name="l01634"></a>01634   <span class="keywordflow">if</span>(++UIP_TCP_BUF-&gt;ackno[3] == 0) {
<a name="l01635"></a>01635     <span class="keywordflow">if</span>(++UIP_TCP_BUF-&gt;ackno[2] == 0) {
<a name="l01636"></a>01636       <span class="keywordflow">if</span>(++UIP_TCP_BUF-&gt;ackno[1] == 0) {
<a name="l01637"></a>01637         ++UIP_TCP_BUF-&gt;ackno[0];
<a name="l01638"></a>01638       }
<a name="l01639"></a>01639     }
<a name="l01640"></a>01640   }
<a name="l01641"></a>01641  
<a name="l01642"></a>01642   <span class="comment">/* Swap port numbers. */</span>
<a name="l01643"></a>01643   tmp16 = UIP_TCP_BUF-&gt;srcport;
<a name="l01644"></a>01644   UIP_TCP_BUF-&gt;srcport = UIP_TCP_BUF-&gt;destport;
<a name="l01645"></a>01645   UIP_TCP_BUF-&gt;destport = tmp16;
<a name="l01646"></a>01646   
<a name="l01647"></a>01647   <span class="comment">/* Swap IP addresses. */</span>
<a name="l01648"></a>01648   uip_ipaddr_copy(&amp;UIP_IP_BUF-&gt;destipaddr, &amp;UIP_IP_BUF-&gt;srcipaddr);
<a name="l01649"></a>01649   <a class="code" href="a01929.html#gab4be25c579b63df6ce5b3a0d8b067b27" title="Source address selection, see RFC 3484.">uip_ds6_select_src</a>(&amp;UIP_IP_BUF-&gt;srcipaddr, &amp;UIP_IP_BUF-&gt;destipaddr);
<a name="l01650"></a>01650   <span class="comment">/* And send out the RST packet! */</span>
<a name="l01651"></a>01651   <span class="keywordflow">goto</span> tcp_send_noconn;
<a name="l01652"></a>01652 
<a name="l01653"></a>01653   <span class="comment">/* This label will be jumped to if we matched the incoming packet</span>
<a name="l01654"></a>01654 <span class="comment">     with a connection in LISTEN. In that case, we should create a new</span>
<a name="l01655"></a>01655 <span class="comment">     connection and send a SYNACK in return. */</span>
<a name="l01656"></a>01656  found_listen:
<a name="l01657"></a>01657   PRINTF(<span class="stringliteral">&quot;In found listen\n&quot;</span>);
<a name="l01658"></a>01658   <span class="comment">/* First we check if there are any connections avaliable. Unused</span>
<a name="l01659"></a>01659 <span class="comment">     connections are kept in the same table as used connections, but</span>
<a name="l01660"></a>01660 <span class="comment">     unused ones have the tcpstate set to CLOSED. Also, connections in</span>
<a name="l01661"></a>01661 <span class="comment">     TIME_WAIT are kept track of and we&#39;ll use the oldest one if no</span>
<a name="l01662"></a>01662 <span class="comment">     CLOSED connections are found. Thanks to Eddie C. Dost for a very</span>
<a name="l01663"></a>01663 <span class="comment">     nice algorithm for the TIME_WAIT search. */</span>
<a name="l01664"></a>01664   uip_connr = 0;
<a name="l01665"></a>01665   <span class="keywordflow">for</span>(c = 0; c &lt; <a class="code" href="a01824.html#gaf5fe83be78b78b9e7d9e7f1e34ab1cc5" title="The maximum number of simultaneously open TCP connections.">UIP_CONNS</a>; ++c) {
<a name="l01666"></a>01666     <span class="keywordflow">if</span>(uip_conns[c].<a class="code" href="a00098.html#aec4787356d50d91abe5b27d472abe630" title="TCP state and flags.">tcpstateflags</a> == UIP_CLOSED) {
<a name="l01667"></a>01667       uip_connr = &amp;uip_conns[c];
<a name="l01668"></a>01668       <span class="keywordflow">break</span>;
<a name="l01669"></a>01669     }
<a name="l01670"></a>01670     <span class="keywordflow">if</span>(uip_conns[c].<a class="code" href="a00098.html#aec4787356d50d91abe5b27d472abe630" title="TCP state and flags.">tcpstateflags</a> == UIP_TIME_WAIT) {
<a name="l01671"></a>01671       <span class="keywordflow">if</span>(uip_connr == 0 ||
<a name="l01672"></a>01672          uip_conns[c].<a class="code" href="a00092.html" title="A timer.">timer</a> &gt; uip_connr-&gt;<a class="code" href="a00098.html#a2d0c3e645bbae89194856aa5a8f49e4d" title="The retransmission timer.">timer</a>) {
<a name="l01673"></a>01673         uip_connr = &amp;uip_conns[c];
<a name="l01674"></a>01674       }
<a name="l01675"></a>01675     }
<a name="l01676"></a>01676   }
<a name="l01677"></a>01677 
<a name="l01678"></a>01678   <span class="keywordflow">if</span>(uip_connr == 0) {
<a name="l01679"></a>01679     <span class="comment">/* All connections are used already, we drop packet and hope that</span>
<a name="l01680"></a>01680 <span class="comment">       the remote end will retransmit the packet at a time when we</span>
<a name="l01681"></a>01681 <span class="comment">       have more spare connections. */</span>
<a name="l01682"></a>01682     <a class="code" href="a01926.html#ga9c0814ed491fa452ec97910c0728d410" title="The uIP TCP/IP statistics.">UIP_STAT</a>(++uip_stat.tcp.syndrop);
<a name="l01683"></a>01683     UIP_LOG(<span class="stringliteral">&quot;tcp: found no unused connections.&quot;</span>);
<a name="l01684"></a>01684     <span class="keywordflow">goto</span> drop;
<a name="l01685"></a>01685   }
<a name="l01686"></a>01686   uip_conn = uip_connr;
<a name="l01687"></a>01687   
<a name="l01688"></a>01688   <span class="comment">/* Fill in the necessary fields for the new connection. */</span>
<a name="l01689"></a>01689   uip_connr-&gt;<a class="code" href="a00098.html#aec8e06ea812558e5723d498f99faec63" title="Retransmission time-out.">rto</a> = uip_connr-&gt;<a class="code" href="a00098.html#a2d0c3e645bbae89194856aa5a8f49e4d" title="The retransmission timer.">timer</a> = <a class="code" href="a01824.html#ga15de27b044603284f68db05a378235a7" title="The initial retransmission timeout counted in timer pulses.">UIP_RTO</a>;
<a name="l01690"></a>01690   uip_connr-&gt;<a class="code" href="a00098.html#a4f60a7dd9de9f9db9c63df199fc59088" title="Retransmission time-out calculation state variable.">sa</a> = 0;
<a name="l01691"></a>01691   uip_connr-&gt;<a class="code" href="a00098.html#a82c6070fc4281ac4f8d427fd1a1a3655" title="Retransmission time-out calculation state variable.">sv</a> = 4;
<a name="l01692"></a>01692   uip_connr-&gt;<a class="code" href="a00098.html#a974df0fa0057819fd67109d9f8f1beeb" title="The number of retransmissions for the last segment sent.">nrtx</a> = 0;
<a name="l01693"></a>01693   uip_connr-&gt;<a class="code" href="a00098.html#a5e927bbfba71e139b345839b7e423ea5" title="The local TCP port, in network byte order.">lport</a> = UIP_TCP_BUF-&gt;destport;
<a name="l01694"></a>01694   uip_connr-&gt;<a class="code" href="a00098.html#a7477a30cdd9b399067bf11bf18e620ad" title="The local remote TCP port, in network byte order.">rport</a> = UIP_TCP_BUF-&gt;srcport;
<a name="l01695"></a>01695   uip_ipaddr_copy(&amp;uip_connr-&gt;<a class="code" href="a00098.html#a79510aa86d3fa0a0fc6cfc49b1da7279" title="The IP address of the remote host.">ripaddr</a>, &amp;UIP_IP_BUF-&gt;srcipaddr);
<a name="l01696"></a>01696   uip_connr-&gt;<a class="code" href="a00098.html#aec4787356d50d91abe5b27d472abe630" title="TCP state and flags.">tcpstateflags</a> = UIP_SYN_RCVD;
<a name="l01697"></a>01697 
<a name="l01698"></a>01698   uip_connr-&gt;<a class="code" href="a00098.html#a9b6575dd439ad42a38466dcba22fcf58" title="The sequence number that was last sent by us.">snd_nxt</a>[0] = iss[0];
<a name="l01699"></a>01699   uip_connr-&gt;<a class="code" href="a00098.html#a9b6575dd439ad42a38466dcba22fcf58" title="The sequence number that was last sent by us.">snd_nxt</a>[1] = iss[1];
<a name="l01700"></a>01700   uip_connr-&gt;<a class="code" href="a00098.html#a9b6575dd439ad42a38466dcba22fcf58" title="The sequence number that was last sent by us.">snd_nxt</a>[2] = iss[2];
<a name="l01701"></a>01701   uip_connr-&gt;<a class="code" href="a00098.html#a9b6575dd439ad42a38466dcba22fcf58" title="The sequence number that was last sent by us.">snd_nxt</a>[3] = iss[3];
<a name="l01702"></a>01702   uip_connr-&gt;<a class="code" href="a00098.html#a5c55920c6901817dce661762e785614e" title="Length of the data that was previously sent.">len</a> = 1;
<a name="l01703"></a>01703 
<a name="l01704"></a>01704   <span class="comment">/* rcv_nxt should be the seqno from the incoming packet + 1. */</span>
<a name="l01705"></a>01705   uip_connr-&gt;<a class="code" href="a00098.html#a1c0f37a806ed9ae4ed11742696cba2c6" title="The sequence number that we expect to receive next.">rcv_nxt</a>[3] = UIP_TCP_BUF-&gt;seqno[3];
<a name="l01706"></a>01706   uip_connr-&gt;<a class="code" href="a00098.html#a1c0f37a806ed9ae4ed11742696cba2c6" title="The sequence number that we expect to receive next.">rcv_nxt</a>[2] = UIP_TCP_BUF-&gt;seqno[2];
<a name="l01707"></a>01707   uip_connr-&gt;<a class="code" href="a00098.html#a1c0f37a806ed9ae4ed11742696cba2c6" title="The sequence number that we expect to receive next.">rcv_nxt</a>[1] = UIP_TCP_BUF-&gt;seqno[1];
<a name="l01708"></a>01708   uip_connr-&gt;<a class="code" href="a00098.html#a1c0f37a806ed9ae4ed11742696cba2c6" title="The sequence number that we expect to receive next.">rcv_nxt</a>[0] = UIP_TCP_BUF-&gt;seqno[0];
<a name="l01709"></a>01709   uip_add_rcv_nxt(1);
<a name="l01710"></a>01710 
<a name="l01711"></a>01711   <span class="comment">/* Parse the TCP MSS option, if present. */</span>
<a name="l01712"></a>01712   <span class="keywordflow">if</span>((UIP_TCP_BUF-&gt;tcpoffset &amp; 0xf0) &gt; 0x50) {
<a name="l01713"></a>01713     <span class="keywordflow">for</span>(c = 0; c &lt; ((UIP_TCP_BUF-&gt;tcpoffset &gt;&gt; 4) - 5) &lt;&lt; 2 ;) {
<a name="l01714"></a>01714       opt = uip_buf[UIP_TCPIP_HLEN + <a class="code" href="a01828.html#gae6f4a2453dbd8bc60e6a82774552366a" title="The link level header length.">UIP_LLH_LEN</a> + c];
<a name="l01715"></a>01715       <span class="keywordflow">if</span>(opt == TCP_OPT_END) {
<a name="l01716"></a>01716         <span class="comment">/* End of options. */</span>
<a name="l01717"></a>01717         <span class="keywordflow">break</span>;
<a name="l01718"></a>01718       } <span class="keywordflow">else</span> <span class="keywordflow">if</span>(opt == TCP_OPT_NOOP) {
<a name="l01719"></a>01719         ++c;
<a name="l01720"></a>01720         <span class="comment">/* NOP option. */</span>
<a name="l01721"></a>01721       } <span class="keywordflow">else</span> <span class="keywordflow">if</span>(opt == TCP_OPT_MSS &amp;&amp;
<a name="l01722"></a>01722                 uip_buf[UIP_TCPIP_HLEN + <a class="code" href="a01828.html#gae6f4a2453dbd8bc60e6a82774552366a" title="The link level header length.">UIP_LLH_LEN</a> + 1 + c] == TCP_OPT_MSS_LEN) {
<a name="l01723"></a>01723         <span class="comment">/* An MSS option with the right option length. */</span>
<a name="l01724"></a>01724         tmp16 = ((uint16_t)uip_buf[UIP_TCPIP_HLEN + <a class="code" href="a01828.html#gae6f4a2453dbd8bc60e6a82774552366a" title="The link level header length.">UIP_LLH_LEN</a> + 2 + c] &lt;&lt; 8) |
<a name="l01725"></a>01725           (uint16_t)uip_buf[UIP_IPTCPH_LEN + <a class="code" href="a01828.html#gae6f4a2453dbd8bc60e6a82774552366a" title="The link level header length.">UIP_LLH_LEN</a> + 3 + c];
<a name="l01726"></a>01726         uip_connr-&gt;<a class="code" href="a00098.html#a9b2e09e250f0a9dadfe42ef3f1a469e1" title="Initial maximum segment size for the connection.">initialmss</a> = uip_connr-&gt;<a class="code" href="a00098.html#a3f9fbf46c7c80197b1436fcff19151e4" title="Current maximum segment size for the connection.">mss</a> =
<a name="l01727"></a>01727           tmp16 &gt; <a class="code" href="a01824.html#ga4910467b83a639f06739c82cd362037e" title="The TCP maximum segment size.">UIP_TCP_MSS</a>? <a class="code" href="a01824.html#ga4910467b83a639f06739c82cd362037e" title="The TCP maximum segment size.">UIP_TCP_MSS</a>: tmp16;
<a name="l01728"></a>01728    
<a name="l01729"></a>01729         <span class="comment">/* And we are done processing options. */</span>
<a name="l01730"></a>01730         <span class="keywordflow">break</span>;
<a name="l01731"></a>01731       } <span class="keywordflow">else</span> {
<a name="l01732"></a>01732         <span class="comment">/* All other options have a length field, so that we easily</span>
<a name="l01733"></a>01733 <span class="comment">           can skip past them. */</span>
<a name="l01734"></a>01734         <span class="keywordflow">if</span>(uip_buf[UIP_TCPIP_HLEN + <a class="code" href="a01828.html#gae6f4a2453dbd8bc60e6a82774552366a" title="The link level header length.">UIP_LLH_LEN</a> + 1 + c] == 0) {
<a name="l01735"></a>01735           <span class="comment">/* If the length field is zero, the options are malformed</span>
<a name="l01736"></a>01736 <span class="comment">             and we don&#39;t process them further. */</span>
<a name="l01737"></a>01737           <span class="keywordflow">break</span>;
<a name="l01738"></a>01738         }
<a name="l01739"></a>01739         c += uip_buf[UIP_TCPIP_HLEN + <a class="code" href="a01828.html#gae6f4a2453dbd8bc60e6a82774552366a" title="The link level header length.">UIP_LLH_LEN</a> + 1 + c];
<a name="l01740"></a>01740       }
<a name="l01741"></a>01741     }
<a name="l01742"></a>01742   }
<a name="l01743"></a>01743   
<a name="l01744"></a>01744   <span class="comment">/* Our response will be a SYNACK. */</span>
<a name="l01745"></a>01745 <span class="preprocessor">#if UIP_ACTIVE_OPEN</span>
<a name="l01746"></a>01746 <span class="preprocessor"></span> tcp_send_synack:
<a name="l01747"></a>01747   UIP_TCP_BUF-&gt;flags = TCP_ACK;
<a name="l01748"></a>01748   
<a name="l01749"></a>01749  tcp_send_syn:
<a name="l01750"></a>01750   UIP_TCP_BUF-&gt;flags |= TCP_SYN;
<a name="l01751"></a>01751 <span class="preprocessor">#else </span><span class="comment">/* UIP_ACTIVE_OPEN */</span>
<a name="l01752"></a>01752  tcp_send_synack:
<a name="l01753"></a>01753   UIP_TCP_BUF-&gt;flags = TCP_SYN | TCP_ACK;
<a name="l01754"></a>01754 <span class="preprocessor">#endif </span><span class="comment">/* UIP_ACTIVE_OPEN */</span>
<a name="l01755"></a>01755   
<a name="l01756"></a>01756   <span class="comment">/* We send out the TCP Maximum Segment Size option with our</span>
<a name="l01757"></a>01757 <span class="comment">     SYNACK. */</span>
<a name="l01758"></a>01758   UIP_TCP_BUF-&gt;optdata[0] = TCP_OPT_MSS;
<a name="l01759"></a>01759   UIP_TCP_BUF-&gt;optdata[1] = TCP_OPT_MSS_LEN;
<a name="l01760"></a>01760   UIP_TCP_BUF-&gt;optdata[2] = (<a class="code" href="a01824.html#ga4910467b83a639f06739c82cd362037e" title="The TCP maximum segment size.">UIP_TCP_MSS</a>) / 256;
<a name="l01761"></a>01761   UIP_TCP_BUF-&gt;optdata[3] = (<a class="code" href="a01824.html#ga4910467b83a639f06739c82cd362037e" title="The TCP maximum segment size.">UIP_TCP_MSS</a>) &amp; 255;
<a name="l01762"></a>01762   <a class="code" href="a01926.html#ga72af00d45662ba0dc2ba3781a556e25b" title="The length of the packet in the uip_buf buffer.">uip_len</a> = UIP_IPTCPH_LEN + TCP_OPT_MSS_LEN;
<a name="l01763"></a>01763   UIP_TCP_BUF-&gt;tcpoffset = ((UIP_TCPH_LEN + TCP_OPT_MSS_LEN) / 4) &lt;&lt; 4;
<a name="l01764"></a>01764   <span class="keywordflow">goto</span> tcp_send;
<a name="l01765"></a>01765 
<a name="l01766"></a>01766   <span class="comment">/* This label will be jumped to if we found an active connection. */</span>
<a name="l01767"></a>01767  found:
<a name="l01768"></a>01768   PRINTF(<span class="stringliteral">&quot;In found\n&quot;</span>);
<a name="l01769"></a>01769   uip_conn = uip_connr;
<a name="l01770"></a>01770   uip_flags = 0;
<a name="l01771"></a>01771   <span class="comment">/* We do a very naive form of TCP reset processing; we just accept</span>
<a name="l01772"></a>01772 <span class="comment">     any RST and kill our connection. We should in fact check if the</span>
<a name="l01773"></a>01773 <span class="comment">     sequence number of this reset is wihtin our advertised window</span>
<a name="l01774"></a>01774 <span class="comment">     before we accept the reset. */</span>
<a name="l01775"></a>01775   <span class="keywordflow">if</span>(UIP_TCP_BUF-&gt;flags &amp; TCP_RST) {
<a name="l01776"></a>01776     uip_connr-&gt;<a class="code" href="a00098.html#aec4787356d50d91abe5b27d472abe630" title="TCP state and flags.">tcpstateflags</a> = UIP_CLOSED;
<a name="l01777"></a>01777     UIP_LOG(<span class="stringliteral">&quot;tcp: got reset, aborting connection.&quot;</span>);
<a name="l01778"></a>01778     uip_flags = UIP_ABORT;
<a name="l01779"></a>01779     <a class="code" href="a01808.html#ga41aa744caa46913b3b3aedb2a4e78546" title="The name of the application function that uIP should call in response to TCP/IP events.">UIP_APPCALL</a>();
<a name="l01780"></a>01780     <span class="keywordflow">goto</span> drop;
<a name="l01781"></a>01781   }
<a name="l01782"></a>01782   <span class="comment">/* Calculate the length of the data, if the application has sent</span>
<a name="l01783"></a>01783 <span class="comment">     any data to us. */</span>
<a name="l01784"></a>01784   c = (UIP_TCP_BUF-&gt;tcpoffset &gt;&gt; 4) &lt;&lt; 2;
<a name="l01785"></a>01785   <span class="comment">/* uip_len will contain the length of the actual TCP data. This is</span>
<a name="l01786"></a>01786 <span class="comment">     calculated by subtracing the length of the TCP header (in</span>
<a name="l01787"></a>01787 <span class="comment">     c) and the length of the IP header (20 bytes). */</span>
<a name="l01788"></a>01788   <a class="code" href="a01926.html#ga72af00d45662ba0dc2ba3781a556e25b" title="The length of the packet in the uip_buf buffer.">uip_len</a> = <a class="code" href="a01926.html#ga72af00d45662ba0dc2ba3781a556e25b" title="The length of the packet in the uip_buf buffer.">uip_len</a> - c - UIP_IPH_LEN;
<a name="l01789"></a>01789 
<a name="l01790"></a>01790   <span class="comment">/* First, check if the sequence number of the incoming packet is</span>
<a name="l01791"></a>01791 <span class="comment">     what we&#39;re expecting next. If not, we send out an ACK with the</span>
<a name="l01792"></a>01792 <span class="comment">     correct numbers in, unless we are in the SYN_RCVD state and</span>
<a name="l01793"></a>01793 <span class="comment">     receive a SYN, in which case we should retransmit our SYNACK</span>
<a name="l01794"></a>01794 <span class="comment">     (which is done futher down). */</span>
<a name="l01795"></a>01795   <span class="keywordflow">if</span>(!((((uip_connr-&gt;<a class="code" href="a00098.html#aec4787356d50d91abe5b27d472abe630" title="TCP state and flags.">tcpstateflags</a> &amp; UIP_TS_MASK) == UIP_SYN_SENT) &amp;&amp;
<a name="l01796"></a>01796         ((UIP_TCP_BUF-&gt;flags &amp; TCP_CTL) == (TCP_SYN | TCP_ACK))) ||
<a name="l01797"></a>01797        (((uip_connr-&gt;<a class="code" href="a00098.html#aec4787356d50d91abe5b27d472abe630" title="TCP state and flags.">tcpstateflags</a> &amp; UIP_TS_MASK) == UIP_SYN_RCVD) &amp;&amp;
<a name="l01798"></a>01798         ((UIP_TCP_BUF-&gt;flags &amp; TCP_CTL) == TCP_SYN)))) {
<a name="l01799"></a>01799     <span class="keywordflow">if</span>((<a class="code" href="a01926.html#ga72af00d45662ba0dc2ba3781a556e25b" title="The length of the packet in the uip_buf buffer.">uip_len</a> &gt; 0 || ((UIP_TCP_BUF-&gt;flags &amp; (TCP_SYN | TCP_FIN)) != 0)) &amp;&amp;
<a name="l01800"></a>01800        (UIP_TCP_BUF-&gt;seqno[0] != uip_connr-&gt;<a class="code" href="a00098.html#a1c0f37a806ed9ae4ed11742696cba2c6" title="The sequence number that we expect to receive next.">rcv_nxt</a>[0] ||
<a name="l01801"></a>01801         UIP_TCP_BUF-&gt;seqno[1] != uip_connr-&gt;<a class="code" href="a00098.html#a1c0f37a806ed9ae4ed11742696cba2c6" title="The sequence number that we expect to receive next.">rcv_nxt</a>[1] ||
<a name="l01802"></a>01802         UIP_TCP_BUF-&gt;seqno[2] != uip_connr-&gt;<a class="code" href="a00098.html#a1c0f37a806ed9ae4ed11742696cba2c6" title="The sequence number that we expect to receive next.">rcv_nxt</a>[2] ||
<a name="l01803"></a>01803         UIP_TCP_BUF-&gt;seqno[3] != uip_connr-&gt;<a class="code" href="a00098.html#a1c0f37a806ed9ae4ed11742696cba2c6" title="The sequence number that we expect to receive next.">rcv_nxt</a>[3])) {
<a name="l01804"></a>01804 
<a name="l01805"></a>01805       <span class="keywordflow">if</span>(UIP_TCP_BUF-&gt;flags &amp; TCP_SYN) {
<a name="l01806"></a>01806         <span class="keywordflow">goto</span> tcp_send_synack;
<a name="l01807"></a>01807       }
<a name="l01808"></a>01808       <span class="keywordflow">goto</span> tcp_send_ack;
<a name="l01809"></a>01809     }
<a name="l01810"></a>01810   }
<a name="l01811"></a>01811 
<a name="l01812"></a>01812   <span class="comment">/* Next, check if the incoming segment acknowledges any outstanding</span>
<a name="l01813"></a>01813 <span class="comment">     data. If so, we update the sequence number, reset the length of</span>
<a name="l01814"></a>01814 <span class="comment">     the outstanding data, calculate RTT estimations, and reset the</span>
<a name="l01815"></a>01815 <span class="comment">     retransmission timer. */</span>
<a name="l01816"></a>01816   <span class="keywordflow">if</span>((UIP_TCP_BUF-&gt;flags &amp; TCP_ACK) &amp;&amp; uip_outstanding(uip_connr)) {
<a name="l01817"></a>01817     <a class="code" href="a01926.html#ga5a380cbebc834ec7aea86f6cfff7f19e" title="Carry out a 32-bit addition.">uip_add32</a>(uip_connr-&gt;<a class="code" href="a00098.html#a9b6575dd439ad42a38466dcba22fcf58" title="The sequence number that was last sent by us.">snd_nxt</a>, uip_connr-&gt;<a class="code" href="a00098.html#a5c55920c6901817dce661762e785614e" title="Length of the data that was previously sent.">len</a>);
<a name="l01818"></a>01818 
<a name="l01819"></a>01819     <span class="keywordflow">if</span>(UIP_TCP_BUF-&gt;ackno[0] == uip_acc32[0] &amp;&amp;
<a name="l01820"></a>01820        UIP_TCP_BUF-&gt;ackno[1] == uip_acc32[1] &amp;&amp;
<a name="l01821"></a>01821        UIP_TCP_BUF-&gt;ackno[2] == uip_acc32[2] &amp;&amp;
<a name="l01822"></a>01822        UIP_TCP_BUF-&gt;ackno[3] == uip_acc32[3]) {
<a name="l01823"></a>01823       <span class="comment">/* Update sequence number. */</span>
<a name="l01824"></a>01824       uip_connr-&gt;<a class="code" href="a00098.html#a9b6575dd439ad42a38466dcba22fcf58" title="The sequence number that was last sent by us.">snd_nxt</a>[0] = uip_acc32[0];
<a name="l01825"></a>01825       uip_connr-&gt;<a class="code" href="a00098.html#a9b6575dd439ad42a38466dcba22fcf58" title="The sequence number that was last sent by us.">snd_nxt</a>[1] = uip_acc32[1];
<a name="l01826"></a>01826       uip_connr-&gt;<a class="code" href="a00098.html#a9b6575dd439ad42a38466dcba22fcf58" title="The sequence number that was last sent by us.">snd_nxt</a>[2] = uip_acc32[2];
<a name="l01827"></a>01827       uip_connr-&gt;<a class="code" href="a00098.html#a9b6575dd439ad42a38466dcba22fcf58" title="The sequence number that was last sent by us.">snd_nxt</a>[3] = uip_acc32[3];
<a name="l01828"></a>01828    
<a name="l01829"></a>01829       <span class="comment">/* Do RTT estimation, unless we have done retransmissions. */</span>
<a name="l01830"></a>01830       <span class="keywordflow">if</span>(uip_connr-&gt;<a class="code" href="a00098.html#a974df0fa0057819fd67109d9f8f1beeb" title="The number of retransmissions for the last segment sent.">nrtx</a> == 0) {
<a name="l01831"></a>01831         <span class="keywordtype">signed</span> <span class="keywordtype">char</span> m;
<a name="l01832"></a>01832         m = uip_connr-&gt;<a class="code" href="a00098.html#aec8e06ea812558e5723d498f99faec63" title="Retransmission time-out.">rto</a> - uip_connr-&gt;<a class="code" href="a00098.html#a2d0c3e645bbae89194856aa5a8f49e4d" title="The retransmission timer.">timer</a>;
<a name="l01833"></a>01833         <span class="comment">/* This is taken directly from VJs original code in his paper */</span>
<a name="l01834"></a>01834         m = m - (uip_connr-&gt;<a class="code" href="a00098.html#a4f60a7dd9de9f9db9c63df199fc59088" title="Retransmission time-out calculation state variable.">sa</a> &gt;&gt; 3);
<a name="l01835"></a>01835         uip_connr-&gt;<a class="code" href="a00098.html#a4f60a7dd9de9f9db9c63df199fc59088" title="Retransmission time-out calculation state variable.">sa</a> += m;
<a name="l01836"></a>01836         <span class="keywordflow">if</span>(m &lt; 0) {
<a name="l01837"></a>01837           m = -m;
<a name="l01838"></a>01838         }
<a name="l01839"></a>01839         m = m - (uip_connr-&gt;<a class="code" href="a00098.html#a82c6070fc4281ac4f8d427fd1a1a3655" title="Retransmission time-out calculation state variable.">sv</a> &gt;&gt; 2);
<a name="l01840"></a>01840         uip_connr-&gt;<a class="code" href="a00098.html#a82c6070fc4281ac4f8d427fd1a1a3655" title="Retransmission time-out calculation state variable.">sv</a> += m;
<a name="l01841"></a>01841         uip_connr-&gt;<a class="code" href="a00098.html#aec8e06ea812558e5723d498f99faec63" title="Retransmission time-out.">rto</a> = (uip_connr-&gt;<a class="code" href="a00098.html#a4f60a7dd9de9f9db9c63df199fc59088" title="Retransmission time-out calculation state variable.">sa</a> &gt;&gt; 3) + uip_connr-&gt;<a class="code" href="a00098.html#a82c6070fc4281ac4f8d427fd1a1a3655" title="Retransmission time-out calculation state variable.">sv</a>;
<a name="l01842"></a>01842 
<a name="l01843"></a>01843       }
<a name="l01844"></a>01844       <span class="comment">/* Set the acknowledged flag. */</span>
<a name="l01845"></a>01845       uip_flags = UIP_ACKDATA;
<a name="l01846"></a>01846       <span class="comment">/* Reset the retransmission timer. */</span>
<a name="l01847"></a>01847       uip_connr-&gt;<a class="code" href="a00098.html#a2d0c3e645bbae89194856aa5a8f49e4d" title="The retransmission timer.">timer</a> = uip_connr-&gt;<a class="code" href="a00098.html#aec8e06ea812558e5723d498f99faec63" title="Retransmission time-out.">rto</a>;
<a name="l01848"></a>01848 
<a name="l01849"></a>01849       <span class="comment">/* Reset length of outstanding data. */</span>
<a name="l01850"></a>01850       uip_connr-&gt;<a class="code" href="a00098.html#a5c55920c6901817dce661762e785614e" title="Length of the data that was previously sent.">len</a> = 0;
<a name="l01851"></a>01851     }
<a name="l01852"></a>01852     
<a name="l01853"></a>01853   }
<a name="l01854"></a>01854 
<a name="l01855"></a>01855   <span class="comment">/* Do different things depending on in what state the connection is. */</span>
<a name="l01856"></a>01856   <span class="keywordflow">switch</span>(uip_connr-&gt;<a class="code" href="a00098.html#aec4787356d50d91abe5b27d472abe630" title="TCP state and flags.">tcpstateflags</a> &amp; UIP_TS_MASK) {
<a name="l01857"></a>01857     <span class="comment">/* CLOSED and LISTEN are not handled here. CLOSE_WAIT is not</span>
<a name="l01858"></a>01858 <span class="comment">       implemented, since we force the application to close when the</span>
<a name="l01859"></a>01859 <span class="comment">       peer sends a FIN (hence the application goes directly from</span>
<a name="l01860"></a>01860 <span class="comment">       ESTABLISHED to LAST_ACK). */</span>
<a name="l01861"></a>01861     <span class="keywordflow">case</span> UIP_SYN_RCVD:
<a name="l01862"></a>01862       <span class="comment">/* In SYN_RCVD we have sent out a SYNACK in response to a SYN, and</span>
<a name="l01863"></a>01863 <span class="comment">         we are waiting for an ACK that acknowledges the data we sent</span>
<a name="l01864"></a>01864 <span class="comment">         out the last time. Therefore, we want to have the UIP_ACKDATA</span>
<a name="l01865"></a>01865 <span class="comment">         flag set. If so, we enter the ESTABLISHED state. */</span>
<a name="l01866"></a>01866       <span class="keywordflow">if</span>(uip_flags &amp; UIP_ACKDATA) {
<a name="l01867"></a>01867         uip_connr-&gt;<a class="code" href="a00098.html#aec4787356d50d91abe5b27d472abe630" title="TCP state and flags.">tcpstateflags</a> = UIP_ESTABLISHED;
<a name="l01868"></a>01868         uip_flags = UIP_CONNECTED;
<a name="l01869"></a>01869         uip_connr-&gt;<a class="code" href="a00098.html#a5c55920c6901817dce661762e785614e" title="Length of the data that was previously sent.">len</a> = 0;
<a name="l01870"></a>01870         <span class="keywordflow">if</span>(<a class="code" href="a01926.html#ga72af00d45662ba0dc2ba3781a556e25b" title="The length of the packet in the uip_buf buffer.">uip_len</a> &gt; 0) {
<a name="l01871"></a>01871           uip_flags |= UIP_NEWDATA;
<a name="l01872"></a>01872           uip_add_rcv_nxt(<a class="code" href="a01926.html#ga72af00d45662ba0dc2ba3781a556e25b" title="The length of the packet in the uip_buf buffer.">uip_len</a>);
<a name="l01873"></a>01873         }
<a name="l01874"></a>01874         uip_slen = 0;
<a name="l01875"></a>01875         <a class="code" href="a01808.html#ga41aa744caa46913b3b3aedb2a4e78546" title="The name of the application function that uIP should call in response to TCP/IP events.">UIP_APPCALL</a>();
<a name="l01876"></a>01876         <span class="keywordflow">goto</span> appsend;
<a name="l01877"></a>01877       }
<a name="l01878"></a>01878       <span class="comment">/* We need to retransmit the SYNACK */</span>
<a name="l01879"></a>01879       <span class="keywordflow">if</span>((UIP_TCP_BUF-&gt;flags &amp; TCP_CTL) == TCP_SYN) {
<a name="l01880"></a>01880         <span class="keywordflow">goto</span> tcp_send_synack;
<a name="l01881"></a>01881       }
<a name="l01882"></a>01882       <span class="keywordflow">goto</span> drop;
<a name="l01883"></a>01883 <span class="preprocessor">#if UIP_ACTIVE_OPEN</span>
<a name="l01884"></a>01884 <span class="preprocessor"></span>    <span class="keywordflow">case</span> UIP_SYN_SENT:
<a name="l01885"></a>01885       <span class="comment">/* In SYN_SENT, we wait for a SYNACK that is sent in response to</span>
<a name="l01886"></a>01886 <span class="comment">         our SYN. The rcv_nxt is set to sequence number in the SYNACK</span>
<a name="l01887"></a>01887 <span class="comment">         plus one, and we send an ACK. We move into the ESTABLISHED</span>
<a name="l01888"></a>01888 <span class="comment">         state. */</span>
<a name="l01889"></a>01889       <span class="keywordflow">if</span>((uip_flags &amp; UIP_ACKDATA) &amp;&amp;
<a name="l01890"></a>01890          (UIP_TCP_BUF-&gt;flags &amp; TCP_CTL) == (TCP_SYN | TCP_ACK)) {
<a name="l01891"></a>01891 
<a name="l01892"></a>01892         <span class="comment">/* Parse the TCP MSS option, if present. */</span>
<a name="l01893"></a>01893         <span class="keywordflow">if</span>((UIP_TCP_BUF-&gt;tcpoffset &amp; 0xf0) &gt; 0x50) {
<a name="l01894"></a>01894           <span class="keywordflow">for</span>(c = 0; c &lt; ((UIP_TCP_BUF-&gt;tcpoffset &gt;&gt; 4) - 5) &lt;&lt; 2 ;) {
<a name="l01895"></a>01895             opt = uip_buf[UIP_IPTCPH_LEN + <a class="code" href="a01828.html#gae6f4a2453dbd8bc60e6a82774552366a" title="The link level header length.">UIP_LLH_LEN</a> + c];
<a name="l01896"></a>01896             <span class="keywordflow">if</span>(opt == TCP_OPT_END) {
<a name="l01897"></a>01897               <span class="comment">/* End of options. */</span>
<a name="l01898"></a>01898               <span class="keywordflow">break</span>;
<a name="l01899"></a>01899             } <span class="keywordflow">else</span> <span class="keywordflow">if</span>(opt == TCP_OPT_NOOP) {
<a name="l01900"></a>01900               ++c;
<a name="l01901"></a>01901               <span class="comment">/* NOP option. */</span>
<a name="l01902"></a>01902             } <span class="keywordflow">else</span> <span class="keywordflow">if</span>(opt == TCP_OPT_MSS &amp;&amp;
<a name="l01903"></a>01903                       uip_buf[UIP_TCPIP_HLEN + <a class="code" href="a01828.html#gae6f4a2453dbd8bc60e6a82774552366a" title="The link level header length.">UIP_LLH_LEN</a> + 1 + c] == TCP_OPT_MSS_LEN) {
<a name="l01904"></a>01904               <span class="comment">/* An MSS option with the right option length. */</span>
<a name="l01905"></a>01905               tmp16 = (uip_buf[UIP_TCPIP_HLEN + <a class="code" href="a01828.html#gae6f4a2453dbd8bc60e6a82774552366a" title="The link level header length.">UIP_LLH_LEN</a> + 2 + c] &lt;&lt; 8) |
<a name="l01906"></a>01906                 uip_buf[UIP_TCPIP_HLEN + <a class="code" href="a01828.html#gae6f4a2453dbd8bc60e6a82774552366a" title="The link level header length.">UIP_LLH_LEN</a> + 3 + c];
<a name="l01907"></a>01907               uip_connr-&gt;<a class="code" href="a00098.html#a9b2e09e250f0a9dadfe42ef3f1a469e1" title="Initial maximum segment size for the connection.">initialmss</a> =
<a name="l01908"></a>01908                 uip_connr-&gt;<a class="code" href="a00098.html#a3f9fbf46c7c80197b1436fcff19151e4" title="Current maximum segment size for the connection.">mss</a> = tmp16 &gt; <a class="code" href="a01824.html#ga4910467b83a639f06739c82cd362037e" title="The TCP maximum segment size.">UIP_TCP_MSS</a>? <a class="code" href="a01824.html#ga4910467b83a639f06739c82cd362037e" title="The TCP maximum segment size.">UIP_TCP_MSS</a>: tmp16;
<a name="l01909"></a>01909 
<a name="l01910"></a>01910               <span class="comment">/* And we are done processing options. */</span>
<a name="l01911"></a>01911               <span class="keywordflow">break</span>;
<a name="l01912"></a>01912             } <span class="keywordflow">else</span> {
<a name="l01913"></a>01913               <span class="comment">/* All other options have a length field, so that we easily</span>
<a name="l01914"></a>01914 <span class="comment">                 can skip past them. */</span>
<a name="l01915"></a>01915               <span class="keywordflow">if</span>(uip_buf[UIP_TCPIP_HLEN + <a class="code" href="a01828.html#gae6f4a2453dbd8bc60e6a82774552366a" title="The link level header length.">UIP_LLH_LEN</a> + 1 + c] == 0) {
<a name="l01916"></a>01916                 <span class="comment">/* If the length field is zero, the options are malformed</span>
<a name="l01917"></a>01917 <span class="comment">                   and we don&#39;t process them further. */</span>
<a name="l01918"></a>01918                 <span class="keywordflow">break</span>;
<a name="l01919"></a>01919               }
<a name="l01920"></a>01920               c += uip_buf[UIP_TCPIP_HLEN + <a class="code" href="a01828.html#gae6f4a2453dbd8bc60e6a82774552366a" title="The link level header length.">UIP_LLH_LEN</a> + 1 + c];
<a name="l01921"></a>01921             }
<a name="l01922"></a>01922           }
<a name="l01923"></a>01923         }
<a name="l01924"></a>01924         uip_connr-&gt;<a class="code" href="a00098.html#aec4787356d50d91abe5b27d472abe630" title="TCP state and flags.">tcpstateflags</a> = UIP_ESTABLISHED;
<a name="l01925"></a>01925         uip_connr-&gt;<a class="code" href="a00098.html#a1c0f37a806ed9ae4ed11742696cba2c6" title="The sequence number that we expect to receive next.">rcv_nxt</a>[0] = UIP_TCP_BUF-&gt;seqno[0];
<a name="l01926"></a>01926         uip_connr-&gt;<a class="code" href="a00098.html#a1c0f37a806ed9ae4ed11742696cba2c6" title="The sequence number that we expect to receive next.">rcv_nxt</a>[1] = UIP_TCP_BUF-&gt;seqno[1];
<a name="l01927"></a>01927         uip_connr-&gt;<a class="code" href="a00098.html#a1c0f37a806ed9ae4ed11742696cba2c6" title="The sequence number that we expect to receive next.">rcv_nxt</a>[2] = UIP_TCP_BUF-&gt;seqno[2];
<a name="l01928"></a>01928         uip_connr-&gt;<a class="code" href="a00098.html#a1c0f37a806ed9ae4ed11742696cba2c6" title="The sequence number that we expect to receive next.">rcv_nxt</a>[3] = UIP_TCP_BUF-&gt;seqno[3];
<a name="l01929"></a>01929         uip_add_rcv_nxt(1);
<a name="l01930"></a>01930         uip_flags = UIP_CONNECTED | UIP_NEWDATA;
<a name="l01931"></a>01931         uip_connr-&gt;<a class="code" href="a00098.html#a5c55920c6901817dce661762e785614e" title="Length of the data that was previously sent.">len</a> = 0;
<a name="l01932"></a>01932         <a class="code" href="a01926.html#ga72af00d45662ba0dc2ba3781a556e25b" title="The length of the packet in the uip_buf buffer.">uip_len</a> = 0;
<a name="l01933"></a>01933         uip_slen = 0;
<a name="l01934"></a>01934         <a class="code" href="a01808.html#ga41aa744caa46913b3b3aedb2a4e78546" title="The name of the application function that uIP should call in response to TCP/IP events.">UIP_APPCALL</a>();
<a name="l01935"></a>01935         <span class="keywordflow">goto</span> appsend;
<a name="l01936"></a>01936       }
<a name="l01937"></a>01937       <span class="comment">/* Inform the application that the connection failed */</span>
<a name="l01938"></a>01938       uip_flags = UIP_ABORT;
<a name="l01939"></a>01939       <a class="code" href="a01808.html#ga41aa744caa46913b3b3aedb2a4e78546" title="The name of the application function that uIP should call in response to TCP/IP events.">UIP_APPCALL</a>();
<a name="l01940"></a>01940       <span class="comment">/* The connection is closed after we send the RST */</span>
<a name="l01941"></a>01941       uip_conn-&gt;<a class="code" href="a00098.html#aec4787356d50d91abe5b27d472abe630" title="TCP state and flags.">tcpstateflags</a> = UIP_CLOSED;
<a name="l01942"></a>01942       <span class="keywordflow">goto</span> reset;
<a name="l01943"></a>01943 <span class="preprocessor">#endif </span><span class="comment">/* UIP_ACTIVE_OPEN */</span>
<a name="l01944"></a>01944     
<a name="l01945"></a>01945     <span class="keywordflow">case</span> UIP_ESTABLISHED:
<a name="l01946"></a>01946       <span class="comment">/* In the ESTABLISHED state, we call upon the application to feed</span>
<a name="l01947"></a>01947 <span class="comment">         data into the uip_buf. If the UIP_ACKDATA flag is set, the</span>
<a name="l01948"></a>01948 <span class="comment">         application should put new data into the buffer, otherwise we are</span>
<a name="l01949"></a>01949 <span class="comment">         retransmitting an old segment, and the application should put that</span>
<a name="l01950"></a>01950 <span class="comment">         data into the buffer.</span>
<a name="l01951"></a>01951 <span class="comment"></span>
<a name="l01952"></a>01952 <span class="comment">         If the incoming packet is a FIN, we should close the connection on</span>
<a name="l01953"></a>01953 <span class="comment">         this side as well, and we send out a FIN and enter the LAST_ACK</span>
<a name="l01954"></a>01954 <span class="comment">         state. We require that there is no outstanding data; otherwise the</span>
<a name="l01955"></a>01955 <span class="comment">         sequence numbers will be screwed up. */</span>
<a name="l01956"></a>01956 
<a name="l01957"></a>01957       <span class="keywordflow">if</span>(UIP_TCP_BUF-&gt;flags &amp; TCP_FIN &amp;&amp; !(uip_connr-&gt;<a class="code" href="a00098.html#aec4787356d50d91abe5b27d472abe630" title="TCP state and flags.">tcpstateflags</a> &amp; UIP_STOPPED)) {
<a name="l01958"></a>01958         <span class="keywordflow">if</span>(uip_outstanding(uip_connr)) {
<a name="l01959"></a>01959           <span class="keywordflow">goto</span> drop;
<a name="l01960"></a>01960         }
<a name="l01961"></a>01961         uip_add_rcv_nxt(1 + <a class="code" href="a01926.html#ga72af00d45662ba0dc2ba3781a556e25b" title="The length of the packet in the uip_buf buffer.">uip_len</a>);
<a name="l01962"></a>01962         uip_flags |= UIP_CLOSE;
<a name="l01963"></a>01963         <span class="keywordflow">if</span>(<a class="code" href="a01926.html#ga72af00d45662ba0dc2ba3781a556e25b" title="The length of the packet in the uip_buf buffer.">uip_len</a> &gt; 0) {
<a name="l01964"></a>01964           uip_flags |= UIP_NEWDATA;
<a name="l01965"></a>01965         }
<a name="l01966"></a>01966         <a class="code" href="a01808.html#ga41aa744caa46913b3b3aedb2a4e78546" title="The name of the application function that uIP should call in response to TCP/IP events.">UIP_APPCALL</a>();
<a name="l01967"></a>01967         uip_connr-&gt;<a class="code" href="a00098.html#a5c55920c6901817dce661762e785614e" title="Length of the data that was previously sent.">len</a> = 1;
<a name="l01968"></a>01968         uip_connr-&gt;<a class="code" href="a00098.html#aec4787356d50d91abe5b27d472abe630" title="TCP state and flags.">tcpstateflags</a> = UIP_LAST_ACK;
<a name="l01969"></a>01969         uip_connr-&gt;<a class="code" href="a00098.html#a974df0fa0057819fd67109d9f8f1beeb" title="The number of retransmissions for the last segment sent.">nrtx</a> = 0;
<a name="l01970"></a>01970       tcp_send_finack:
<a name="l01971"></a>01971         UIP_TCP_BUF-&gt;flags = TCP_FIN | TCP_ACK;
<a name="l01972"></a>01972         <span class="keywordflow">goto</span> tcp_send_nodata;
<a name="l01973"></a>01973       }
<a name="l01974"></a>01974 
<a name="l01975"></a>01975       <span class="comment">/* Check the URG flag. If this is set, the segment carries urgent</span>
<a name="l01976"></a>01976 <span class="comment">         data that we must pass to the application. */</span>
<a name="l01977"></a>01977       <span class="keywordflow">if</span>((UIP_TCP_BUF-&gt;flags &amp; TCP_URG) != 0) {
<a name="l01978"></a>01978 <span class="preprocessor">#if UIP_URGDATA &gt; 0</span>
<a name="l01979"></a>01979 <span class="preprocessor"></span>        uip_urglen = (UIP_TCP_BUF-&gt;urgp[0] &lt;&lt; 8) | UIP_TCP_BUF-&gt;urgp[1];
<a name="l01980"></a>01980         <span class="keywordflow">if</span>(uip_urglen &gt; <a class="code" href="a01926.html#ga72af00d45662ba0dc2ba3781a556e25b" title="The length of the packet in the uip_buf buffer.">uip_len</a>) {
<a name="l01981"></a>01981           <span class="comment">/* There is more urgent data in the next segment to come. */</span>
<a name="l01982"></a>01982           uip_urglen = <a class="code" href="a01926.html#ga72af00d45662ba0dc2ba3781a556e25b" title="The length of the packet in the uip_buf buffer.">uip_len</a>;
<a name="l01983"></a>01983         }
<a name="l01984"></a>01984         uip_add_rcv_nxt(uip_urglen);
<a name="l01985"></a>01985         <a class="code" href="a01926.html#ga72af00d45662ba0dc2ba3781a556e25b" title="The length of the packet in the uip_buf buffer.">uip_len</a> -= uip_urglen;
<a name="l01986"></a>01986         uip_urgdata = <a class="code" href="a01926.html#ga561b8eda32e059d4e7397f776268cc63" title="Pointer to the application data in the packet buffer.">uip_appdata</a>;
<a name="l01987"></a>01987         <a class="code" href="a01926.html#ga561b8eda32e059d4e7397f776268cc63" title="Pointer to the application data in the packet buffer.">uip_appdata</a> += uip_urglen;
<a name="l01988"></a>01988       } <span class="keywordflow">else</span> {
<a name="l01989"></a>01989         uip_urglen = 0;
<a name="l01990"></a>01990 <span class="preprocessor">#else </span><span class="comment">/* UIP_URGDATA &gt; 0 */</span>
<a name="l01991"></a>01991         <a class="code" href="a01926.html#ga561b8eda32e059d4e7397f776268cc63" title="Pointer to the application data in the packet buffer.">uip_appdata</a> = ((<span class="keywordtype">char</span> *)<a class="code" href="a01926.html#ga561b8eda32e059d4e7397f776268cc63" title="Pointer to the application data in the packet buffer.">uip_appdata</a>) + ((UIP_TCP_BUF-&gt;urgp[0] &lt;&lt; 8) | UIP_TCP_BUF-&gt;urgp[1]);
<a name="l01992"></a>01992         <a class="code" href="a01926.html#ga72af00d45662ba0dc2ba3781a556e25b" title="The length of the packet in the uip_buf buffer.">uip_len</a> -= (UIP_TCP_BUF-&gt;urgp[0] &lt;&lt; 8) | UIP_TCP_BUF-&gt;urgp[1];
<a name="l01993"></a>01993 #endif <span class="comment">/* UIP_URGDATA &gt; 0 */</span>
<a name="l01994"></a>01994       }
<a name="l01995"></a>01995 
<a name="l01996"></a>01996       <span class="comment">/* If uip_len &gt; 0 we have TCP data in the packet, and we flag this</span>
<a name="l01997"></a>01997 <span class="comment">         by setting the UIP_NEWDATA flag and update the sequence number</span>
<a name="l01998"></a>01998 <span class="comment">         we acknowledge. If the application has stopped the dataflow</span>
<a name="l01999"></a>01999 <span class="comment">         using uip_stop(), we must not accept any data packets from the</span>
<a name="l02000"></a>02000 <span class="comment">         remote host. */</span>
<a name="l02001"></a>02001       <span class="keywordflow">if</span>(<a class="code" href="a01926.html#ga72af00d45662ba0dc2ba3781a556e25b" title="The length of the packet in the uip_buf buffer.">uip_len</a> &gt; 0 &amp;&amp; !(uip_connr-&gt;<a class="code" href="a00098.html#aec4787356d50d91abe5b27d472abe630" title="TCP state and flags.">tcpstateflags</a> &amp; UIP_STOPPED)) {
<a name="l02002"></a>02002         uip_flags |= UIP_NEWDATA;
<a name="l02003"></a>02003         uip_add_rcv_nxt(<a class="code" href="a01926.html#ga72af00d45662ba0dc2ba3781a556e25b" title="The length of the packet in the uip_buf buffer.">uip_len</a>);
<a name="l02004"></a>02004       }
<a name="l02005"></a>02005 
<a name="l02006"></a>02006       <span class="comment">/* Check if the available buffer space advertised by the other end</span>
<a name="l02007"></a>02007 <span class="comment">         is smaller than the initial MSS for this connection. If so, we</span>
<a name="l02008"></a>02008 <span class="comment">         set the current MSS to the window size to ensure that the</span>
<a name="l02009"></a>02009 <span class="comment">         application does not send more data than the other end can</span>
<a name="l02010"></a>02010 <span class="comment">         handle.</span>
<a name="l02011"></a>02011 <span class="comment"></span>
<a name="l02012"></a>02012 <span class="comment">         If the remote host advertises a zero window, we set the MSS to</span>
<a name="l02013"></a>02013 <span class="comment">         the initial MSS so that the application will send an entire MSS</span>
<a name="l02014"></a>02014 <span class="comment">         of data. This data will not be acknowledged by the receiver,</span>
<a name="l02015"></a>02015 <span class="comment">         and the application will retransmit it. This is called the</span>
<a name="l02016"></a>02016 <span class="comment">         &quot;persistent timer&quot; and uses the retransmission mechanim.</span>
<a name="l02017"></a>02017 <span class="comment">      */</span>
<a name="l02018"></a>02018       tmp16 = ((uint16_t)UIP_TCP_BUF-&gt;wnd[0] &lt;&lt; 8) + (uint16_t)UIP_TCP_BUF-&gt;wnd[1];
<a name="l02019"></a>02019       <span class="keywordflow">if</span>(tmp16 &gt; uip_connr-&gt;<a class="code" href="a00098.html#a9b2e09e250f0a9dadfe42ef3f1a469e1" title="Initial maximum segment size for the connection.">initialmss</a> ||
<a name="l02020"></a>02020          tmp16 == 0) {
<a name="l02021"></a>02021         tmp16 = uip_connr-&gt;<a class="code" href="a00098.html#a9b2e09e250f0a9dadfe42ef3f1a469e1" title="Initial maximum segment size for the connection.">initialmss</a>;
<a name="l02022"></a>02022       }
<a name="l02023"></a>02023       uip_connr-&gt;<a class="code" href="a00098.html#a3f9fbf46c7c80197b1436fcff19151e4" title="Current maximum segment size for the connection.">mss</a> = tmp16;
<a name="l02024"></a>02024 
<a name="l02025"></a>02025       <span class="comment">/* If this packet constitutes an ACK for outstanding data (flagged</span>
<a name="l02026"></a>02026 <span class="comment">         by the UIP_ACKDATA flag, we should call the application since it</span>
<a name="l02027"></a>02027 <span class="comment">         might want to send more data. If the incoming packet had data</span>
<a name="l02028"></a>02028 <span class="comment">         from the peer (as flagged by the UIP_NEWDATA flag), the</span>
<a name="l02029"></a>02029 <span class="comment">         application must also be notified.</span>
<a name="l02030"></a>02030 <span class="comment"></span>
<a name="l02031"></a>02031 <span class="comment">         When the application is called, the global variable uip_len</span>
<a name="l02032"></a>02032 <span class="comment">         contains the length of the incoming data. The application can</span>
<a name="l02033"></a>02033 <span class="comment">         access the incoming data through the global pointer</span>
<a name="l02034"></a>02034 <span class="comment">         uip_appdata, which usually points UIP_IPTCPH_LEN + UIP_LLH_LEN</span>
<a name="l02035"></a>02035 <span class="comment">         bytes into the uip_buf array.</span>
<a name="l02036"></a>02036 <span class="comment"></span>
<a name="l02037"></a>02037 <span class="comment">         If the application wishes to send any data, this data should be</span>
<a name="l02038"></a>02038 <span class="comment">         put into the uip_appdata and the length of the data should be</span>
<a name="l02039"></a>02039 <span class="comment">         put into uip_len. If the application don&#39;t have any data to</span>
<a name="l02040"></a>02040 <span class="comment">         send, uip_len must be set to 0. */</span>
<a name="l02041"></a>02041       <span class="keywordflow">if</span>(uip_flags &amp; (UIP_NEWDATA | UIP_ACKDATA)) {
<a name="l02042"></a>02042         uip_slen = 0;
<a name="l02043"></a>02043         <a class="code" href="a01808.html#ga41aa744caa46913b3b3aedb2a4e78546" title="The name of the application function that uIP should call in response to TCP/IP events.">UIP_APPCALL</a>();
<a name="l02044"></a>02044 
<a name="l02045"></a>02045       appsend:
<a name="l02046"></a>02046       
<a name="l02047"></a>02047         <span class="keywordflow">if</span>(uip_flags &amp; UIP_ABORT) {
<a name="l02048"></a>02048           uip_slen = 0;
<a name="l02049"></a>02049           uip_connr-&gt;<a class="code" href="a00098.html#aec4787356d50d91abe5b27d472abe630" title="TCP state and flags.">tcpstateflags</a> = UIP_CLOSED;
<a name="l02050"></a>02050           UIP_TCP_BUF-&gt;flags = TCP_RST | TCP_ACK;
<a name="l02051"></a>02051           <span class="keywordflow">goto</span> tcp_send_nodata;
<a name="l02052"></a>02052         }
<a name="l02053"></a>02053 
<a name="l02054"></a>02054         <span class="keywordflow">if</span>(uip_flags &amp; UIP_CLOSE) {
<a name="l02055"></a>02055           uip_slen = 0;
<a name="l02056"></a>02056           uip_connr-&gt;<a class="code" href="a00098.html#a5c55920c6901817dce661762e785614e" title="Length of the data that was previously sent.">len</a> = 1;
<a name="l02057"></a>02057           uip_connr-&gt;<a class="code" href="a00098.html#aec4787356d50d91abe5b27d472abe630" title="TCP state and flags.">tcpstateflags</a> = UIP_FIN_WAIT_1;
<a name="l02058"></a>02058           uip_connr-&gt;<a class="code" href="a00098.html#a974df0fa0057819fd67109d9f8f1beeb" title="The number of retransmissions for the last segment sent.">nrtx</a> = 0;
<a name="l02059"></a>02059           UIP_TCP_BUF-&gt;flags = TCP_FIN | TCP_ACK;
<a name="l02060"></a>02060           <span class="keywordflow">goto</span> tcp_send_nodata;
<a name="l02061"></a>02061         }
<a name="l02062"></a>02062 
<a name="l02063"></a>02063         <span class="comment">/* If uip_slen &gt; 0, the application has data to be sent. */</span>
<a name="l02064"></a>02064         <span class="keywordflow">if</span>(uip_slen &gt; 0) {
<a name="l02065"></a>02065 
<a name="l02066"></a>02066           <span class="comment">/* If the connection has acknowledged data, the contents of</span>
<a name="l02067"></a>02067 <span class="comment">             the -&gt;len variable should be discarded. */</span>
<a name="l02068"></a>02068           <span class="keywordflow">if</span>((uip_flags &amp; UIP_ACKDATA) != 0) {
<a name="l02069"></a>02069             uip_connr-&gt;<a class="code" href="a00098.html#a5c55920c6901817dce661762e785614e" title="Length of the data that was previously sent.">len</a> = 0;
<a name="l02070"></a>02070           }
<a name="l02071"></a>02071 
<a name="l02072"></a>02072           <span class="comment">/* If the -&gt;len variable is non-zero the connection has</span>
<a name="l02073"></a>02073 <span class="comment">             already data in transit and cannot send anymore right</span>
<a name="l02074"></a>02074 <span class="comment">             now. */</span>
<a name="l02075"></a>02075           <span class="keywordflow">if</span>(uip_connr-&gt;<a class="code" href="a00098.html#a5c55920c6901817dce661762e785614e" title="Length of the data that was previously sent.">len</a> == 0) {
<a name="l02076"></a>02076 
<a name="l02077"></a>02077             <span class="comment">/* The application cannot send more than what is allowed by</span>
<a name="l02078"></a>02078 <span class="comment">               the mss (the minumum of the MSS and the available</span>
<a name="l02079"></a>02079 <span class="comment">               window). */</span>
<a name="l02080"></a>02080             <span class="keywordflow">if</span>(uip_slen &gt; uip_connr-&gt;<a class="code" href="a00098.html#a3f9fbf46c7c80197b1436fcff19151e4" title="Current maximum segment size for the connection.">mss</a>) {
<a name="l02081"></a>02081               uip_slen = uip_connr-&gt;<a class="code" href="a00098.html#a3f9fbf46c7c80197b1436fcff19151e4" title="Current maximum segment size for the connection.">mss</a>;
<a name="l02082"></a>02082             }
<a name="l02083"></a>02083 
<a name="l02084"></a>02084             <span class="comment">/* Remember how much data we send out now so that we know</span>
<a name="l02085"></a>02085 <span class="comment">               when everything has been acknowledged. */</span>
<a name="l02086"></a>02086             uip_connr-&gt;<a class="code" href="a00098.html#a5c55920c6901817dce661762e785614e" title="Length of the data that was previously sent.">len</a> = uip_slen;
<a name="l02087"></a>02087           } <span class="keywordflow">else</span> {
<a name="l02088"></a>02088 
<a name="l02089"></a>02089             <span class="comment">/* If the application already had unacknowledged data, we</span>
<a name="l02090"></a>02090 <span class="comment">               make sure that the application does not send (i.e.,</span>
<a name="l02091"></a>02091 <span class="comment">               retransmit) out more than it previously sent out. */</span>
<a name="l02092"></a>02092             uip_slen = uip_connr-&gt;<a class="code" href="a00098.html#a5c55920c6901817dce661762e785614e" title="Length of the data that was previously sent.">len</a>;
<a name="l02093"></a>02093           }
<a name="l02094"></a>02094         }
<a name="l02095"></a>02095         uip_connr-&gt;<a class="code" href="a00098.html#a974df0fa0057819fd67109d9f8f1beeb" title="The number of retransmissions for the last segment sent.">nrtx</a> = 0;
<a name="l02096"></a>02096       apprexmit:
<a name="l02097"></a>02097         <a class="code" href="a01926.html#ga561b8eda32e059d4e7397f776268cc63" title="Pointer to the application data in the packet buffer.">uip_appdata</a> = uip_sappdata;
<a name="l02098"></a>02098       
<a name="l02099"></a>02099         <span class="comment">/* If the application has data to be sent, or if the incoming</span>
<a name="l02100"></a>02100 <span class="comment">           packet had new data in it, we must send out a packet. */</span>
<a name="l02101"></a>02101         <span class="keywordflow">if</span>(uip_slen &gt; 0 &amp;&amp; uip_connr-&gt;<a class="code" href="a00098.html#a5c55920c6901817dce661762e785614e" title="Length of the data that was previously sent.">len</a> &gt; 0) {
<a name="l02102"></a>02102           <span class="comment">/* Add the length of the IP and TCP headers. */</span>
<a name="l02103"></a>02103           <a class="code" href="a01926.html#ga72af00d45662ba0dc2ba3781a556e25b" title="The length of the packet in the uip_buf buffer.">uip_len</a> = uip_connr-&gt;<a class="code" href="a00098.html#a5c55920c6901817dce661762e785614e" title="Length of the data that was previously sent.">len</a> + UIP_TCPIP_HLEN;
<a name="l02104"></a>02104           <span class="comment">/* We always set the ACK flag in response packets. */</span>
<a name="l02105"></a>02105           UIP_TCP_BUF-&gt;flags = TCP_ACK | TCP_PSH;
<a name="l02106"></a>02106           <span class="comment">/* Send the packet. */</span>
<a name="l02107"></a>02107           <span class="keywordflow">goto</span> tcp_send_noopts;
<a name="l02108"></a>02108         }
<a name="l02109"></a>02109         <span class="comment">/* If there is no data to send, just send out a pure ACK if</span>
<a name="l02110"></a>02110 <span class="comment">           there is newdata. */</span>
<a name="l02111"></a>02111         <span class="keywordflow">if</span>(uip_flags &amp; UIP_NEWDATA) {
<a name="l02112"></a>02112           <a class="code" href="a01926.html#ga72af00d45662ba0dc2ba3781a556e25b" title="The length of the packet in the uip_buf buffer.">uip_len</a> = UIP_TCPIP_HLEN;
<a name="l02113"></a>02113           UIP_TCP_BUF-&gt;flags = TCP_ACK;
<a name="l02114"></a>02114           <span class="keywordflow">goto</span> tcp_send_noopts;
<a name="l02115"></a>02115         }
<a name="l02116"></a>02116       }
<a name="l02117"></a>02117       <span class="keywordflow">goto</span> drop;
<a name="l02118"></a>02118     <span class="keywordflow">case</span> UIP_LAST_ACK:
<a name="l02119"></a>02119       <span class="comment">/* We can close this connection if the peer has acknowledged our</span>
<a name="l02120"></a>02120 <span class="comment">         FIN. This is indicated by the UIP_ACKDATA flag. */</span>
<a name="l02121"></a>02121       <span class="keywordflow">if</span>(uip_flags &amp; UIP_ACKDATA) {
<a name="l02122"></a>02122         uip_connr-&gt;<a class="code" href="a00098.html#aec4787356d50d91abe5b27d472abe630" title="TCP state and flags.">tcpstateflags</a> = UIP_CLOSED;
<a name="l02123"></a>02123         uip_flags = UIP_CLOSE;
<a name="l02124"></a>02124         <a class="code" href="a01808.html#ga41aa744caa46913b3b3aedb2a4e78546" title="The name of the application function that uIP should call in response to TCP/IP events.">UIP_APPCALL</a>();
<a name="l02125"></a>02125       }
<a name="l02126"></a>02126       <span class="keywordflow">break</span>;
<a name="l02127"></a>02127     
<a name="l02128"></a>02128     <span class="keywordflow">case</span> UIP_FIN_WAIT_1:
<a name="l02129"></a>02129       <span class="comment">/* The application has closed the connection, but the remote host</span>
<a name="l02130"></a>02130 <span class="comment">         hasn&#39;t closed its end yet. Thus we do nothing but wait for a</span>
<a name="l02131"></a>02131 <span class="comment">         FIN from the other side. */</span>
<a name="l02132"></a>02132       <span class="keywordflow">if</span>(<a class="code" href="a01926.html#ga72af00d45662ba0dc2ba3781a556e25b" title="The length of the packet in the uip_buf buffer.">uip_len</a> &gt; 0) {
<a name="l02133"></a>02133         uip_add_rcv_nxt(<a class="code" href="a01926.html#ga72af00d45662ba0dc2ba3781a556e25b" title="The length of the packet in the uip_buf buffer.">uip_len</a>);
<a name="l02134"></a>02134       }
<a name="l02135"></a>02135       <span class="keywordflow">if</span>(UIP_TCP_BUF-&gt;flags &amp; TCP_FIN) {
<a name="l02136"></a>02136         <span class="keywordflow">if</span>(uip_flags &amp; UIP_ACKDATA) {
<a name="l02137"></a>02137           uip_connr-&gt;<a class="code" href="a00098.html#aec4787356d50d91abe5b27d472abe630" title="TCP state and flags.">tcpstateflags</a> = UIP_TIME_WAIT;
<a name="l02138"></a>02138           uip_connr-&gt;<a class="code" href="a00098.html#a2d0c3e645bbae89194856aa5a8f49e4d" title="The retransmission timer.">timer</a> = 0;
<a name="l02139"></a>02139           uip_connr-&gt;<a class="code" href="a00098.html#a5c55920c6901817dce661762e785614e" title="Length of the data that was previously sent.">len</a> = 0;
<a name="l02140"></a>02140         } <span class="keywordflow">else</span> {
<a name="l02141"></a>02141           uip_connr-&gt;<a class="code" href="a00098.html#aec4787356d50d91abe5b27d472abe630" title="TCP state and flags.">tcpstateflags</a> = UIP_CLOSING;
<a name="l02142"></a>02142         }
<a name="l02143"></a>02143         uip_add_rcv_nxt(1);
<a name="l02144"></a>02144         uip_flags = UIP_CLOSE;
<a name="l02145"></a>02145         <a class="code" href="a01808.html#ga41aa744caa46913b3b3aedb2a4e78546" title="The name of the application function that uIP should call in response to TCP/IP events.">UIP_APPCALL</a>();
<a name="l02146"></a>02146         <span class="keywordflow">goto</span> tcp_send_ack;
<a name="l02147"></a>02147       } <span class="keywordflow">else</span> <span class="keywordflow">if</span>(uip_flags &amp; UIP_ACKDATA) {
<a name="l02148"></a>02148         uip_connr-&gt;<a class="code" href="a00098.html#aec4787356d50d91abe5b27d472abe630" title="TCP state and flags.">tcpstateflags</a> = UIP_FIN_WAIT_2;
<a name="l02149"></a>02149         uip_connr-&gt;<a class="code" href="a00098.html#a5c55920c6901817dce661762e785614e" title="Length of the data that was previously sent.">len</a> = 0;
<a name="l02150"></a>02150         <span class="keywordflow">goto</span> drop;
<a name="l02151"></a>02151       }
<a name="l02152"></a>02152       <span class="keywordflow">if</span>(<a class="code" href="a01926.html#ga72af00d45662ba0dc2ba3781a556e25b" title="The length of the packet in the uip_buf buffer.">uip_len</a> &gt; 0) {
<a name="l02153"></a>02153         <span class="keywordflow">goto</span> tcp_send_ack;
<a name="l02154"></a>02154       }
<a name="l02155"></a>02155       <span class="keywordflow">goto</span> drop;
<a name="l02156"></a>02156       
<a name="l02157"></a>02157     <span class="keywordflow">case</span> UIP_FIN_WAIT_2:
<a name="l02158"></a>02158       <span class="keywordflow">if</span>(<a class="code" href="a01926.html#ga72af00d45662ba0dc2ba3781a556e25b" title="The length of the packet in the uip_buf buffer.">uip_len</a> &gt; 0) {
<a name="l02159"></a>02159         uip_add_rcv_nxt(<a class="code" href="a01926.html#ga72af00d45662ba0dc2ba3781a556e25b" title="The length of the packet in the uip_buf buffer.">uip_len</a>);
<a name="l02160"></a>02160       }
<a name="l02161"></a>02161       <span class="keywordflow">if</span>(UIP_TCP_BUF-&gt;flags &amp; TCP_FIN) {
<a name="l02162"></a>02162         uip_connr-&gt;<a class="code" href="a00098.html#aec4787356d50d91abe5b27d472abe630" title="TCP state and flags.">tcpstateflags</a> = UIP_TIME_WAIT;
<a name="l02163"></a>02163         uip_connr-&gt;<a class="code" href="a00098.html#a2d0c3e645bbae89194856aa5a8f49e4d" title="The retransmission timer.">timer</a> = 0;
<a name="l02164"></a>02164         uip_add_rcv_nxt(1);
<a name="l02165"></a>02165         uip_flags = UIP_CLOSE;
<a name="l02166"></a>02166         <a class="code" href="a01808.html#ga41aa744caa46913b3b3aedb2a4e78546" title="The name of the application function that uIP should call in response to TCP/IP events.">UIP_APPCALL</a>();
<a name="l02167"></a>02167         <span class="keywordflow">goto</span> tcp_send_ack;
<a name="l02168"></a>02168       }
<a name="l02169"></a>02169       <span class="keywordflow">if</span>(<a class="code" href="a01926.html#ga72af00d45662ba0dc2ba3781a556e25b" title="The length of the packet in the uip_buf buffer.">uip_len</a> &gt; 0) {
<a name="l02170"></a>02170         <span class="keywordflow">goto</span> tcp_send_ack;
<a name="l02171"></a>02171       }
<a name="l02172"></a>02172       <span class="keywordflow">goto</span> drop;
<a name="l02173"></a>02173 
<a name="l02174"></a>02174     <span class="keywordflow">case</span> UIP_TIME_WAIT:
<a name="l02175"></a>02175       <span class="keywordflow">goto</span> tcp_send_ack;
<a name="l02176"></a>02176     
<a name="l02177"></a>02177     <span class="keywordflow">case</span> UIP_CLOSING:
<a name="l02178"></a>02178       <span class="keywordflow">if</span>(uip_flags &amp; UIP_ACKDATA) {
<a name="l02179"></a>02179         uip_connr-&gt;<a class="code" href="a00098.html#aec4787356d50d91abe5b27d472abe630" title="TCP state and flags.">tcpstateflags</a> = UIP_TIME_WAIT;
<a name="l02180"></a>02180         uip_connr-&gt;<a class="code" href="a00098.html#a2d0c3e645bbae89194856aa5a8f49e4d" title="The retransmission timer.">timer</a> = 0;
<a name="l02181"></a>02181       }
<a name="l02182"></a>02182   }
<a name="l02183"></a>02183   <span class="keywordflow">goto</span> drop;
<a name="l02184"></a>02184   
<a name="l02185"></a>02185   <span class="comment">/* We jump here when we are ready to send the packet, and just want</span>
<a name="l02186"></a>02186 <span class="comment">     to set the appropriate TCP sequence numbers in the TCP header. */</span>
<a name="l02187"></a>02187  tcp_send_ack:
<a name="l02188"></a>02188   UIP_TCP_BUF-&gt;flags = TCP_ACK;
<a name="l02189"></a>02189 
<a name="l02190"></a>02190  tcp_send_nodata:
<a name="l02191"></a>02191   <a class="code" href="a01926.html#ga72af00d45662ba0dc2ba3781a556e25b" title="The length of the packet in the uip_buf buffer.">uip_len</a> = UIP_IPTCPH_LEN;
<a name="l02192"></a>02192 
<a name="l02193"></a>02193  tcp_send_noopts:
<a name="l02194"></a>02194   UIP_TCP_BUF-&gt;tcpoffset = (UIP_TCPH_LEN / 4) &lt;&lt; 4;
<a name="l02195"></a>02195 
<a name="l02196"></a>02196   <span class="comment">/* We&#39;re done with the input processing. We are now ready to send a</span>
<a name="l02197"></a>02197 <span class="comment">     reply. Our job is to fill in all the fields of the TCP and IP</span>
<a name="l02198"></a>02198 <span class="comment">     headers before calculating the checksum and finally send the</span>
<a name="l02199"></a>02199 <span class="comment">     packet. */</span>
<a name="l02200"></a>02200  tcp_send:
<a name="l02201"></a>02201   PRINTF(<span class="stringliteral">&quot;In tcp_send\n&quot;</span>);
<a name="l02202"></a>02202    
<a name="l02203"></a>02203   UIP_TCP_BUF-&gt;ackno[0] = uip_connr-&gt;<a class="code" href="a00098.html#a1c0f37a806ed9ae4ed11742696cba2c6" title="The sequence number that we expect to receive next.">rcv_nxt</a>[0];
<a name="l02204"></a>02204   UIP_TCP_BUF-&gt;ackno[1] = uip_connr-&gt;<a class="code" href="a00098.html#a1c0f37a806ed9ae4ed11742696cba2c6" title="The sequence number that we expect to receive next.">rcv_nxt</a>[1];
<a name="l02205"></a>02205   UIP_TCP_BUF-&gt;ackno[2] = uip_connr-&gt;<a class="code" href="a00098.html#a1c0f37a806ed9ae4ed11742696cba2c6" title="The sequence number that we expect to receive next.">rcv_nxt</a>[2];
<a name="l02206"></a>02206   UIP_TCP_BUF-&gt;ackno[3] = uip_connr-&gt;<a class="code" href="a00098.html#a1c0f37a806ed9ae4ed11742696cba2c6" title="The sequence number that we expect to receive next.">rcv_nxt</a>[3];
<a name="l02207"></a>02207   
<a name="l02208"></a>02208   UIP_TCP_BUF-&gt;seqno[0] = uip_connr-&gt;<a class="code" href="a00098.html#a9b6575dd439ad42a38466dcba22fcf58" title="The sequence number that was last sent by us.">snd_nxt</a>[0];
<a name="l02209"></a>02209   UIP_TCP_BUF-&gt;seqno[1] = uip_connr-&gt;<a class="code" href="a00098.html#a9b6575dd439ad42a38466dcba22fcf58" title="The sequence number that was last sent by us.">snd_nxt</a>[1];
<a name="l02210"></a>02210   UIP_TCP_BUF-&gt;seqno[2] = uip_connr-&gt;<a class="code" href="a00098.html#a9b6575dd439ad42a38466dcba22fcf58" title="The sequence number that was last sent by us.">snd_nxt</a>[2];
<a name="l02211"></a>02211   UIP_TCP_BUF-&gt;seqno[3] = uip_connr-&gt;<a class="code" href="a00098.html#a9b6575dd439ad42a38466dcba22fcf58" title="The sequence number that was last sent by us.">snd_nxt</a>[3];
<a name="l02212"></a>02212 
<a name="l02213"></a>02213   UIP_IP_BUF-&gt;proto = UIP_PROTO_TCP;
<a name="l02214"></a>02214   
<a name="l02215"></a>02215   UIP_TCP_BUF-&gt;srcport  = uip_connr-&gt;<a class="code" href="a00098.html#a5e927bbfba71e139b345839b7e423ea5" title="The local TCP port, in network byte order.">lport</a>;
<a name="l02216"></a>02216   UIP_TCP_BUF-&gt;destport = uip_connr-&gt;<a class="code" href="a00098.html#a7477a30cdd9b399067bf11bf18e620ad" title="The local remote TCP port, in network byte order.">rport</a>;
<a name="l02217"></a>02217 
<a name="l02218"></a>02218 
<a name="l02219"></a>02219   uip_ipaddr_copy(&amp;UIP_IP_BUF-&gt;destipaddr, &amp;uip_connr-&gt;<a class="code" href="a00098.html#a79510aa86d3fa0a0fc6cfc49b1da7279" title="The IP address of the remote host.">ripaddr</a>);
<a name="l02220"></a>02220   <a class="code" href="a01929.html#gab4be25c579b63df6ce5b3a0d8b067b27" title="Source address selection, see RFC 3484.">uip_ds6_select_src</a>(&amp;UIP_IP_BUF-&gt;srcipaddr,&amp;UIP_IP_BUF-&gt;destipaddr);
<a name="l02221"></a>02221   PRINTF(<span class="stringliteral">&quot;Sending TCP packet to&quot;</span>);
<a name="l02222"></a>02222   PRINT6ADDR(&amp;UIP_IP_BUF-&gt;destipaddr);
<a name="l02223"></a>02223   PRINTF(<span class="stringliteral">&quot;from&quot;</span>);
<a name="l02224"></a>02224   PRINT6ADDR(&amp;UIP_IP_BUF-&gt;srcipaddr);
<a name="l02225"></a>02225   PRINTF(<span class="stringliteral">&quot;\n&quot;</span>);
<a name="l02226"></a>02226       
<a name="l02227"></a>02227   <span class="keywordflow">if</span>(uip_connr-&gt;<a class="code" href="a00098.html#aec4787356d50d91abe5b27d472abe630" title="TCP state and flags.">tcpstateflags</a> &amp; UIP_STOPPED) {
<a name="l02228"></a>02228     <span class="comment">/* If the connection has issued uip_stop(), we advertise a zero</span>
<a name="l02229"></a>02229 <span class="comment">       window so that the remote host will stop sending data. */</span>
<a name="l02230"></a>02230     UIP_TCP_BUF-&gt;wnd[0] = UIP_TCP_BUF-&gt;wnd[1] = 0;
<a name="l02231"></a>02231   } <span class="keywordflow">else</span> {
<a name="l02232"></a>02232     UIP_TCP_BUF-&gt;wnd[0] = ((<a class="code" href="a01824.html#ga5b9dba2123705bce1ce95c3deca0bdad" title="The size of the advertised receiver&#39;s window.">UIP_RECEIVE_WINDOW</a>) &gt;&gt; 8);
<a name="l02233"></a>02233     UIP_TCP_BUF-&gt;wnd[1] = ((<a class="code" href="a01824.html#ga5b9dba2123705bce1ce95c3deca0bdad" title="The size of the advertised receiver&#39;s window.">UIP_RECEIVE_WINDOW</a>) &amp; 0xff);
<a name="l02234"></a>02234   }
<a name="l02235"></a>02235 
<a name="l02236"></a>02236  tcp_send_noconn:
<a name="l02237"></a>02237   UIP_IP_BUF-&gt;ttl = <a class="code" href="a01929.html#gaecc8ec9970a01951fd9eec36e07884ef">uip_ds6_if</a>.cur_hop_limit;
<a name="l02238"></a>02238   UIP_IP_BUF-&gt;len[0] = ((<a class="code" href="a01926.html#ga72af00d45662ba0dc2ba3781a556e25b" title="The length of the packet in the uip_buf buffer.">uip_len</a> - UIP_IPH_LEN) &gt;&gt; 8);
<a name="l02239"></a>02239   UIP_IP_BUF-&gt;len[1] = ((<a class="code" href="a01926.html#ga72af00d45662ba0dc2ba3781a556e25b" title="The length of the packet in the uip_buf buffer.">uip_len</a> - UIP_IPH_LEN) &amp; 0xff);
<a name="l02240"></a>02240 
<a name="l02241"></a>02241   UIP_TCP_BUF-&gt;urgp[0] = UIP_TCP_BUF-&gt;urgp[1] = 0;
<a name="l02242"></a>02242   
<a name="l02243"></a>02243   <span class="comment">/* Calculate TCP checksum. */</span>
<a name="l02244"></a>02244   UIP_TCP_BUF-&gt;tcpchksum = 0;
<a name="l02245"></a>02245   UIP_TCP_BUF-&gt;tcpchksum = ~(<a class="code" href="a01926.html#ga969ff8bccf86e1c4becc3c3fd23f93b4" title="Calculate the TCP checksum of the packet in uip_buf and uip_appdata.">uip_tcpchksum</a>());
<a name="l02246"></a>02246   <a class="code" href="a01926.html#ga9c0814ed491fa452ec97910c0728d410" title="The uIP TCP/IP statistics.">UIP_STAT</a>(++uip_stat.tcp.sent);
<a name="l02247"></a>02247 
<a name="l02248"></a>02248 <span class="preprocessor">#endif </span><span class="comment">/* UIP_TCP */</span>
<a name="l02249"></a>02249 <span class="preprocessor">#if UIP_UDP</span>
<a name="l02250"></a>02250 <span class="preprocessor"></span> ip_send_nolen:
<a name="l02251"></a>02251 <span class="preprocessor">#endif</span>
<a name="l02252"></a>02252 <span class="preprocessor"></span>  UIP_IP_BUF-&gt;vtc = 0x60;
<a name="l02253"></a>02253   UIP_IP_BUF-&gt;tcflow = 0x00;
<a name="l02254"></a>02254   UIP_IP_BUF-&gt;flow = 0x00;
<a name="l02255"></a>02255  send:
<a name="l02256"></a>02256   PRINTF(<span class="stringliteral">&quot;Sending packet with length %d (%d)\n&quot;</span>, <a class="code" href="a01926.html#ga72af00d45662ba0dc2ba3781a556e25b" title="The length of the packet in the uip_buf buffer.">uip_len</a>,
<a name="l02257"></a>02257          (UIP_IP_BUF-&gt;len[0] &lt;&lt; 8) | UIP_IP_BUF-&gt;len[1]);
<a name="l02258"></a>02258   
<a name="l02259"></a>02259   <a class="code" href="a01926.html#ga9c0814ed491fa452ec97910c0728d410" title="The uIP TCP/IP statistics.">UIP_STAT</a>(++uip_stat.ip.sent);
<a name="l02260"></a>02260   <span class="comment">/* Return and let the caller do the actual transmission. */</span>
<a name="l02261"></a>02261   uip_flags = 0;
<a name="l02262"></a>02262   <span class="keywordflow">return</span>;
<a name="l02263"></a>02263 
<a name="l02264"></a>02264  drop:
<a name="l02265"></a>02265   <a class="code" href="a01926.html#ga72af00d45662ba0dc2ba3781a556e25b" title="The length of the packet in the uip_buf buffer.">uip_len</a> = 0;
<a name="l02266"></a>02266   <a class="code" href="a01816.html#ga0c63b80e0f8038403df5fee2bac3aab8" title="The length of the extension headers.">uip_ext_len</a> = 0;
<a name="l02267"></a>02267   <a class="code" href="a01929.html#gafce90a5802ed54ef89b35951fb52d5a9" title="bitmap we use to record which IPv6 headers we have already seen">uip_ext_bitmap</a> = 0;
<a name="l02268"></a>02268   uip_flags = 0;
<a name="l02269"></a>02269   <span class="keywordflow">return</span>;
<a name="l02270"></a>02270 }
<a name="l02271"></a>02271 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l02272"></a>02272 uint16_t
<a name="l02273"></a><a class="code" href="a01929.html#gada74c8133e50b38dca66dbe779395c80">02273</a> <a class="code" href="a01926.html#gada74c8133e50b38dca66dbe779395c80" title="Convert 16-bit quantity from host byte order to network byte order.">uip_htons</a>(uint16_t val)
<a name="l02274"></a>02274 {
<a name="l02275"></a>02275   <span class="keywordflow">return</span> UIP_HTONS(val);
<a name="l02276"></a>02276 }
<a name="l02277"></a>02277 
<a name="l02278"></a>02278 uint32_t
<a name="l02279"></a>02279 uip_htonl(uint32_t val)
<a name="l02280"></a>02280 {
<a name="l02281"></a>02281   <span class="keywordflow">return</span> UIP_HTONL(val);
<a name="l02282"></a>02282 }
<a name="l02283"></a>02283 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l02284"></a>02284 <span class="keywordtype">void</span>
<a name="l02285"></a><a class="code" href="a01929.html#ga04b053a623aac7cd4195157d470661b3">02285</a> <a class="code" href="a01926.html#ga04b053a623aac7cd4195157d470661b3" title="Send data on the current connection.">uip_send</a>(<span class="keyword">const</span> <span class="keywordtype">void</span> *data, <span class="keywordtype">int</span> len)
<a name="l02286"></a>02286 {
<a name="l02287"></a>02287   <span class="keywordtype">int</span> copylen;
<a name="l02288"></a>02288 <span class="preprocessor">#define MIN(a,b) ((a) &lt; (b)? (a): (b))</span>
<a name="l02289"></a>02289 <span class="preprocessor"></span>  copylen = MIN(len, <a class="code" href="a01828.html#ga3589822ecb9d9c4145209756396b8a6b" title="The size of the uIP packet buffer.">UIP_BUFSIZE</a> - <a class="code" href="a01828.html#gae6f4a2453dbd8bc60e6a82774552366a" title="The link level header length.">UIP_LLH_LEN</a> - UIP_TCPIP_HLEN -
<a name="l02290"></a>02290                 (<span class="keywordtype">int</span>)((<span class="keywordtype">char</span> *)uip_sappdata - (<span class="keywordtype">char</span> *)&amp;uip_buf[<a class="code" href="a01828.html#gae6f4a2453dbd8bc60e6a82774552366a" title="The link level header length.">UIP_LLH_LEN</a> + UIP_TCPIP_HLEN]));
<a name="l02291"></a>02291   <span class="keywordflow">if</span>(copylen &gt; 0) {
<a name="l02292"></a>02292     uip_slen = copylen;
<a name="l02293"></a>02293     <span class="keywordflow">if</span>(data != uip_sappdata) {
<a name="l02294"></a>02294       memcpy(uip_sappdata, (data), uip_slen);
<a name="l02295"></a>02295     }
<a name="l02296"></a>02296   }
<a name="l02297"></a>02297 }
<a name="l02298"></a>02298 <span class="comment">/*---------------------------------------------------------------------------*/</span><span class="comment"></span>
<a name="l02299"></a>02299 <span class="comment">/** @} */</span>
</pre></div></div><!-- contents -->


<hr class="footer"/><address class="footer"><small>
Generated on Sun Jan 13 2013 10:57:24 for Contiki 2.6 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.7.6.1
</small></address>

</body>
</html>
