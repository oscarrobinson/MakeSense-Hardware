<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>Contiki 2.6: core/net/tcpip.h File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />



</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">Contiki 2.6
   
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.html"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.html"><span>Modules</span></a></li>
      <li><a href="annotated.html"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li><a href="dirs.html"><span>Directories</span></a></li>
      <li><a href="examples.html"><span>Examples</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>Globals</span></a></li>
    </ul>
  </div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="dir_3b4aaa38be606d755c8f09da5f4b54fc.html">core</a>      </li>
      <li class="navelem"><a class="el" href="dir_e85a2b0fd2c84e4058315392b52d2635.html">net</a>      </li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="summary">
<a href="#define-members">Defines</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">tcpip.h File Reference<div class="ingroups"><a class="el" href="a01808.html">The Contiki/uIP interface</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p>Header for the Contiki/uIP interface.  
<a href="#details">More...</a></p>
<div class="textblock"><code>#include &quot;contiki.h&quot;</code><br/>
<code>#include &quot;<a class="el" href="a00435_source.html">net/uip.h</a>&quot;</code><br/>
</div>
<p><a href="a00406_source.html">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="define-members"></a>
Defines</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga41aa744caa46913b3b3aedb2a4e78546"></a><!-- doxytag: member="tcpip.h::UIP_APPCALL" ref="ga41aa744caa46913b3b3aedb2a4e78546" args="" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01808.html#ga41aa744caa46913b3b3aedb2a4e78546">UIP_APPCALL</a>&#160;&#160;&#160;tcpip_uipcall</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">The name of the application function that uIP should call in response to TCP/IP events. <br/></td></tr>
<tr><td colspan="2"><h2><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef struct tcpip_uipstate&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01830.html#gaa92afb113e122f860392bfbd385f842e">uip_udp_appstate_t</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">The type of the application state that is to be stored in the <a class="el" href="a00098.html" title="Representation of a uIP TCP connection.">uip_conn</a> structure.  <a href="a01830.html#gaa92afb113e122f860392bfbd385f842e"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef struct tcpip_uipstate&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01830.html#ga69646a81a922033c5281445a71f8ffed">uip_tcp_appstate_t</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">The type of the application state that is to be stored in the <a class="el" href="a00098.html" title="Representation of a uIP TCP connection.">uip_conn</a> structure.  <a href="a01830.html#ga69646a81a922033c5281445a71f8ffed"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="var-members"></a>
Variables</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">CCIF process_event_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01808.html#gaadf3c3b5770cafe3da7f8cc4dd06625c">tcpip_event</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">The uIP event.  <a href="a01808.html#gaadf3c3b5770cafe3da7f8cc4dd06625c"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="member-group"></a>
TCP functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga228f0c0f1c20d43a7fda39b3b8f0fd4c"></a><!-- doxytag: member="tcpip.h::tcp_markconn" ref="ga228f0c0f1c20d43a7fda39b3b8f0fd4c" args="(conn, appstate)" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>tcp_markconn</b>(conn, appstate)&#160;&#160;&#160;<a class="el" href="a01808.html#ga8bc368a618bee21caad1c718ca5a1257">tcp_attach</a>(conn, appstate)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">CCIF void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01808.html#ga8bc368a618bee21caad1c718ca5a1257">tcp_attach</a> (struct <a class="el" href="a00098.html">uip_conn</a> *conn, void *appstate)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Attach a TCP connection to the current process.  <a href="a01808.html#ga8bc368a618bee21caad1c718ca5a1257"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">CCIF void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01808.html#gafb6b81f8f3010563bf1a97205be39796">tcp_listen</a> (uint16_t port)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Open a TCP port.  <a href="a01808.html#gafb6b81f8f3010563bf1a97205be39796"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">CCIF void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01808.html#gab96bc5b9d24baef6962e130b656e4db6">tcp_unlisten</a> (uint16_t port)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Close a listening TCP port.  <a href="a01808.html#gab96bc5b9d24baef6962e130b656e4db6"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">CCIF struct <a class="el" href="a00098.html">uip_conn</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01808.html#ga51f3e8973f0717e0f46d6a16a7fd5474">tcp_connect</a> (<a class="el" href="a00112.html">uip_ipaddr_t</a> *ripaddr, uint16_t port, void *appstate)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Open a TCP connection to the specified IP address and port.  <a href="a01808.html#ga51f3e8973f0717e0f46d6a16a7fd5474"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01808.html#ga7ba71f5f4d459854a5b1e09e6d77b252">tcpip_poll_tcp</a> (struct <a class="el" href="a00098.html">uip_conn</a> *conn)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Cause a specified TCP connection to be polled.  <a href="a01808.html#ga7ba71f5f4d459854a5b1e09e6d77b252"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="member-group"></a>
UDP functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga22b8211f05d7e2ef4d521274d07191e9"></a><!-- doxytag: member="tcpip.h::udp_markconn" ref="ga22b8211f05d7e2ef4d521274d07191e9" args="(conn, appstate)" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>udp_markconn</b>(conn, appstate)&#160;&#160;&#160;<a class="el" href="a01808.html#ga3cb4f212906fc7b8909a3f8938006470">udp_attach</a>(conn, appstate)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01808.html#ga6afb919d5d0923a55252eeb46caf58d6">udp_bind</a>(conn, port)&#160;&#160;&#160;<a class="el" href="a01814.html#gaa20812098a4663c8a9fc4ce8e95391b6">uip_udp_bind</a>(conn, port)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Bind a UDP connection to a local port.  <a href="a01808.html#ga6afb919d5d0923a55252eeb46caf58d6"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01808.html#ga3cb4f212906fc7b8909a3f8938006470">udp_attach</a> (struct <a class="el" href="a00122.html">uip_udp_conn</a> *conn, void *appstate)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Attach the current process to a UDP connection.  <a href="a01808.html#ga3cb4f212906fc7b8909a3f8938006470"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">CCIF struct <a class="el" href="a00122.html">uip_udp_conn</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01808.html#ga8fda54f49c58d830df5faed1541e2a62">udp_new</a> (const <a class="el" href="a00112.html">uip_ipaddr_t</a> *ripaddr, uint16_t port, void *appstate)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a new UDP connection.  <a href="a01808.html#ga8fda54f49c58d830df5faed1541e2a62"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="a00122.html">uip_udp_conn</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01808.html#gabd0394436a6f855ec38871cacd01f8c9">udp_broadcast_new</a> (uint16_t port, void *appstate)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a new UDP broadcast connection.  <a href="a01808.html#gabd0394436a6f855ec38871cacd01f8c9"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">CCIF void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01808.html#ga98f9cca40d8c2043f405ee372a6de0d1">tcpip_poll_udp</a> (struct <a class="el" href="a00122.html">uip_udp_conn</a> *conn)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Cause a specified UDP connection to be polled.  <a href="a01808.html#ga98f9cca40d8c2043f405ee372a6de0d1"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="member-group"></a>
TCP/IP packet processing</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gacccb4e63afa84573fbef8a071dbf8b5c"></a><!-- doxytag: member="tcpip.h::tcpip_set_forwarding" ref="gacccb4e63afa84573fbef8a071dbf8b5c" args="(forwarding)" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><b>tcpip_set_forwarding</b>(forwarding)&#160;&#160;&#160;<a class="el" href="a01808.html#gaaf7bd597f63c175c2f5e90e10cc67c0c">tcpip_do_forwarding</a> = (forwarding)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned char&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01808.html#gaaf7bd597f63c175c2f5e90e10cc67c0c">tcpip_do_forwarding</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">This function does address resolution and then calls tcpip_output.  <a href="a01808.html#gaaf7bd597f63c175c2f5e90e10cc67c0c"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga9f3e06288277302a1fe329b3f68ca953"></a><!-- doxytag: member="tcpip.h::tcpip_is_forwarding" ref="ga9f3e06288277302a1fe329b3f68ca953" args="" -->
unsigned char&#160;</td><td class="memItemRight" valign="bottom"><b>tcpip_is_forwarding</b></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">CCIF void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01808.html#ga0d5e21d13844dbebd703fb8ed6b058d0">tcpip_input</a> (void)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Deliver an incoming packet to the TCP/IP stack.  <a href="a01808.html#ga0d5e21d13844dbebd703fb8ed6b058d0"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga15037592756c9649660d6418c023759a"></a><!-- doxytag: member="tcpip.h::tcpip_output" ref="ga15037592756c9649660d6418c023759a" args="(void)" -->
uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01808.html#ga15037592756c9649660d6418c023759a">tcpip_output</a> (void)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Output packet to layer 2 The eventual parameter is the MAC address of the destination. <br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga82f8933b976c7aedadef445b148a6ac9"></a><!-- doxytag: member="tcpip.h::tcpip_set_outputfunc" ref="ga82f8933b976c7aedadef445b148a6ac9" args="(uint8_t(*f)(void))" -->
void&#160;</td><td class="memItemRight" valign="bottom"><b>tcpip_set_outputfunc</b> (uint8_t(*f)(void))</td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>Header for the Contiki/uIP interface. </p>
<dl class="author"><dt><b>Author:</b></dt><dd>Adam Dunkels &lt;<a href="mailto:adam@sics.se">adam@sics.se</a>&gt; </dd>
<dd>
Mathilde Durvy &lt;<a href="mailto:mdurvy@cisco.com">mdurvy@cisco.com</a>&gt; (IPv6 related code) </dd>
<dd>
Julien Abeille &lt;<a href="mailto:jabeille@cisco.com">jabeille@cisco.com</a>&gt; (IPv6 related code) </dd></dl>

<p>Definition in file <a class="el" href="a00406_source.html">tcpip.h</a>.</p>
</div></div><!-- contents -->


<hr class="footer"/><address class="footer"><small>
Generated on Sun Jan 13 2013 10:57:29 for Contiki 2.6 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.7.6.1
</small></address>

</body>
</html>
