<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>Contiki 2.6: platform/sensinode/dev/m25p16.c Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />



</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">Contiki 2.6
   
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.html"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.html"><span>Modules</span></a></li>
      <li><a href="annotated.html"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li><a href="dirs.html"><span>Directories</span></a></li>
      <li><a href="examples.html"><span>Examples</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>Globals</span></a></li>
    </ul>
  </div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="dir_da81161b528b307837d2c2604d1aafcb.html">platform</a>      </li>
      <li class="navelem"><a class="el" href="dir_9f7c3ae195d7387d42137819fe980698.html">sensinode</a>      </li>
      <li class="navelem"><a class="el" href="dir_aa4731f2a7009db4830500e0ed9e9d10.html">dev</a>      </li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">m25p16.c</div>  </div>
</div><!--header-->
<div class="contents">
<a href="a01621.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment"> * Copyright (c) 2010, Loughborough University - Computer Science</span>
<a name="l00003"></a>00003 <span class="comment"> * All rights reserved.</span>
<a name="l00004"></a>00004 <span class="comment"> *</span>
<a name="l00005"></a>00005 <span class="comment"> * Redistribution and use in source and binary forms, with or without</span>
<a name="l00006"></a>00006 <span class="comment"> * modification, are permitted provided that the following conditions</span>
<a name="l00007"></a>00007 <span class="comment"> * are met:</span>
<a name="l00008"></a>00008 <span class="comment"> * 1. Redistributions of source code must retain the above copyright</span>
<a name="l00009"></a>00009 <span class="comment"> *    notice, this list of conditions and the following disclaimer.</span>
<a name="l00010"></a>00010 <span class="comment"> * 2. Redistributions in binary form must reproduce the above copyright</span>
<a name="l00011"></a>00011 <span class="comment"> *    notice, this list of conditions and the following disclaimer in the</span>
<a name="l00012"></a>00012 <span class="comment"> *    documentation and/or other materials provided with the distribution.</span>
<a name="l00013"></a>00013 <span class="comment"> * 3. Neither the name of the Institute nor the names of its contributors</span>
<a name="l00014"></a>00014 <span class="comment"> *    may be used to endorse or promote products derived from this software</span>
<a name="l00015"></a>00015 <span class="comment"> *    without specific prior written permission.</span>
<a name="l00016"></a>00016 <span class="comment"> *</span>
<a name="l00017"></a>00017 <span class="comment"> * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS&#39;&#39; AND</span>
<a name="l00018"></a>00018 <span class="comment"> * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</span>
<a name="l00019"></a>00019 <span class="comment"> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE</span>
<a name="l00020"></a>00020 <span class="comment"> * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE</span>
<a name="l00021"></a>00021 <span class="comment"> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</span>
<a name="l00022"></a>00022 <span class="comment"> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS</span>
<a name="l00023"></a>00023 <span class="comment"> * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)</span>
<a name="l00024"></a>00024 <span class="comment"> * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT</span>
<a name="l00025"></a>00025 <span class="comment"> * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY</span>
<a name="l00026"></a>00026 <span class="comment"> * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF</span>
<a name="l00027"></a>00027 <span class="comment"> * SUCH DAMAGE.</span>
<a name="l00028"></a>00028 <span class="comment"> *</span>
<a name="l00029"></a>00029 <span class="comment"> * This file is part of the Contiki operating system.</span>
<a name="l00030"></a>00030 <span class="comment"> */</span>
<a name="l00031"></a>00031 <span class="comment"></span>
<a name="l00032"></a>00032 <span class="comment">/**</span>
<a name="l00033"></a>00033 <span class="comment"> * \file</span>
<a name="l00034"></a>00034 <span class="comment"> *   This file provides functions to control the M25P16 on sensinode N740s.</span>
<a name="l00035"></a>00035 <span class="comment"> *     This is a Numonyx Forte Serial Flash Memory (16Mbit)</span>
<a name="l00036"></a>00036 <span class="comment"> *     The S signal (Chip Select) is controlled via 0x02 on the 74HC595D</span>
<a name="l00037"></a>00037 <span class="comment"> *     The other instructions and timing are performed with bit bang</span>
<a name="l00038"></a>00038 <span class="comment"> *</span>
<a name="l00039"></a>00039 <span class="comment"> *     We can enable, disable, read/write data, erase pages, hold, enter/exit</span>
<a name="l00040"></a>00040 <span class="comment"> *     deep sleep etc.</span>
<a name="l00041"></a>00041 <span class="comment"> *</span>
<a name="l00042"></a>00042 <span class="comment"> *     Clock  (C) =&gt; P1_5,</span>
<a name="l00043"></a>00043 <span class="comment"> *     Ser. I (D) =&gt; P1_6,</span>
<a name="l00044"></a>00044 <span class="comment"> *     Ser. O (Q) =&gt; P1_7,</span>
<a name="l00045"></a>00045 <span class="comment"> *     Hold       =&gt; Pull Up,</span>
<a name="l00046"></a>00046 <span class="comment"> *     Write Prot =&gt; Pull Up,</span>
<a name="l00047"></a>00047 <span class="comment"> *     Chip Sel   =&gt; 74HC595D (0x02)</span>
<a name="l00048"></a>00048 <span class="comment"> *</span>
<a name="l00049"></a>00049 <span class="comment"> *   This file can be placed in any bank.</span>
<a name="l00050"></a>00050 <span class="comment"> *</span>
<a name="l00051"></a>00051 <span class="comment"> * \author</span>
<a name="l00052"></a>00052 <span class="comment"> *         George Oikonomou - &lt;oikonomou@users.sourceforge.net&gt;</span>
<a name="l00053"></a>00053 <span class="comment"> */</span>
<a name="l00054"></a>00054 
<a name="l00055"></a>00055 <span class="preprocessor">#include &quot;<a class="code" href="a01627.html" title="Header File for the module which controls the Sensinode N740 8-bit serial-in/serial or parallel-out s...">dev/n740.h</a>&quot;</span>
<a name="l00056"></a>00056 <span class="preprocessor">#include &quot;<a class="code" href="a01622.html" title="Header file for the control of the M25P16 on sensinode N740s.">dev/m25p16.h</a>&quot;</span>
<a name="l00057"></a>00057 <span class="preprocessor">#include &quot;sys/clock.h&quot;</span>
<a name="l00058"></a>00058 <span class="preprocessor">#include &quot;<a class="code" href="a00455.html" title="Header file for the energy estimation mechanism.">sys/energest.h</a>&quot;</span>
<a name="l00059"></a>00059 <span class="preprocessor">#include &quot;<a class="code" href="a00781.html" title="CC2430 registers header file for CC2430.">cc2430_sfr.h</a>&quot;</span>
<a name="l00060"></a>00060 
<a name="l00061"></a>00061 <span class="preprocessor">#define CLOCK_RISING()  {M25P16_PIN_CLOCK = 1; M25P16_PIN_CLOCK = 0;}</span>
<a name="l00062"></a>00062 <span class="preprocessor"></span><span class="preprocessor">#define CLOCK_FALLING() {M25P16_PIN_CLOCK = 0; M25P16_PIN_CLOCK = 1;}</span>
<a name="l00063"></a>00063 <span class="preprocessor"></span><span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00064"></a>00064 <span class="comment">/* Bit-Bang write a byte to the chip */</span>
<a name="l00065"></a>00065 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00066"></a>00066 bit_bang_write(uint8_t byte) CC_NON_BANKED
<a name="l00067"></a>00067 {
<a name="l00068"></a>00068   uint8_t i;
<a name="l00069"></a>00069   uint8_t bit;
<a name="l00070"></a>00070 
<a name="l00071"></a>00071   <span class="comment">/* bit-by-bit */</span>
<a name="l00072"></a>00072   <span class="keywordflow">for</span>(i = 0x80; i &gt; 0; i &gt;&gt;= 1) {
<a name="l00073"></a>00073     <span class="comment">/* Is the bit set? */</span>
<a name="l00074"></a>00074     bit = 0;
<a name="l00075"></a>00075     <span class="keywordflow">if</span>(i &amp; byte) {
<a name="l00076"></a>00076       <span class="comment">/* If it was set, we want to send 1 */</span>
<a name="l00077"></a>00077       bit = 1;
<a name="l00078"></a>00078     }
<a name="l00079"></a>00079     <span class="comment">/* Send the bit */</span>
<a name="l00080"></a>00080     M25P16_PIN_SER_I = bit;
<a name="l00081"></a>00081     <span class="comment">/* Clock - Rising */</span>
<a name="l00082"></a>00082     CLOCK_RISING();
<a name="l00083"></a>00083   }
<a name="l00084"></a>00084 }
<a name="l00085"></a>00085 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00086"></a>00086 <span class="comment">/* Bit-Bang read a byte from the chip */</span>
<a name="l00087"></a>00087 <span class="keyword">static</span> uint8_t
<a name="l00088"></a>00088 bit_bang_read() CC_NON_BANKED
<a name="l00089"></a>00089 {
<a name="l00090"></a>00090   int8_t i;
<a name="l00091"></a>00091   uint8_t bits = 0;
<a name="l00092"></a>00092 
<a name="l00093"></a>00093   <span class="comment">/* bit-by-bit */</span>
<a name="l00094"></a>00094   <span class="keywordflow">for</span>(i = 7; i &gt;= 0; i--) {
<a name="l00095"></a>00095     <span class="comment">/* Clock - Falling */</span>
<a name="l00096"></a>00096     CLOCK_FALLING();
<a name="l00097"></a>00097 
<a name="l00098"></a>00098     <span class="comment">/* Read the bit */</span>
<a name="l00099"></a>00099     bits |= (M25P16_PIN_SER_O &lt;&lt; i);
<a name="l00100"></a>00100   }
<a name="l00101"></a>00101   <span class="keywordflow">return</span> bits;
<a name="l00102"></a>00102 }
<a name="l00103"></a>00103 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00104"></a>00104 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00105"></a>00105 select() CC_NON_BANKED
<a name="l00106"></a>00106 {
<a name="l00107"></a>00107   <span class="comment">/* Read current ser/par value */</span>
<a name="l00108"></a>00108   uint8_t ser_par = n740_ser_par_get();
<a name="l00109"></a>00109 
<a name="l00110"></a>00110   M25P16_PIN_CLOCK = 0;
<a name="l00111"></a>00111 
<a name="l00112"></a>00112   ser_par &amp;= ~N740_SER_PAR_CHIP_SEL;  <span class="comment">/* Select Flash */</span>
<a name="l00113"></a>00113 
<a name="l00114"></a>00114   <span class="comment">/* Write the new status back to the ser/par */</span>
<a name="l00115"></a>00115   n740_ser_par_set(ser_par);
<a name="l00116"></a>00116 }
<a name="l00117"></a>00117 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00118"></a>00118 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00119"></a>00119 deselect() CC_NON_BANKED
<a name="l00120"></a>00120 {
<a name="l00121"></a>00121   <span class="comment">/* Read current ser/par value */</span>
<a name="l00122"></a>00122   uint8_t ser_par = n740_ser_par_get();
<a name="l00123"></a>00123 
<a name="l00124"></a>00124   ser_par |= N740_SER_PAR_CHIP_SEL;    <span class="comment">/* De-Select Flash  */</span>
<a name="l00125"></a>00125 
<a name="l00126"></a>00126   <span class="comment">/* Write the new status back to the ser/par */</span>
<a name="l00127"></a>00127   n740_ser_par_set(ser_par);
<a name="l00128"></a>00128 }
<a name="l00129"></a>00129 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00130"></a>00130 <span class="keywordtype">void</span>
<a name="l00131"></a><a class="code" href="a01622.html#a39bed720ac92d59a37ad9a2fc8ced923">00131</a> <a class="code" href="a01621.html#a39bed720ac92d59a37ad9a2fc8ced923" title="Write Enable (WREN) instruction.">m25p16_wren</a>()
<a name="l00132"></a>00132 {
<a name="l00133"></a>00133   select();
<a name="l00134"></a>00134   bit_bang_write(M25P16_I_WREN);
<a name="l00135"></a>00135   deselect();
<a name="l00136"></a>00136 
<a name="l00137"></a>00137   <span class="keywordflow">while</span>(!<a class="code" href="a01622.html#a5291b1731e901b56b85de7b683c7d877" title="Check for Write-Enable.">M25P16_WEL</a>());
<a name="l00138"></a>00138 }
<a name="l00139"></a>00139 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00140"></a>00140 <span class="keywordtype">void</span>
<a name="l00141"></a><a class="code" href="a01622.html#a1fc99d85c5850f114a3d39368d2cb7c3">00141</a> <a class="code" href="a01621.html#a1fc99d85c5850f114a3d39368d2cb7c3" title="Write Disable (WRDI) instruction.">m25p16_wrdi</a>()
<a name="l00142"></a>00142 {
<a name="l00143"></a>00143   select();
<a name="l00144"></a>00144   bit_bang_write(M25P16_I_WRDI);
<a name="l00145"></a>00145   deselect();
<a name="l00146"></a>00146 }
<a name="l00147"></a>00147 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00148"></a>00148 <span class="keywordtype">void</span>
<a name="l00149"></a><a class="code" href="a01622.html#a229511f6d7b36488e29883b904125670">00149</a> <a class="code" href="a01621.html#a229511f6d7b36488e29883b904125670" title="Read Identifier (RDID)instruction.">m25p16_rdid</a>(<span class="keyword">struct</span> <a class="code" href="a00060.html" title="Device Identifier.">m25p16_rdid</a> * rdid)
<a name="l00150"></a>00150 {
<a name="l00151"></a>00151   uint8_t i;
<a name="l00152"></a>00152 
<a name="l00153"></a>00153   select();
<a name="l00154"></a>00154   bit_bang_write(M25P16_I_RDID);
<a name="l00155"></a>00155 
<a name="l00156"></a>00156   rdid-&gt;man_id = bit_bang_read();
<a name="l00157"></a>00157   rdid-&gt;<a class="code" href="a00060.html#afa813a0abeb3144c7eebaa8acdf39862" title="Manufacturer ID.">mem_type</a> = bit_bang_read(); <span class="comment">/* Device ID MSB */</span>
<a name="l00158"></a>00158   rdid-&gt;<a class="code" href="a00060.html#a62bffc5b43545a28542b2ed057a004b7" title="Memory Type.">mem_size</a> = bit_bang_read(); <span class="comment">/* Device ID LSB */</span>
<a name="l00159"></a>00159   rdid-&gt;<a class="code" href="a00060.html#a39c74230a653920a26eb6ef391d647a7" title="Memory Size.">uid_len</a> = bit_bang_read();
<a name="l00160"></a>00160   <span class="keywordflow">for</span>(i = 0; i &lt; rdid-&gt;<a class="code" href="a00060.html#a39c74230a653920a26eb6ef391d647a7" title="Memory Size.">uid_len</a>; i++) {
<a name="l00161"></a>00161     rdid-&gt;<a class="code" href="a00060.html#aa9a831da73f95a89b0b9528f9d9fb389" title="Unique ID length.">uid</a>[i] = bit_bang_read();
<a name="l00162"></a>00162   }
<a name="l00163"></a>00163   deselect();
<a name="l00164"></a>00164 }
<a name="l00165"></a>00165 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00166"></a>00166 uint8_t
<a name="l00167"></a><a class="code" href="a01622.html#aca2ffc91878cb343e1f151a0f38778eb">00167</a> <a class="code" href="a01621.html#aca2ffc91878cb343e1f151a0f38778eb" title="Read Status Register (RDSR) instruction.">m25p16_rdsr</a>()
<a name="l00168"></a>00168 {
<a name="l00169"></a>00169   uint8_t rv;
<a name="l00170"></a>00170 
<a name="l00171"></a>00171   select();
<a name="l00172"></a>00172   bit_bang_write(M25P16_I_RDSR);
<a name="l00173"></a>00173   rv = bit_bang_read();
<a name="l00174"></a>00174   deselect();
<a name="l00175"></a>00175 
<a name="l00176"></a>00176   <span class="keywordflow">return</span> rv;
<a name="l00177"></a>00177 }
<a name="l00178"></a>00178 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00179"></a>00179 <span class="keywordtype">void</span>
<a name="l00180"></a><a class="code" href="a01622.html#a7d08feb122ca405e2130cc1a3c75c643">00180</a> <a class="code" href="a01621.html#a7d08feb122ca405e2130cc1a3c75c643" title="Write Status Register (WRSR) instruction.">m25p16_wrsr</a>(uint8_t val)
<a name="l00181"></a>00181 {
<a name="l00182"></a>00182   <a class="code" href="a01621.html#a39bed720ac92d59a37ad9a2fc8ced923" title="Write Enable (WREN) instruction.">m25p16_wren</a>(); <span class="comment">/* Write Enable */</span>
<a name="l00183"></a>00183 
<a name="l00184"></a>00184   select();
<a name="l00185"></a>00185   ENERGEST_ON(ENERGEST_TYPE_FLASH_WRITE);
<a name="l00186"></a>00186   bit_bang_write(M25P16_I_WRSR);
<a name="l00187"></a>00187   bit_bang_write(val);
<a name="l00188"></a>00188   ENERGEST_OFF(ENERGEST_TYPE_FLASH_WRITE);
<a name="l00189"></a>00189   deselect();
<a name="l00190"></a>00190 }
<a name="l00191"></a>00191 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00192"></a>00192 <span class="keywordtype">void</span>
<a name="l00193"></a><a class="code" href="a01622.html#a696ab02660ecbb25862366e5421a9771">00193</a> <a class="code" href="a01621.html#a696ab02660ecbb25862366e5421a9771" title="Read Data Bytes (READ) instruction.">m25p16_read</a>(uint8_t * addr, uint8_t * buff, uint8_t buff_len)
<a name="l00194"></a>00194 {
<a name="l00195"></a>00195   uint8_t i;
<a name="l00196"></a>00196 
<a name="l00197"></a>00197   select();
<a name="l00198"></a>00198   ENERGEST_ON(ENERGEST_TYPE_FLASH_READ);
<a name="l00199"></a>00199 
<a name="l00200"></a>00200 <span class="preprocessor">#if M25P16_READ_FAST</span>
<a name="l00201"></a>00201 <span class="preprocessor"></span>  bit_bang_write(M25P16_I_FAST_READ);
<a name="l00202"></a>00202 <span class="preprocessor">#else</span>
<a name="l00203"></a>00203 <span class="preprocessor"></span>  bit_bang_write(M25P16_I_READ);
<a name="l00204"></a>00204 <span class="preprocessor">#endif</span>
<a name="l00205"></a>00205 <span class="preprocessor"></span>
<a name="l00206"></a>00206   <span class="comment">/* Write the address, MSB in addr[0], bits [7:5] of the MSB: &#39;don&#39;t care&#39; */</span>
<a name="l00207"></a>00207   <span class="keywordflow">for</span>(i = 0; i &lt; 3; i++) {
<a name="l00208"></a>00208     bit_bang_write(addr[i]);
<a name="l00209"></a>00209   }
<a name="l00210"></a>00210 
<a name="l00211"></a>00211   <span class="comment">/* For FAST_READ, send the dummy byte */</span>
<a name="l00212"></a>00212 <span class="preprocessor">#if M25P16_READ_FAST</span>
<a name="l00213"></a>00213 <span class="preprocessor"></span>  bit_bang_write(M25P16_DUMMY_BYTE);
<a name="l00214"></a>00214 <span class="preprocessor">#endif</span>
<a name="l00215"></a>00215 <span class="preprocessor"></span>
<a name="l00216"></a>00216   <span class="keywordflow">for</span>(i = 0; i &lt; buff_len; i++) {
<a name="l00217"></a>00217     buff[i] = ~bit_bang_read();
<a name="l00218"></a>00218   }
<a name="l00219"></a>00219   ENERGEST_OFF(ENERGEST_TYPE_FLASH_READ);
<a name="l00220"></a>00220   deselect();
<a name="l00221"></a>00221 }
<a name="l00222"></a>00222 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00223"></a>00223 <span class="keywordtype">void</span>
<a name="l00224"></a><a class="code" href="a01622.html#a405e8e8161d16e1579f926421c96e760">00224</a> <a class="code" href="a01621.html#a405e8e8161d16e1579f926421c96e760" title="Program Page (PP) instruction.">m25p16_pp</a>(uint8_t * addr, uint8_t * buff, uint8_t buff_len)
<a name="l00225"></a>00225 {
<a name="l00226"></a>00226   uint8_t i;
<a name="l00227"></a>00227 
<a name="l00228"></a>00228   <a class="code" href="a01621.html#a39bed720ac92d59a37ad9a2fc8ced923" title="Write Enable (WREN) instruction.">m25p16_wren</a>(); <span class="comment">/* Write Enable */</span>
<a name="l00229"></a>00229 
<a name="l00230"></a>00230   select();
<a name="l00231"></a>00231   ENERGEST_ON(ENERGEST_TYPE_FLASH_WRITE);
<a name="l00232"></a>00232   bit_bang_write(M25P16_I_PP);
<a name="l00233"></a>00233 
<a name="l00234"></a>00234   <span class="comment">/* Write the address, MSB in addr[0] */</span>
<a name="l00235"></a>00235   <span class="keywordflow">for</span>(i = 0; i &lt; 3; i++) {
<a name="l00236"></a>00236     bit_bang_write(addr[i]);
<a name="l00237"></a>00237   }
<a name="l00238"></a>00238 
<a name="l00239"></a>00239   <span class="comment">/* Write the bytes */</span>
<a name="l00240"></a>00240   <span class="keywordflow">for</span>(i=0; i&lt;buff_len; i++) {
<a name="l00241"></a>00241     bit_bang_write(~buff[i]);
<a name="l00242"></a>00242   }
<a name="l00243"></a>00243   ENERGEST_OFF(ENERGEST_TYPE_FLASH_WRITE);
<a name="l00244"></a>00244   deselect();
<a name="l00245"></a>00245 }
<a name="l00246"></a>00246 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00247"></a>00247 <span class="keywordtype">void</span>
<a name="l00248"></a><a class="code" href="a01622.html#a420d47d32f08857620f020af7a85b6f1">00248</a> <a class="code" href="a01621.html#a420d47d32f08857620f020af7a85b6f1" title="Sector Erase (SE) instruction.">m25p16_se</a>(uint8_t s)
<a name="l00249"></a>00249 {
<a name="l00250"></a>00250   <a class="code" href="a01621.html#a39bed720ac92d59a37ad9a2fc8ced923" title="Write Enable (WREN) instruction.">m25p16_wren</a>(); <span class="comment">/* Write Enable */</span>
<a name="l00251"></a>00251 
<a name="l00252"></a>00252   select();
<a name="l00253"></a>00253   ENERGEST_ON(ENERGEST_TYPE_FLASH_WRITE);
<a name="l00254"></a>00254   bit_bang_write(M25P16_I_SE);
<a name="l00255"></a>00255   bit_bang_write(s);
<a name="l00256"></a>00256   bit_bang_write(0x00);
<a name="l00257"></a>00257   bit_bang_write(0x00);
<a name="l00258"></a>00258   deselect();
<a name="l00259"></a>00259   ENERGEST_OFF(ENERGEST_TYPE_FLASH_WRITE);
<a name="l00260"></a>00260 }
<a name="l00261"></a>00261 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00262"></a>00262 <span class="keywordtype">void</span>
<a name="l00263"></a><a class="code" href="a01622.html#a6a5feabad55c0b533d368773de2869d7">00263</a> <a class="code" href="a01621.html#a6a5feabad55c0b533d368773de2869d7" title="Bulk Erase (SE) instruction.">m25p16_be</a>()
<a name="l00264"></a>00264 {
<a name="l00265"></a>00265   <a class="code" href="a01621.html#a39bed720ac92d59a37ad9a2fc8ced923" title="Write Enable (WREN) instruction.">m25p16_wren</a>(); <span class="comment">/* Write Enable */</span>
<a name="l00266"></a>00266 
<a name="l00267"></a>00267   select();
<a name="l00268"></a>00268   bit_bang_write(M25P16_I_BE);
<a name="l00269"></a>00269   deselect();
<a name="l00270"></a>00270 }
<a name="l00271"></a>00271 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00272"></a>00272 <span class="keywordtype">void</span>
<a name="l00273"></a><a class="code" href="a01622.html#ac8cbc51dabc5aa595f9d0acf675a711a">00273</a> <a class="code" href="a01621.html#ac8cbc51dabc5aa595f9d0acf675a711a" title="Deep Power Down (DP) instruction.">m25p16_dp</a>()
<a name="l00274"></a>00274 {
<a name="l00275"></a>00275   select();
<a name="l00276"></a>00276   bit_bang_write(M25P16_I_DP);
<a name="l00277"></a>00277   deselect();
<a name="l00278"></a>00278 }
<a name="l00279"></a>00279 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00280"></a>00280 <span class="comment">/*</span>
<a name="l00281"></a>00281 <span class="comment"> * Release Deep Power Down. We do NOT read the Electronic Signature</span>
<a name="l00282"></a>00282 <span class="comment"> */</span>
<a name="l00283"></a>00283 <span class="keywordtype">void</span>
<a name="l00284"></a><a class="code" href="a01622.html#af894e635b54a8626d9a129c8c87dcbfb">00284</a> <a class="code" href="a01621.html#af894e635b54a8626d9a129c8c87dcbfb" title="Release from Deep Power Down (RES) instruction.">m25p16_res</a>() {
<a name="l00285"></a>00285   select();
<a name="l00286"></a>00286   bit_bang_write(M25P16_I_RES);
<a name="l00287"></a>00287   deselect();
<a name="l00288"></a>00288   <span class="comment">/* a few usec between RES and standby */</span>
<a name="l00289"></a>00289   <span class="keywordflow">while</span>(<a class="code" href="a01622.html#af926e36d0c91beb2651e2eca14034b5c" title="Check for Write in Progress.">M25P16_WIP</a>());
<a name="l00290"></a>00290 }
<a name="l00291"></a>00291 <span class="comment">/*---------------------------------------------------------------------------*/</span><span class="comment"></span>
<a name="l00292"></a>00292 <span class="comment">/**</span>
<a name="l00293"></a>00293 <span class="comment"> * Release Deep Power Down. Read and return the Electronic Signature</span>
<a name="l00294"></a>00294 <span class="comment"> * must return 0x14</span>
<a name="l00295"></a>00295 <span class="comment"> *</span>
<a name="l00296"></a>00296 <span class="comment"> * \return The old style Electronic Signature. This must be 0x14</span>
<a name="l00297"></a>00297 <span class="comment"> */</span>
<a name="l00298"></a>00298 uint8_t
<a name="l00299"></a><a class="code" href="a01622.html#ada69119d877cfabd3105953578163eb3">00299</a> <a class="code" href="a01621.html#ada69119d877cfabd3105953578163eb3" title="Release Deep Power Down.">m25p16_res_res</a>() {
<a name="l00300"></a>00300   uint8_t rv;
<a name="l00301"></a>00301 
<a name="l00302"></a>00302   select();
<a name="l00303"></a>00303   bit_bang_write(M25P16_I_RES);
<a name="l00304"></a>00304   bit_bang_write(M25P16_DUMMY_BYTE);
<a name="l00305"></a>00305   bit_bang_write(M25P16_DUMMY_BYTE);
<a name="l00306"></a>00306   bit_bang_write(M25P16_DUMMY_BYTE);
<a name="l00307"></a>00307 
<a name="l00308"></a>00308   rv = bit_bang_read();
<a name="l00309"></a>00309 
<a name="l00310"></a>00310   deselect();
<a name="l00311"></a>00311 
<a name="l00312"></a>00312   <span class="comment">/* a few usec between RES and standby */</span>
<a name="l00313"></a>00313   <span class="keywordflow">while</span>(<a class="code" href="a01622.html#af926e36d0c91beb2651e2eca14034b5c" title="Check for Write in Progress.">M25P16_WIP</a>());
<a name="l00314"></a>00314   <span class="keywordflow">return</span> rv;
<a name="l00315"></a>00315 }
<a name="l00316"></a>00316 <span class="comment">/*---------------------------------------------------------------------------*/</span>
</pre></div></div><!-- contents -->


<hr class="footer"/><address class="footer"><small>
Generated on Sun Jan 13 2013 10:57:28 for Contiki 2.6 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.7.6.1
</small></address>

</body>
</html>
