<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>Contiki 2.6: core/net/mac/nullrdc.c Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />



</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">Contiki 2.6
   
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.html"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.html"><span>Modules</span></a></li>
      <li><a href="annotated.html"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li><a href="dirs.html"><span>Directories</span></a></li>
      <li><a href="examples.html"><span>Examples</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>Globals</span></a></li>
    </ul>
  </div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="dir_3b4aaa38be606d755c8f09da5f4b54fc.html">core</a>      </li>
      <li class="navelem"><a class="el" href="dir_e85a2b0fd2c84e4058315392b52d2635.html">net</a>      </li>
      <li class="navelem"><a class="el" href="dir_71544f394909677a989812da1f0356b5.html">mac</a>      </li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">nullrdc.c</div>  </div>
</div><!--header-->
<div class="contents">
<a href="a00285.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment"> * Copyright (c) 2010, Swedish Institute of Computer Science.</span>
<a name="l00003"></a>00003 <span class="comment"> * All rights reserved.</span>
<a name="l00004"></a>00004 <span class="comment"> *</span>
<a name="l00005"></a>00005 <span class="comment"> * Redistribution and use in source and binary forms, with or without</span>
<a name="l00006"></a>00006 <span class="comment"> * modification, are permitted provided that the following conditions</span>
<a name="l00007"></a>00007 <span class="comment"> * are met:</span>
<a name="l00008"></a>00008 <span class="comment"> * 1. Redistributions of source code must retain the above copyright</span>
<a name="l00009"></a>00009 <span class="comment"> *    notice, this list of conditions and the following disclaimer.</span>
<a name="l00010"></a>00010 <span class="comment"> * 2. Redistributions in binary form must reproduce the above copyright</span>
<a name="l00011"></a>00011 <span class="comment"> *    notice, this list of conditions and the following disclaimer in the</span>
<a name="l00012"></a>00012 <span class="comment"> *    documentation and/or other materials provided with the distribution.</span>
<a name="l00013"></a>00013 <span class="comment"> * 3. Neither the name of the Institute nor the names of its contributors</span>
<a name="l00014"></a>00014 <span class="comment"> *    may be used to endorse or promote products derived from this software</span>
<a name="l00015"></a>00015 <span class="comment"> *    without specific prior written permission.</span>
<a name="l00016"></a>00016 <span class="comment"> *</span>
<a name="l00017"></a>00017 <span class="comment"> * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS&#39;&#39; AND</span>
<a name="l00018"></a>00018 <span class="comment"> * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</span>
<a name="l00019"></a>00019 <span class="comment"> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE</span>
<a name="l00020"></a>00020 <span class="comment"> * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE</span>
<a name="l00021"></a>00021 <span class="comment"> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</span>
<a name="l00022"></a>00022 <span class="comment"> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS</span>
<a name="l00023"></a>00023 <span class="comment"> * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)</span>
<a name="l00024"></a>00024 <span class="comment"> * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT</span>
<a name="l00025"></a>00025 <span class="comment"> * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY</span>
<a name="l00026"></a>00026 <span class="comment"> * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF</span>
<a name="l00027"></a>00027 <span class="comment"> * SUCH DAMAGE.</span>
<a name="l00028"></a>00028 <span class="comment"> *</span>
<a name="l00029"></a>00029 <span class="comment"> * This file is part of the Contiki operating system.</span>
<a name="l00030"></a>00030 <span class="comment"> *</span>
<a name="l00031"></a>00031 <span class="comment"> * $Id: nullrdc.c,v 1.4 2010/11/23 18:11:00 nifi Exp $</span>
<a name="l00032"></a>00032 <span class="comment"> */</span>
<a name="l00033"></a>00033 <span class="comment"></span>
<a name="l00034"></a>00034 <span class="comment">/**</span>
<a name="l00035"></a>00035 <span class="comment"> * \file</span>
<a name="l00036"></a>00036 <span class="comment"> *         A null RDC implementation that uses framer for headers.</span>
<a name="l00037"></a>00037 <span class="comment"> * \author</span>
<a name="l00038"></a>00038 <span class="comment"> *         Adam Dunkels &lt;adam@sics.se&gt;</span>
<a name="l00039"></a>00039 <span class="comment"> *         Niclas Finne &lt;nfi@sics.se&gt;</span>
<a name="l00040"></a>00040 <span class="comment"> */</span>
<a name="l00041"></a>00041 
<a name="l00042"></a>00042 <span class="preprocessor">#include &quot;<a class="code" href="a00286.html" title="A null RDC implementation that uses framer for headers.">net/mac/nullrdc.h</a>&quot;</span>
<a name="l00043"></a>00043 <span class="preprocessor">#include &quot;<a class="code" href="a00305.html" title="Header file for the Rime buffer (packetbuf) management.">net/packetbuf.h</a>&quot;</span>
<a name="l00044"></a>00044 <span class="preprocessor">#include &quot;<a class="code" href="a00311.html" title="Header file for the Rime queue buffer management.">net/queuebuf.h</a>&quot;</span>
<a name="l00045"></a>00045 <span class="preprocessor">#include &quot;<a class="code" href="a00303.html" title="Include file for the Contiki low-layer network stack (NETSTACK)">net/netstack.h</a>&quot;</span>
<a name="l00046"></a>00046 <span class="preprocessor">#include &lt;string.h&gt;</span>
<a name="l00047"></a>00047 
<a name="l00048"></a>00048 <span class="preprocessor">#define DEBUG 0</span>
<a name="l00049"></a>00049 <span class="preprocessor"></span><span class="preprocessor">#if DEBUG</span>
<a name="l00050"></a>00050 <span class="preprocessor"></span><span class="preprocessor">#include &lt;stdio.h&gt;</span>
<a name="l00051"></a>00051 <span class="preprocessor">#define PRINTF(...) printf(__VA_ARGS__)</span>
<a name="l00052"></a>00052 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00053"></a>00053 <span class="preprocessor"></span><span class="preprocessor">#define PRINTF(...)</span>
<a name="l00054"></a>00054 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00055"></a>00055 <span class="preprocessor"></span>
<a name="l00056"></a>00056 <span class="preprocessor">#ifdef NULLRDC_CONF_ADDRESS_FILTER</span>
<a name="l00057"></a>00057 <span class="preprocessor"></span><span class="preprocessor">#define NULLRDC_ADDRESS_FILTER NULLRDC_CONF_ADDRESS_FILTER</span>
<a name="l00058"></a>00058 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00059"></a>00059 <span class="preprocessor"></span><span class="preprocessor">#define NULLRDC_ADDRESS_FILTER 1</span>
<a name="l00060"></a>00060 <span class="preprocessor"></span><span class="preprocessor">#endif </span><span class="comment">/* NULLRDC_CONF_ADDRESS_FILTER */</span>
<a name="l00061"></a>00061 
<a name="l00062"></a>00062 <span class="preprocessor">#ifndef NULLRDC_802154_AUTOACK</span>
<a name="l00063"></a>00063 <span class="preprocessor"></span><span class="preprocessor">#ifdef NULLRDC_CONF_802154_AUTOACK</span>
<a name="l00064"></a>00064 <span class="preprocessor"></span><span class="preprocessor">#define NULLRDC_802154_AUTOACK NULLRDC_CONF_802154_AUTOACK</span>
<a name="l00065"></a>00065 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00066"></a>00066 <span class="preprocessor"></span><span class="preprocessor">#define NULLRDC_802154_AUTOACK 0</span>
<a name="l00067"></a>00067 <span class="preprocessor"></span><span class="preprocessor">#endif </span><span class="comment">/* NULLRDC_CONF_802154_AUTOACK */</span>
<a name="l00068"></a>00068 <span class="preprocessor">#endif </span><span class="comment">/* NULLRDC_802154_AUTOACK */</span>
<a name="l00069"></a>00069 
<a name="l00070"></a>00070 <span class="preprocessor">#ifndef NULLRDC_802154_AUTOACK_HW</span>
<a name="l00071"></a>00071 <span class="preprocessor"></span><span class="preprocessor">#ifdef NULLRDC_CONF_802154_AUTOACK_HW</span>
<a name="l00072"></a>00072 <span class="preprocessor"></span><span class="preprocessor">#define NULLRDC_802154_AUTOACK_HW NULLRDC_CONF_802154_AUTOACK_HW</span>
<a name="l00073"></a>00073 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00074"></a>00074 <span class="preprocessor"></span><span class="preprocessor">#define NULLRDC_802154_AUTOACK_HW 0</span>
<a name="l00075"></a>00075 <span class="preprocessor"></span><span class="preprocessor">#endif </span><span class="comment">/* NULLRDC_CONF_802154_AUTOACK_HW */</span>
<a name="l00076"></a>00076 <span class="preprocessor">#endif </span><span class="comment">/* NULLRDC_802154_AUTOACK_HW */</span>
<a name="l00077"></a>00077 
<a name="l00078"></a>00078 <span class="preprocessor">#if NULLRDC_802154_AUTOACK</span>
<a name="l00079"></a>00079 <span class="preprocessor"></span><span class="preprocessor">#include &quot;<a class="code" href="a00476.html" title="Header file for the real-time timer module.">sys/rtimer.h</a>&quot;</span>
<a name="l00080"></a>00080 <span class="preprocessor">#include &quot;dev/watchdog.h&quot;</span>
<a name="l00081"></a>00081 
<a name="l00082"></a>00082 <span class="preprocessor">#define ACK_WAIT_TIME                      RTIMER_SECOND / 2500</span>
<a name="l00083"></a>00083 <span class="preprocessor"></span><span class="preprocessor">#define AFTER_ACK_DETECTED_WAIT_TIME       RTIMER_SECOND / 1500</span>
<a name="l00084"></a>00084 <span class="preprocessor"></span><span class="preprocessor">#define ACK_LEN 3</span>
<a name="l00085"></a>00085 <span class="preprocessor"></span><span class="preprocessor">#endif </span><span class="comment">/* NULLRDC_802154_AUTOACK */</span>
<a name="l00086"></a>00086 
<a name="l00087"></a>00087 <span class="preprocessor">#if NULLRDC_802154_AUTOACK || NULLRDC_802154_AUTOACK_HW</span>
<a name="l00088"></a>00088 <span class="preprocessor"></span><span class="keyword">struct </span>seqno {
<a name="l00089"></a>00089   rimeaddr_t sender;
<a name="l00090"></a>00090   uint8_t seqno;
<a name="l00091"></a>00091 };
<a name="l00092"></a>00092 
<a name="l00093"></a>00093 <span class="preprocessor">#ifdef NETSTACK_CONF_MAC_SEQNO_HISTORY</span>
<a name="l00094"></a>00094 <span class="preprocessor"></span><span class="preprocessor">#define MAX_SEQNOS NETSTACK_CONF_MAC_SEQNO_HISTORY</span>
<a name="l00095"></a>00095 <span class="preprocessor"></span><span class="preprocessor">#else </span><span class="comment">/* NETSTACK_CONF_MAC_SEQNO_HISTORY */</span>
<a name="l00096"></a>00096 <span class="preprocessor">#define MAX_SEQNOS 16</span>
<a name="l00097"></a>00097 <span class="preprocessor"></span><span class="preprocessor">#endif </span><span class="comment">/* NETSTACK_CONF_MAC_SEQNO_HISTORY */</span>
<a name="l00098"></a>00098 
<a name="l00099"></a>00099 <span class="keyword">static</span> <span class="keyword">struct </span>seqno received_seqnos[MAX_SEQNOS];
<a name="l00100"></a>00100 <span class="preprocessor">#endif </span><span class="comment">/* NULLRDC_802154_AUTOACK || NULLRDC_802154_AUTOACK_HW */</span>
<a name="l00101"></a>00101 
<a name="l00102"></a>00102 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00103"></a>00103 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00104"></a>00104 send_packet(mac_callback_t sent, <span class="keywordtype">void</span> *ptr)
<a name="l00105"></a>00105 {
<a name="l00106"></a>00106   <span class="keywordtype">int</span> ret;
<a name="l00107"></a>00107   packetbuf_set_addr(PACKETBUF_ADDR_SENDER, &amp;<a class="code" href="a01845.html#gaade5a80096fb3b4296cf89eeaca3087d" title="The Rime address of the node.">rimeaddr_node_addr</a>);
<a name="l00108"></a>00108 <span class="preprocessor">#if NULLRDC_802154_AUTOACK || NULLRDC_802154_AUTOACK_HW</span>
<a name="l00109"></a>00109 <span class="preprocessor"></span>  packetbuf_set_attr(PACKETBUF_ATTR_MAC_ACK, 1);
<a name="l00110"></a>00110 <span class="preprocessor">#endif </span><span class="comment">/* NULLRDC_802154_AUTOACK || NULLRDC_802154_AUTOACK_HW */</span>
<a name="l00111"></a>00111 
<a name="l00112"></a>00112   <span class="keywordflow">if</span>(NETSTACK_FRAMER.create() &lt; 0) {
<a name="l00113"></a>00113     <span class="comment">/* Failed to allocate space for headers */</span>
<a name="l00114"></a>00114     PRINTF(<span class="stringliteral">&quot;nullrdc: send failed, too large header\n&quot;</span>);
<a name="l00115"></a>00115     ret = MAC_TX_ERR_FATAL;
<a name="l00116"></a>00116   } <span class="keywordflow">else</span> {
<a name="l00117"></a>00117 
<a name="l00118"></a>00118 <span class="preprocessor">#if NULLRDC_802154_AUTOACK</span>
<a name="l00119"></a>00119 <span class="preprocessor"></span>    <span class="keywordtype">int</span> is_broadcast;
<a name="l00120"></a>00120     uint8_t dsn;
<a name="l00121"></a>00121     dsn = ((uint8_t *)<a class="code" href="a01801.html#ga67c213a97ab9bdadddd90db1df0a3058" title="Get a pointer to the header in the packetbuf, for outbound packets.">packetbuf_hdrptr</a>())[2] &amp; 0xff;
<a name="l00122"></a>00122 
<a name="l00123"></a>00123     NETSTACK_RADIO.<a class="code" href="a00073.html#a38aa2cc1efc42aa695d3e10926c55eed" title="Prepare the radio with a packet to be sent.">prepare</a>(<a class="code" href="a01801.html#ga67c213a97ab9bdadddd90db1df0a3058" title="Get a pointer to the header in the packetbuf, for outbound packets.">packetbuf_hdrptr</a>(), <a class="code" href="a01801.html#ga3cc486f4d4f837db11c6376bee07ebcb" title="Get the total length of the header and data in the packetbuf.">packetbuf_totlen</a>());
<a name="l00124"></a>00124 
<a name="l00125"></a>00125     is_broadcast = <a class="code" href="a01845.html#gaed118d3d8fe7e7ac9d6d00988268357e" title="Compare two Rime addresses.">rimeaddr_cmp</a>(packetbuf_addr(PACKETBUF_ADDR_RECEIVER),
<a name="l00126"></a>00126                                 &amp;<a class="code" href="a01845.html#gaa96ae7849482147440e77751444faa6d" title="The null Rime address.">rimeaddr_null</a>);
<a name="l00127"></a>00127 
<a name="l00128"></a>00128     <span class="keywordflow">if</span>(NETSTACK_RADIO.<a class="code" href="a00073.html#a4b380ec8f632e6e435ca210b8072a438" title="Check if the radio driver is currently receiving a packet.">receiving_packet</a>() ||
<a name="l00129"></a>00129        (!is_broadcast &amp;&amp; NETSTACK_RADIO.<a class="code" href="a00073.html#ab5fe62757c820d4bd690b8740d64e752" title="Check if the radio driver has just received a packet.">pending_packet</a>())) {
<a name="l00130"></a>00130 
<a name="l00131"></a>00131       <span class="comment">/* Currently receiving a packet over air or the radio has</span>
<a name="l00132"></a>00132 <span class="comment">         already received a packet that needs to be read before</span>
<a name="l00133"></a>00133 <span class="comment">         sending with auto ack. */</span>
<a name="l00134"></a>00134       ret = <a class="code" href="a00280.html#a385c44f6fb256e5716a2302a5b940388a5601d8ac68c1b9f5adf34b5e7f168998" title="The MAC layer did not get an acknowledgement for the packet.">MAC_TX_COLLISION</a>;
<a name="l00135"></a>00135 
<a name="l00136"></a>00136     } <span class="keywordflow">else</span> {
<a name="l00137"></a>00137       <span class="keywordflow">switch</span>(NETSTACK_RADIO.<a class="code" href="a00073.html#aefbad725b4dd302fdf4bd62e28706378" title="Send the packet that has previously been prepared.">transmit</a>(<a class="code" href="a01801.html#ga3cc486f4d4f837db11c6376bee07ebcb" title="Get the total length of the header and data in the packetbuf.">packetbuf_totlen</a>())) {
<a name="l00138"></a>00138       <span class="keywordflow">case</span> RADIO_TX_OK:
<a name="l00139"></a>00139         <span class="keywordflow">if</span>(is_broadcast) {
<a name="l00140"></a>00140           ret = <a class="code" href="a00280.html#a385c44f6fb256e5716a2302a5b940388a7289d883fcead5ad7d148f222a98381a" title="The MAC layer transmission was OK.">MAC_TX_OK</a>;
<a name="l00141"></a>00141         } <span class="keywordflow">else</span> {
<a name="l00142"></a>00142           rtimer_clock_t wt;
<a name="l00143"></a>00143 
<a name="l00144"></a>00144           <span class="comment">/* Check for ack */</span>
<a name="l00145"></a>00145           wt = <a class="code" href="a01868.html#gae646864933baa81ca646c96fa6f9f803" title="Get the current clock time.">RTIMER_NOW</a>();
<a name="l00146"></a>00146           watchdog_periodic();
<a name="l00147"></a>00147           <span class="keywordflow">while</span>(RTIMER_CLOCK_LT(<a class="code" href="a01868.html#gae646864933baa81ca646c96fa6f9f803" title="Get the current clock time.">RTIMER_NOW</a>(), wt + ACK_WAIT_TIME));
<a name="l00148"></a>00148 
<a name="l00149"></a>00149           ret = <a class="code" href="a00280.html#a385c44f6fb256e5716a2302a5b940388a94644931ae3262ac4b8c1f8077666205" title="The MAC layer deferred the transmission for a later time.">MAC_TX_NOACK</a>;
<a name="l00150"></a>00150           <span class="keywordflow">if</span>(NETSTACK_RADIO.<a class="code" href="a00073.html#a4b380ec8f632e6e435ca210b8072a438" title="Check if the radio driver is currently receiving a packet.">receiving_packet</a>() ||
<a name="l00151"></a>00151              NETSTACK_RADIO.<a class="code" href="a00073.html#ab5fe62757c820d4bd690b8740d64e752" title="Check if the radio driver has just received a packet.">pending_packet</a>() ||
<a name="l00152"></a>00152              NETSTACK_RADIO.<a class="code" href="a00073.html#a8284614b7c7ee7b35a7cf732276ba62d" title="Perform a Clear-Channel Assessment (CCA) to find out if there is a packet in the air or not...">channel_clear</a>() == 0) {
<a name="l00153"></a>00153             <span class="keywordtype">int</span> len;
<a name="l00154"></a>00154             uint8_t ackbuf[ACK_LEN];
<a name="l00155"></a>00155 
<a name="l00156"></a>00156             wt = <a class="code" href="a01868.html#gae646864933baa81ca646c96fa6f9f803" title="Get the current clock time.">RTIMER_NOW</a>();
<a name="l00157"></a>00157             watchdog_periodic();
<a name="l00158"></a>00158             <span class="keywordflow">while</span>(RTIMER_CLOCK_LT(<a class="code" href="a01868.html#gae646864933baa81ca646c96fa6f9f803" title="Get the current clock time.">RTIMER_NOW</a>(),
<a name="l00159"></a>00159                                   wt + AFTER_ACK_DETECTED_WAIT_TIME));
<a name="l00160"></a>00160 
<a name="l00161"></a>00161             <span class="keywordflow">if</span>(NETSTACK_RADIO.<a class="code" href="a00073.html#ab5fe62757c820d4bd690b8740d64e752" title="Check if the radio driver has just received a packet.">pending_packet</a>()) {
<a name="l00162"></a>00162               len = NETSTACK_RADIO.<a class="code" href="a00073.html#a622c2a8abe3336e9c53e1484c269f840" title="Read a received packet into a buffer.">read</a>(ackbuf, ACK_LEN);
<a name="l00163"></a>00163               <span class="keywordflow">if</span>(len == ACK_LEN &amp;&amp; ackbuf[2] == dsn) {
<a name="l00164"></a>00164                 <span class="comment">/* Ack received */</span>
<a name="l00165"></a>00165                 ret = <a class="code" href="a00280.html#a385c44f6fb256e5716a2302a5b940388a7289d883fcead5ad7d148f222a98381a" title="The MAC layer transmission was OK.">MAC_TX_OK</a>;
<a name="l00166"></a>00166               } <span class="keywordflow">else</span> {
<a name="l00167"></a>00167                 <span class="comment">/* Not an ack or ack not for us: collision */</span>
<a name="l00168"></a>00168                 ret = <a class="code" href="a00280.html#a385c44f6fb256e5716a2302a5b940388a5601d8ac68c1b9f5adf34b5e7f168998" title="The MAC layer did not get an acknowledgement for the packet.">MAC_TX_COLLISION</a>;
<a name="l00169"></a>00169               }
<a name="l00170"></a>00170             }
<a name="l00171"></a>00171           }
<a name="l00172"></a>00172         }
<a name="l00173"></a>00173         <span class="keywordflow">break</span>;
<a name="l00174"></a>00174       <span class="keywordflow">case</span> RADIO_TX_COLLISION:
<a name="l00175"></a>00175         ret = <a class="code" href="a00280.html#a385c44f6fb256e5716a2302a5b940388a5601d8ac68c1b9f5adf34b5e7f168998" title="The MAC layer did not get an acknowledgement for the packet.">MAC_TX_COLLISION</a>;
<a name="l00176"></a>00176         <span class="keywordflow">break</span>;
<a name="l00177"></a>00177       <span class="keywordflow">default</span>:
<a name="l00178"></a>00178         ret = <a class="code" href="a00280.html#a385c44f6fb256e5716a2302a5b940388afcf20dce5dfb0133853827c1270249d9" title="The MAC layer transmission could not be performed because of a fatal error.">MAC_TX_ERR</a>;
<a name="l00179"></a>00179         <span class="keywordflow">break</span>;
<a name="l00180"></a>00180       }
<a name="l00181"></a>00181     }
<a name="l00182"></a>00182 
<a name="l00183"></a>00183 <span class="preprocessor">#else </span><span class="comment">/* ! NULLRDC_802154_AUTOACK */</span>
<a name="l00184"></a>00184 
<a name="l00185"></a>00185     <span class="keywordflow">switch</span>(NETSTACK_RADIO.<a class="code" href="a00073.html#a8abbfdc45c060bcbfab97e7b336c7ac0" title="Prepare &amp; transmit a packet.">send</a>(<a class="code" href="a01801.html#ga67c213a97ab9bdadddd90db1df0a3058" title="Get a pointer to the header in the packetbuf, for outbound packets.">packetbuf_hdrptr</a>(), <a class="code" href="a01801.html#ga3cc486f4d4f837db11c6376bee07ebcb" title="Get the total length of the header and data in the packetbuf.">packetbuf_totlen</a>())) {
<a name="l00186"></a>00186     <span class="keywordflow">case</span> RADIO_TX_OK:
<a name="l00187"></a>00187       ret = <a class="code" href="a00280.html#a385c44f6fb256e5716a2302a5b940388a7289d883fcead5ad7d148f222a98381a" title="The MAC layer transmission was OK.">MAC_TX_OK</a>;
<a name="l00188"></a>00188       <span class="keywordflow">break</span>;
<a name="l00189"></a>00189     <span class="keywordflow">case</span> RADIO_TX_COLLISION:
<a name="l00190"></a>00190       ret = <a class="code" href="a00280.html#a385c44f6fb256e5716a2302a5b940388a5601d8ac68c1b9f5adf34b5e7f168998" title="The MAC layer did not get an acknowledgement for the packet.">MAC_TX_COLLISION</a>;
<a name="l00191"></a>00191       <span class="keywordflow">break</span>;
<a name="l00192"></a>00192     <span class="keywordflow">case</span> RADIO_TX_NOACK:
<a name="l00193"></a>00193       ret = <a class="code" href="a00280.html#a385c44f6fb256e5716a2302a5b940388a94644931ae3262ac4b8c1f8077666205" title="The MAC layer deferred the transmission for a later time.">MAC_TX_NOACK</a>;
<a name="l00194"></a>00194       <span class="keywordflow">break</span>;
<a name="l00195"></a>00195     <span class="keywordflow">default</span>:
<a name="l00196"></a>00196       ret = <a class="code" href="a00280.html#a385c44f6fb256e5716a2302a5b940388afcf20dce5dfb0133853827c1270249d9" title="The MAC layer transmission could not be performed because of a fatal error.">MAC_TX_ERR</a>;
<a name="l00197"></a>00197       <span class="keywordflow">break</span>;
<a name="l00198"></a>00198     }
<a name="l00199"></a>00199 
<a name="l00200"></a>00200 <span class="preprocessor">#endif </span><span class="comment">/* ! NULLRDC_802154_AUTOACK */</span>
<a name="l00201"></a>00201   }
<a name="l00202"></a>00202   mac_call_sent_callback(sent, ptr, ret, 1);
<a name="l00203"></a>00203 }
<a name="l00204"></a>00204 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00205"></a>00205 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00206"></a>00206 send_list(mac_callback_t sent, <span class="keywordtype">void</span> *ptr, <span class="keyword">struct</span> rdc_buf_list *buf_list)
<a name="l00207"></a>00207 {
<a name="l00208"></a>00208   <span class="keywordflow">if</span>(buf_list != <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>) {
<a name="l00209"></a>00209     queuebuf_to_packetbuf(buf_list-&gt;buf);
<a name="l00210"></a>00210     send_packet(sent, ptr);
<a name="l00211"></a>00211   }
<a name="l00212"></a>00212 }
<a name="l00213"></a>00213 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00214"></a>00214 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00215"></a>00215 packet_input(<span class="keywordtype">void</span>)
<a name="l00216"></a>00216 {
<a name="l00217"></a>00217 <span class="preprocessor">#if NULLRDC_802154_AUTOACK</span>
<a name="l00218"></a>00218 <span class="preprocessor"></span>  <span class="keywordflow">if</span>(<a class="code" href="a01801.html#ga4a1157b882c15f5ea05d64f81d37115d" title="Get the length of the data in the packetbuf.">packetbuf_datalen</a>() == ACK_LEN) {
<a name="l00219"></a>00219     <span class="comment">/* Ignore ack packets */</span>
<a name="l00220"></a>00220     <span class="comment">/* PRINTF(&quot;nullrdc: ignored ack\n&quot;); */</span>
<a name="l00221"></a>00221   } <span class="keywordflow">else</span>
<a name="l00222"></a>00222 <span class="preprocessor">#endif </span><span class="comment">/* NULLRDC_802154_AUTOACK */</span>
<a name="l00223"></a>00223   <span class="keywordflow">if</span>(NETSTACK_FRAMER.parse() &lt; 0) {
<a name="l00224"></a>00224     PRINTF(<span class="stringliteral">&quot;nullrdc: failed to parse %u\n&quot;</span>, <a class="code" href="a01801.html#ga4a1157b882c15f5ea05d64f81d37115d" title="Get the length of the data in the packetbuf.">packetbuf_datalen</a>());
<a name="l00225"></a>00225 <span class="preprocessor">#if NULLRDC_ADDRESS_FILTER</span>
<a name="l00226"></a>00226 <span class="preprocessor"></span>  } <span class="keywordflow">else</span> <span class="keywordflow">if</span>(!<a class="code" href="a01845.html#gaed118d3d8fe7e7ac9d6d00988268357e" title="Compare two Rime addresses.">rimeaddr_cmp</a>(packetbuf_addr(PACKETBUF_ADDR_RECEIVER),
<a name="l00227"></a>00227                                          &amp;<a class="code" href="a01845.html#gaade5a80096fb3b4296cf89eeaca3087d" title="The Rime address of the node.">rimeaddr_node_addr</a>) &amp;&amp;
<a name="l00228"></a>00228             !<a class="code" href="a01845.html#gaed118d3d8fe7e7ac9d6d00988268357e" title="Compare two Rime addresses.">rimeaddr_cmp</a>(packetbuf_addr(PACKETBUF_ADDR_RECEIVER),
<a name="l00229"></a>00229                           &amp;<a class="code" href="a01845.html#gaa96ae7849482147440e77751444faa6d" title="The null Rime address.">rimeaddr_null</a>)) {
<a name="l00230"></a>00230     PRINTF(<span class="stringliteral">&quot;nullrdc: not for us\n&quot;</span>);
<a name="l00231"></a>00231 <span class="preprocessor">#endif </span><span class="comment">/* NULLRDC_ADDRESS_FILTER */</span>
<a name="l00232"></a>00232   } <span class="keywordflow">else</span> {
<a name="l00233"></a>00233 <span class="preprocessor">#if NULLRDC_802154_AUTOACK || NULLRDC_802154_AUTOACK_HW</span>
<a name="l00234"></a>00234 <span class="preprocessor"></span>    <span class="comment">/* Check for duplicate packet by comparing the sequence number</span>
<a name="l00235"></a>00235 <span class="comment">       of the incoming packet with the last few ones we saw. */</span>
<a name="l00236"></a>00236     <span class="keywordtype">int</span> i;
<a name="l00237"></a>00237     <span class="keywordflow">for</span>(i = 0; i &lt; MAX_SEQNOS; ++i) {
<a name="l00238"></a>00238       <span class="keywordflow">if</span>(packetbuf_attr(PACKETBUF_ATTR_PACKET_ID) == received_seqnos[i].seqno &amp;&amp;
<a name="l00239"></a>00239          <a class="code" href="a01845.html#gaed118d3d8fe7e7ac9d6d00988268357e" title="Compare two Rime addresses.">rimeaddr_cmp</a>(packetbuf_addr(PACKETBUF_ADDR_SENDER),
<a name="l00240"></a>00240                       &amp;received_seqnos[i].sender)) {
<a name="l00241"></a>00241         <span class="comment">/* Drop the packet. */</span>
<a name="l00242"></a>00242         PRINTF(<span class="stringliteral">&quot;nullrdc: drop duplicate link layer packet %u\n&quot;</span>,
<a name="l00243"></a>00243                packetbuf_attr(PACKETBUF_ATTR_PACKET_ID));
<a name="l00244"></a>00244         <span class="keywordflow">return</span>;
<a name="l00245"></a>00245       }
<a name="l00246"></a>00246     }
<a name="l00247"></a>00247     <span class="keywordflow">for</span>(i = MAX_SEQNOS - 1; i &gt; 0; --i) {
<a name="l00248"></a>00248       memcpy(&amp;received_seqnos[i], &amp;received_seqnos[i - 1],
<a name="l00249"></a>00249              <span class="keyword">sizeof</span>(<span class="keyword">struct</span> seqno));
<a name="l00250"></a>00250     }
<a name="l00251"></a>00251     received_seqnos[0].seqno = packetbuf_attr(PACKETBUF_ATTR_PACKET_ID);
<a name="l00252"></a>00252     <a class="code" href="a01845.html#gacd6a22e93c7a4eb02d901743c958c2b2" title="Copy a Rime address.">rimeaddr_copy</a>(&amp;received_seqnos[0].sender,
<a name="l00253"></a>00253                   packetbuf_addr(PACKETBUF_ADDR_SENDER));
<a name="l00254"></a>00254 <span class="preprocessor">#endif </span><span class="comment">/* NULLRDC_802154_AUTOACK */</span>
<a name="l00255"></a>00255     NETSTACK_MAC.<a class="code" href="a00061.html#a3c226f6fb881422aee821c0288cdf651" title="Callback for getting notified of incoming packet.">input</a>();
<a name="l00256"></a>00256   }
<a name="l00257"></a>00257 }
<a name="l00258"></a>00258 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00259"></a>00259 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00260"></a>00260 on(<span class="keywordtype">void</span>)
<a name="l00261"></a>00261 {
<a name="l00262"></a>00262   <span class="keywordflow">return</span> NETSTACK_RADIO.<a class="code" href="a00073.html#a6b7a262e6494e3233e5d5c45bdfc6881" title="Turn the radio on.">on</a>();
<a name="l00263"></a>00263 }
<a name="l00264"></a>00264 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00265"></a>00265 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00266"></a>00266 off(<span class="keywordtype">int</span> keep_radio_on)
<a name="l00267"></a>00267 {
<a name="l00268"></a>00268   <span class="keywordflow">if</span>(keep_radio_on) {
<a name="l00269"></a>00269     <span class="keywordflow">return</span> NETSTACK_RADIO.<a class="code" href="a00073.html#a6b7a262e6494e3233e5d5c45bdfc6881" title="Turn the radio on.">on</a>();
<a name="l00270"></a>00270   } <span class="keywordflow">else</span> {
<a name="l00271"></a>00271     <span class="keywordflow">return</span> NETSTACK_RADIO.<a class="code" href="a00073.html#aa6b6203cb6aef79945e689dde54a5008" title="Turn the radio off.">off</a>();
<a name="l00272"></a>00272   }
<a name="l00273"></a>00273 }
<a name="l00274"></a>00274 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00275"></a>00275 <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span>
<a name="l00276"></a>00276 channel_check_interval(<span class="keywordtype">void</span>)
<a name="l00277"></a>00277 {
<a name="l00278"></a>00278   <span class="keywordflow">return</span> 0;
<a name="l00279"></a>00279 }
<a name="l00280"></a>00280 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00281"></a>00281 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00282"></a>00282 init(<span class="keywordtype">void</span>)
<a name="l00283"></a>00283 {
<a name="l00284"></a>00284   on();
<a name="l00285"></a>00285 }
<a name="l00286"></a>00286 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00287"></a>00287 <span class="keyword">const</span> <span class="keyword">struct </span><a class="code" href="a00074.html" title="The structure of a RDC (radio duty cycling) driver in Contiki.">rdc_driver</a> nullrdc_driver = {
<a name="l00288"></a>00288   <span class="stringliteral">&quot;nullrdc&quot;</span>,
<a name="l00289"></a>00289   <a class="code" href="a00074.html#a9f0a8093092a78b1fd1f0ae00c595ece" title="Initialize the RDC driver.">init</a>,
<a name="l00290"></a>00290   send_packet,
<a name="l00291"></a>00291   <a class="code" href="a00074.html#a6a206764c17c4037609772a363c12513" title="Send a packet list.">send_list</a>,
<a name="l00292"></a>00292   packet_input,
<a name="l00293"></a>00293   <a class="code" href="a00074.html#a5663cc6ea1b4620bc05064b15106324d" title="Turn the MAC layer on.">on</a>,
<a name="l00294"></a>00294   <a class="code" href="a00074.html#a20229fb8ca925cdb520a7d41b27e8396" title="Turn the MAC layer off.">off</a>,
<a name="l00295"></a>00295   <a class="code" href="a00074.html#ad23ce4d601bb33cdcab875647f7cd093" title="Returns the channel check interval, expressed in clock_time_t ticks.">channel_check_interval</a>,
<a name="l00296"></a>00296 };
<a name="l00297"></a>00297 <span class="comment">/*---------------------------------------------------------------------------*/</span>
</pre></div></div><!-- contents -->


<hr class="footer"/><address class="footer"><small>
Generated on Sun Jan 13 2013 10:57:23 for Contiki 2.6 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.7.6.1
</small></address>

</body>
</html>
