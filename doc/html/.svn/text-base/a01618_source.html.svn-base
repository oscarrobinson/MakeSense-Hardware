<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>Contiki 2.6: platform/sensinode/contiki-sensinode-main.c Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />



</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">Contiki 2.6
   
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.html"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.html"><span>Modules</span></a></li>
      <li><a href="annotated.html"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li><a href="dirs.html"><span>Directories</span></a></li>
      <li><a href="examples.html"><span>Examples</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>Globals</span></a></li>
    </ul>
  </div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="dir_da81161b528b307837d2c2604d1aafcb.html">platform</a>      </li>
      <li class="navelem"><a class="el" href="dir_9f7c3ae195d7387d42137819fe980698.html">sensinode</a>      </li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">contiki-sensinode-main.c</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="preprocessor">#include &quot;contiki.h&quot;</span>
<a name="l00002"></a>00002 <span class="preprocessor">#include &quot;sys/clock.h&quot;</span>
<a name="l00003"></a>00003 <span class="preprocessor">#include &quot;<a class="code" href="a00446.html" title="Header file for module for automatically starting and exiting a list of processes.">sys/autostart.h</a>&quot;</span>
<a name="l00004"></a>00004 
<a name="l00005"></a>00005 <span class="preprocessor">#include &quot;<a class="code" href="a00177.html" title="Generic serial I/O process header filer.">dev/serial-line.h</a>&quot;</span>
<a name="l00006"></a>00006 <span class="preprocessor">#include &quot;dev/slip.h&quot;</span>
<a name="l00007"></a>00007 <span class="preprocessor">#include &quot;<a class="code" href="a00783.html" title="A brief description of what this file is.">dev/bus.h</a>&quot;</span>
<a name="l00008"></a>00008 <span class="preprocessor">#include &quot;dev/leds.h&quot;</span>
<a name="l00009"></a>00009 <span class="preprocessor">#include &quot;dev/uart1.h&quot;</span>
<a name="l00010"></a>00010 <span class="preprocessor">#include &quot;dev/dma.h&quot;</span>
<a name="l00011"></a>00011 <span class="preprocessor">#include &quot;dev/models.h&quot;</span>
<a name="l00012"></a>00012 <span class="preprocessor">#include &quot;<a class="code" href="a00785.html" title="CC2430 RF driver header file.">dev/cc2430_rf.h</a>&quot;</span>
<a name="l00013"></a>00013 <span class="preprocessor">#include &quot;dev/watchdog.h&quot;</span>
<a name="l00014"></a>00014 <span class="preprocessor">#include &quot;dev/lpm.h&quot;</span>
<a name="l00015"></a>00015 <span class="preprocessor">#include &quot;<a class="code" href="a00317.html" title="Header file for the Rime stack.">net/rime.h</a>&quot;</span>
<a name="l00016"></a>00016 <span class="preprocessor">#include &quot;<a class="code" href="a00303.html" title="Include file for the Contiki low-layer network stack (NETSTACK)">net/netstack.h</a>&quot;</span>
<a name="l00017"></a>00017 <span class="preprocessor">#include &quot;<a class="code" href="a00270.html" title="802.15.4 frame creation and parsing functions">net/mac/frame802154.h</a>&quot;</span>
<a name="l00018"></a>00018 <span class="preprocessor">#include &quot;<a class="code" href="a00685.html" title="Header file for debugging functions used by the sensinode port.">debug.h</a>&quot;</span>
<a name="l00019"></a>00019 <span class="preprocessor">#include &quot;<a class="code" href="a00797.html" title="Hardware-dependent header file for the cc2430 watchdog timer.">dev/watchdog-cc2430.h</a>&quot;</span>
<a name="l00020"></a>00020 <span class="preprocessor">#include &quot;<a class="code" href="a01629.html" title="Defines for the sensors on the various Sensinode models.">dev/sensinode-sensors.h</a>&quot;</span>
<a name="l00021"></a>00021 <span class="preprocessor">#include &quot;<a class="code" href="a01633.html" title="Header file for the Disco server (embedded part of the DISCOBALL project)">disco.h</a>&quot;</span>
<a name="l00022"></a>00022 <span class="preprocessor">#include &quot;contiki-lib.h&quot;</span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &quot;contiki-net.h&quot;</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> node_id = 0;                     <span class="comment">/* Manually sets MAC address when &gt; 0 */</span>
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 <span class="preprocessor">#if VIZTOOL_CONF_ON</span>
<a name="l00028"></a>00028 <span class="preprocessor"></span><a class="code" href="a01866.html#ga96ff784b76d6edef302610d69664025f" title="Declare the name of a process.">PROCESS_NAME</a>(viztool_process);
<a name="l00029"></a>00029 <span class="preprocessor">#endif</span>
<a name="l00030"></a>00030 <span class="preprocessor"></span>
<a name="l00031"></a>00031 <span class="preprocessor">#if BATMON_CONF_ON</span>
<a name="l00032"></a>00032 <span class="preprocessor"></span><a class="code" href="a01866.html#ga96ff784b76d6edef302610d69664025f" title="Declare the name of a process.">PROCESS_NAME</a>(batmon_process);
<a name="l00033"></a>00033 <span class="preprocessor">#endif</span>
<a name="l00034"></a>00034 <span class="preprocessor"></span>
<a name="l00035"></a>00035 <span class="preprocessor">#if NETSTACK_CONF_SHORTCUTS</span>
<a name="l00036"></a>00036 <span class="preprocessor"></span><span class="keyword">static</span> __data <span class="keywordtype">int</span> len;
<a name="l00037"></a>00037 <span class="preprocessor">#endif</span>
<a name="l00038"></a>00038 <span class="preprocessor"></span>
<a name="l00039"></a>00039 <span class="preprocessor">#ifdef STARTUP_CONF_VERBOSE</span>
<a name="l00040"></a>00040 <span class="preprocessor"></span><span class="preprocessor">#define STARTUP_VERBOSE STARTUP_CONF_VERBOSE</span>
<a name="l00041"></a>00041 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00042"></a>00042 <span class="preprocessor"></span><span class="preprocessor">#define STARTUP_VERBOSE 0</span>
<a name="l00043"></a>00043 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00044"></a>00044 <span class="preprocessor"></span>
<a name="l00045"></a>00045 <span class="preprocessor">#if STARTUP_VERBOSE</span>
<a name="l00046"></a>00046 <span class="preprocessor"></span><span class="preprocessor">#define PUTSTRING(...) putstring(__VA_ARGS__)</span>
<a name="l00047"></a>00047 <span class="preprocessor"></span><span class="preprocessor">#define PUTHEX(...) puthex(__VA_ARGS__)</span>
<a name="l00048"></a>00048 <span class="preprocessor"></span><span class="preprocessor">#define PUTBIN(...) putbin(__VA_ARGS__)</span>
<a name="l00049"></a>00049 <span class="preprocessor"></span><span class="preprocessor">#define PUTCHAR(...) putchar(__VA_ARGS__)</span>
<a name="l00050"></a>00050 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00051"></a>00051 <span class="preprocessor"></span><span class="preprocessor">#define PUTSTRING(...) do {} while(0)</span>
<a name="l00052"></a>00052 <span class="preprocessor"></span><span class="preprocessor">#define PUTHEX(...) do {} while(0)</span>
<a name="l00053"></a>00053 <span class="preprocessor"></span><span class="preprocessor">#define PUTBIN(...) do {} while(0)</span>
<a name="l00054"></a>00054 <span class="preprocessor"></span><span class="preprocessor">#define PUTCHAR(...) do {} while(0)</span>
<a name="l00055"></a>00055 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00056"></a>00056 <span class="preprocessor"></span>
<a name="l00057"></a>00057 <span class="preprocessor">#if CLOCK_CONF_STACK_FRIENDLY</span>
<a name="l00058"></a>00058 <span class="preprocessor"></span><span class="keyword">extern</span> <span class="keyword">volatile</span> __bit sleep_flag;
<a name="l00059"></a>00059 <span class="preprocessor">#endif</span>
<a name="l00060"></a>00060 <span class="preprocessor"></span>
<a name="l00061"></a>00061 <span class="keyword">extern</span> rimeaddr_t <a class="code" href="a01845.html#gaade5a80096fb3b4296cf89eeaca3087d" title="The Rime address of the node.">rimeaddr_node_addr</a>;
<a name="l00062"></a>00062 <span class="keyword">static</span> __data <span class="keywordtype">int</span> r;
<a name="l00063"></a>00063 <span class="preprocessor">#if ENERGEST_CONF_ON</span>
<a name="l00064"></a>00064 <span class="preprocessor"></span><span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> irq_energest = 0;
<a name="l00065"></a>00065 <span class="preprocessor">#define ENERGEST_IRQ_SAVE(a) do { \</span>
<a name="l00066"></a>00066 <span class="preprocessor">    a = energest_type_time(ENERGEST_TYPE_IRQ); } while(0)</span>
<a name="l00067"></a>00067 <span class="preprocessor"></span><span class="preprocessor">#define ENERGEST_IRQ_RESTORE(a) do { \</span>
<a name="l00068"></a>00068 <span class="preprocessor">    energest_type_set(ENERGEST_TYPE_IRQ, a); } while(0)</span>
<a name="l00069"></a>00069 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00070"></a>00070 <span class="preprocessor"></span><span class="preprocessor">#define ENERGEST_IRQ_SAVE(a) do {} while(0)</span>
<a name="l00071"></a>00071 <span class="preprocessor"></span><span class="preprocessor">#define ENERGEST_IRQ_RESTORE(a) do {} while(0)</span>
<a name="l00072"></a>00072 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00073"></a>00073 <span class="preprocessor"></span><span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00074"></a>00074 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00075"></a>00075 fade(<span class="keywordtype">int</span> l) CC_NON_BANKED
<a name="l00076"></a>00076 {
<a name="l00077"></a>00077   <span class="keyword">volatile</span> <span class="keywordtype">int</span> i, a;
<a name="l00078"></a>00078   <span class="keywordtype">int</span> k, j;
<a name="l00079"></a>00079   <span class="keywordflow">for</span>(k = 0; k &lt; 400; ++k) {
<a name="l00080"></a>00080     j = k &gt; 200? 400 - k: k;
<a name="l00081"></a>00081 
<a name="l00082"></a>00082     leds_on(l);
<a name="l00083"></a>00083     <span class="keywordflow">for</span>(i = 0; i &lt; j; ++i) {
<a name="l00084"></a>00084       a = i;
<a name="l00085"></a>00085     }
<a name="l00086"></a>00086     leds_off(l);
<a name="l00087"></a>00087     <span class="keywordflow">for</span>(i = 0; i &lt; 200 - j; ++i) {
<a name="l00088"></a>00088       a = i;
<a name="l00089"></a>00089     }
<a name="l00090"></a>00090   }
<a name="l00091"></a>00091 }
<a name="l00092"></a>00092 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00093"></a>00093 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00094"></a>00094 set_rime_addr(<span class="keywordtype">void</span>) CC_NON_BANKED
<a name="l00095"></a>00095 {
<a name="l00096"></a>00096   uint8_t *addr_long = <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>;
<a name="l00097"></a>00097   uint16_t addr_short = 0;
<a name="l00098"></a>00098   <span class="keywordtype">char</span> i;
<a name="l00099"></a>00099   __code <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> * macp;
<a name="l00100"></a>00100 
<a name="l00101"></a>00101   PUTSTRING(<span class="stringliteral">&quot;Rime is 0x&quot;</span>);
<a name="l00102"></a>00102   PUTHEX(<span class="keyword">sizeof</span>(rimeaddr_t));
<a name="l00103"></a>00103   PUTSTRING(<span class="stringliteral">&quot; bytes long\n&quot;</span>);
<a name="l00104"></a>00104 
<a name="l00105"></a>00105   <span class="keywordflow">if</span>(node_id == 0) {
<a name="l00106"></a>00106     PUTSTRING(<span class="stringliteral">&quot;Reading MAC from flash\n&quot;</span>);
<a name="l00107"></a>00107     <span class="comment">/*</span>
<a name="l00108"></a>00108 <span class="comment">     * The MAC is always stored in 0x1FFF8 of our flash. This maps to address</span>
<a name="l00109"></a>00109 <span class="comment">     * 0xFFF8 of our CODE segment, when BANK3 is selected.</span>
<a name="l00110"></a>00110 <span class="comment">     * Switch to BANK3, read 8 bytes starting at 0xFFF8 and restore last BANK</span>
<a name="l00111"></a>00111 <span class="comment">     * Since we are called from main(), this MUST be BANK1 or something is very</span>
<a name="l00112"></a>00112 <span class="comment">     * wrong. This code can be used even without banking</span>
<a name="l00113"></a>00113 <span class="comment">     */</span>
<a name="l00114"></a>00114 
<a name="l00115"></a>00115     <span class="comment">/* Don&#39;t interrupt us to make sure no BANK switching happens while working */</span>
<a name="l00116"></a>00116     <a class="code" href="a01960.html#gac136489c5ba4794566532004267967f8" title="Disable interrupts, saving the previous state so it can be later restored with RESTORE_INTERRUPTS().">DISABLE_INTERRUPTS</a>();
<a name="l00117"></a>00117 
<a name="l00118"></a>00118     <span class="comment">/* Switch to BANK3, map CODE: 0x8000 - 0xFFFF to FLASH: 0x18000 - 0x1FFFF */</span>
<a name="l00119"></a>00119     FMAP = 3;
<a name="l00120"></a>00120 
<a name="l00121"></a>00121     <span class="comment">/* Set our pointer to the correct address and fetch 8 bytes of MAC */</span>
<a name="l00122"></a>00122     macp = (__code <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *) 0xFFF8;
<a name="l00123"></a>00123 
<a name="l00124"></a>00124     <span class="keywordflow">for</span>(i = (RIMEADDR_SIZE - 1); i &gt;= 0; --i) {
<a name="l00125"></a>00125       <a class="code" href="a01845.html#gaade5a80096fb3b4296cf89eeaca3087d" title="The Rime address of the node.">rimeaddr_node_addr</a>.u8[i] = *macp;
<a name="l00126"></a>00126       macp++;
<a name="l00127"></a>00127     }
<a name="l00128"></a>00128 
<a name="l00129"></a>00129     <span class="comment">/* Remap 0x8000 - 0xFFFF to BANK1 */</span>
<a name="l00130"></a>00130     FMAP = 1;
<a name="l00131"></a>00131     ENABLE_INTERRUPTS();
<a name="l00132"></a>00132 
<a name="l00133"></a>00133   } <span class="keywordflow">else</span> {
<a name="l00134"></a>00134     PUTSTRING(<span class="stringliteral">&quot;Setting manual address from node_id\n&quot;</span>);
<a name="l00135"></a>00135     <a class="code" href="a01845.html#gaade5a80096fb3b4296cf89eeaca3087d" title="The Rime address of the node.">rimeaddr_node_addr</a>.u8[RIMEADDR_SIZE - 1] = node_id &gt;&gt; 8;
<a name="l00136"></a>00136     <a class="code" href="a01845.html#gaade5a80096fb3b4296cf89eeaca3087d" title="The Rime address of the node.">rimeaddr_node_addr</a>.u8[RIMEADDR_SIZE - 2] = node_id &amp; 0xff;
<a name="l00137"></a>00137   }
<a name="l00138"></a>00138 
<a name="l00139"></a>00139   <span class="comment">/* Now the address is stored MSB first */</span>
<a name="l00140"></a>00140 <span class="preprocessor">#if STARTUP_VERBOSE</span>
<a name="l00141"></a>00141 <span class="preprocessor"></span>  PUTSTRING(<span class="stringliteral">&quot;Rime configured with address &quot;</span>);
<a name="l00142"></a>00142   <span class="keywordflow">for</span>(i = 0; i &lt; RIMEADDR_SIZE - 1; i++) {
<a name="l00143"></a>00143     PUTHEX(<a class="code" href="a01845.html#gaade5a80096fb3b4296cf89eeaca3087d" title="The Rime address of the node.">rimeaddr_node_addr</a>.u8[i]);
<a name="l00144"></a>00144     PUTCHAR(<span class="charliteral">&#39;:&#39;</span>);
<a name="l00145"></a>00145   }
<a name="l00146"></a>00146   PUTHEX(<a class="code" href="a01845.html#gaade5a80096fb3b4296cf89eeaca3087d" title="The Rime address of the node.">rimeaddr_node_addr</a>.u8[i]);
<a name="l00147"></a>00147   PUTCHAR(<span class="charliteral">&#39;\n&#39;</span>);
<a name="l00148"></a>00148 <span class="preprocessor">#endif</span>
<a name="l00149"></a>00149 <span class="preprocessor"></span>
<a name="l00150"></a>00150   <span class="comment">/* Set the cc2430 RF addresses */</span>
<a name="l00151"></a>00151 <span class="preprocessor">#if (RIMEADDR_SIZE==8)</span>
<a name="l00152"></a>00152 <span class="preprocessor"></span>  addr_short = (<a class="code" href="a01845.html#gaade5a80096fb3b4296cf89eeaca3087d" title="The Rime address of the node.">rimeaddr_node_addr</a>.u8[6] * 256) + <a class="code" href="a01845.html#gaade5a80096fb3b4296cf89eeaca3087d" title="The Rime address of the node.">rimeaddr_node_addr</a>.u8[7];
<a name="l00153"></a>00153   addr_long = (uint8_t *) &amp;<a class="code" href="a01845.html#gaade5a80096fb3b4296cf89eeaca3087d" title="The Rime address of the node.">rimeaddr_node_addr</a>;
<a name="l00154"></a>00154 <span class="preprocessor">#else</span>
<a name="l00155"></a>00155 <span class="preprocessor"></span>  addr_short = (<a class="code" href="a01845.html#gaade5a80096fb3b4296cf89eeaca3087d" title="The Rime address of the node.">rimeaddr_node_addr</a>.u8[0] * 256) + <a class="code" href="a01845.html#gaade5a80096fb3b4296cf89eeaca3087d" title="The Rime address of the node.">rimeaddr_node_addr</a>.u8[1];
<a name="l00156"></a>00156 #endif
<a name="l00157"></a>00157   <a class="code" href="a00784.html#a0c2084333b4494b8611302cbd805fa07" title="Set MAC addresses.">cc2430_rf_set_addr</a>(IEEE802154_PANID, addr_short, addr_long);
<a name="l00158"></a>00158 }
<a name="l00159"></a>00159 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00160"></a>00160 <span class="keywordtype">int</span>
<a name="l00161"></a>00161 <a class="code" href="a01924.html#ga840291bc02cba5474a4cb46a9b9566fe" title="This is main...">main</a>(<span class="keywordtype">void</span>)
<a name="l00162"></a>00162 {
<a name="l00163"></a>00163 
<a name="l00164"></a>00164   <span class="comment">/* Hardware initialization */</span>
<a name="l00165"></a>00165   bus_init();
<a name="l00166"></a>00166   <a class="code" href="a01868.html#ga655b7809b449b92eb2579db5f5c10e78" title="Initialize the real-time scheduler.">rtimer_init</a>();
<a name="l00167"></a>00167 
<a name="l00168"></a>00168   <span class="comment">/* model-specific h/w init. */</span>
<a name="l00169"></a>00169   model_init();
<a name="l00170"></a>00170 
<a name="l00171"></a>00171   <span class="comment">/* Init LEDs here */</span>
<a name="l00172"></a>00172   leds_init();
<a name="l00173"></a>00173   fade(LEDS_GREEN);
<a name="l00174"></a>00174 
<a name="l00175"></a>00175   <span class="comment">/* initialize process manager. */</span>
<a name="l00176"></a>00176   <a class="code" href="a01866.html#gaab238b68c176e90138159f41af9133f1" title="Initialize the process module.">process_init</a>();
<a name="l00177"></a>00177 
<a name="l00178"></a>00178   <span class="comment">/* Init UART1 */</span>
<a name="l00179"></a>00179   <a class="code" href="a00937.html#a63263e531162ee62179b3f0c9915b8a3" title="Initalize the RS232 port.">uart1_init</a>();
<a name="l00180"></a>00180 
<a name="l00181"></a>00181 <span class="preprocessor">#if DMA_ON</span>
<a name="l00182"></a>00182 <span class="preprocessor"></span>  dma_init();
<a name="l00183"></a>00183 <span class="preprocessor">#endif</span>
<a name="l00184"></a>00184 <span class="preprocessor"></span>
<a name="l00185"></a>00185 <span class="preprocessor">#if SLIP_ARCH_CONF_ENABLE</span>
<a name="l00186"></a>00186 <span class="preprocessor"></span>  <span class="comment">/* On cc2430, the argument is not used */</span>
<a name="l00187"></a>00187   <a class="code" href="a00777.html#a9968f75d6fd206d47a813fdda9b687bc" title="Initalize the RS232 port and the SLIP driver.">slip_arch_init</a>(0);
<a name="l00188"></a>00188 <span class="preprocessor">#else</span>
<a name="l00189"></a>00189 <span class="preprocessor"></span>  uart1_set_input(serial_line_input_byte);
<a name="l00190"></a>00190   serial_line_init();
<a name="l00191"></a>00191 <span class="preprocessor">#endif</span>
<a name="l00192"></a>00192 <span class="preprocessor"></span>
<a name="l00193"></a>00193   PUTSTRING(<span class="stringliteral">&quot;##########################################\n&quot;</span>);
<a name="l00194"></a>00194   putstring(CONTIKI_VERSION_STRING <span class="stringliteral">&quot;\n&quot;</span>);
<a name="l00195"></a>00195   putstring(SENSINODE_MODEL <span class="stringliteral">&quot; (CC24&quot;</span>);
<a name="l00196"></a>00196   puthex(((CHIPID &gt;&gt; 3) | 0x20));
<a name="l00197"></a>00197   putstring(<span class="stringliteral">&quot;-&quot;</span> FLASH_SIZE <span class="stringliteral">&quot;)\n&quot;</span>);
<a name="l00198"></a>00198 
<a name="l00199"></a>00199 <span class="preprocessor">#if STARTUP_VERBOSE</span>
<a name="l00200"></a>00200 <span class="preprocessor"></span><span class="preprocessor">#ifdef HAVE_SDCC_BANKING</span>
<a name="l00201"></a>00201 <span class="preprocessor"></span>  PUTSTRING(<span class="stringliteral">&quot;  With Banking.\n&quot;</span>);
<a name="l00202"></a>00202 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_SDCC_BANKING */</span>
<a name="l00203"></a>00203 <span class="preprocessor">#ifdef SDCC_MODEL_LARGE</span>
<a name="l00204"></a>00204 <span class="preprocessor"></span>  PUTSTRING(<span class="stringliteral">&quot;  --model-large\n&quot;</span>);
<a name="l00205"></a>00205 <span class="preprocessor">#endif </span><span class="comment">/* SDCC_MODEL_LARGE */</span>
<a name="l00206"></a>00206 <span class="preprocessor">#ifdef SDCC_MODEL_HUGE</span>
<a name="l00207"></a>00207 <span class="preprocessor"></span>  PUTSTRING(<span class="stringliteral">&quot;  --model-huge\n&quot;</span>);
<a name="l00208"></a>00208 <span class="preprocessor">#endif </span><span class="comment">/* SDCC_MODEL_HUGE */</span>
<a name="l00209"></a>00209 <span class="preprocessor">#ifdef SDCC_STACK_AUTO</span>
<a name="l00210"></a>00210 <span class="preprocessor"></span>  PUTSTRING(<span class="stringliteral">&quot;  --stack-auto\n&quot;</span>);
<a name="l00211"></a>00211 <span class="preprocessor">#endif </span><span class="comment">/* SDCC_STACK_AUTO */</span>
<a name="l00212"></a>00212 
<a name="l00213"></a>00213   PUTCHAR(<span class="charliteral">&#39;\n&#39;</span>);
<a name="l00214"></a>00214 
<a name="l00215"></a>00215   PUTSTRING(<span class="stringliteral">&quot; Net: &quot;</span>);
<a name="l00216"></a>00216   PUTSTRING(NETSTACK_NETWORK.name);
<a name="l00217"></a>00217   PUTCHAR(<span class="charliteral">&#39;\n&#39;</span>);
<a name="l00218"></a>00218   PUTSTRING(<span class="stringliteral">&quot; MAC: &quot;</span>);
<a name="l00219"></a>00219   PUTSTRING(NETSTACK_MAC.name);
<a name="l00220"></a>00220   PUTCHAR(<span class="charliteral">&#39;\n&#39;</span>);
<a name="l00221"></a>00221   PUTSTRING(<span class="stringliteral">&quot; RDC: &quot;</span>);
<a name="l00222"></a>00222   PUTSTRING(NETSTACK_RDC.name);
<a name="l00223"></a>00223   PUTCHAR(<span class="charliteral">&#39;\n&#39;</span>);
<a name="l00224"></a>00224 
<a name="l00225"></a>00225   PUTSTRING(<span class="stringliteral">&quot;##########################################\n&quot;</span>);
<a name="l00226"></a>00226 <span class="preprocessor">#endif</span>
<a name="l00227"></a>00227 <span class="preprocessor"></span>
<a name="l00228"></a>00228   watchdog_init();
<a name="l00229"></a>00229 
<a name="l00230"></a>00230   <span class="comment">/* Initialise the cc2430 RNG engine. */</span>
<a name="l00231"></a>00231   <a class="code" href="a00223.html#a1450c78dbb54fb9f7ae681908eace9d5" title="Seed the cc2430 random number generator.">random_init</a>(0);
<a name="l00232"></a>00232 
<a name="l00233"></a>00233   <span class="comment">/* start services */</span>
<a name="l00234"></a>00234   <a class="code" href="a01866.html#ga1ecfc797b48072142b3e22ac1f0bbfdd" title="Start a process.">process_start</a>(&amp;etimer_process, <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>);
<a name="l00235"></a>00235   <a class="code" href="a01861.html#ga0b183fdc4a1b4be0630a29dfe4fbf3a2" title="Initialize the callback timer library.">ctimer_init</a>();
<a name="l00236"></a>00236 
<a name="l00237"></a>00237   <span class="comment">/* initialize the netstack */</span>
<a name="l00238"></a>00238   netstack_init();
<a name="l00239"></a>00239   set_rime_addr();
<a name="l00240"></a>00240 
<a name="l00241"></a>00241 <span class="preprocessor">#if BUTTON_SENSOR_ON || ADC_SENSOR_ON</span>
<a name="l00242"></a>00242 <span class="preprocessor"></span>  <a class="code" href="a01866.html#ga1ecfc797b48072142b3e22ac1f0bbfdd" title="Start a process.">process_start</a>(&amp;sensors_process, <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>);
<a name="l00243"></a>00243   sensinode_sensors_activate();
<a name="l00244"></a>00244 <span class="preprocessor">#endif</span>
<a name="l00245"></a>00245 <span class="preprocessor"></span>
<a name="l00246"></a>00246 <span class="preprocessor">#if UIP_CONF_IPV6</span>
<a name="l00247"></a>00247 <span class="preprocessor"></span>  memcpy(&amp;<a class="code" href="a01926.html#ga89bf167a9f1014d2d78754742eb7e06d" title="Host L2 address.">uip_lladdr</a>.addr, &amp;<a class="code" href="a01845.html#gaade5a80096fb3b4296cf89eeaca3087d" title="The Rime address of the node.">rimeaddr_node_addr</a>, <span class="keyword">sizeof</span>(<a class="code" href="a01926.html#ga89bf167a9f1014d2d78754742eb7e06d" title="Host L2 address.">uip_lladdr</a>.addr));
<a name="l00248"></a>00248   queuebuf_init();
<a name="l00249"></a>00249   <a class="code" href="a01866.html#ga1ecfc797b48072142b3e22ac1f0bbfdd" title="Start a process.">process_start</a>(&amp;tcpip_process, <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>);
<a name="l00250"></a>00250 
<a name="l00251"></a>00251 <span class="preprocessor">#if DISCO_ENABLED</span>
<a name="l00252"></a>00252 <span class="preprocessor"></span>  <a class="code" href="a01866.html#ga1ecfc797b48072142b3e22ac1f0bbfdd" title="Start a process.">process_start</a>(&amp;disco_process, <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>);
<a name="l00253"></a>00253 <span class="preprocessor">#endif </span><span class="comment">/* DISCO_ENABLED */</span>
<a name="l00254"></a>00254 
<a name="l00255"></a>00255 <span class="preprocessor">#if VIZTOOL_CONF_ON</span>
<a name="l00256"></a>00256 <span class="preprocessor"></span>  <a class="code" href="a01866.html#ga1ecfc797b48072142b3e22ac1f0bbfdd" title="Start a process.">process_start</a>(&amp;viztool_process, <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>);
<a name="l00257"></a>00257 <span class="preprocessor">#endif</span>
<a name="l00258"></a>00258 <span class="preprocessor"></span>
<a name="l00259"></a>00259 <span class="preprocessor">#if (!UIP_CONF_IPV6_RPL)</span>
<a name="l00260"></a>00260 <span class="preprocessor"></span>  {
<a name="l00261"></a>00261     <a class="code" href="a00112.html" title="Representation of an IP address.">uip_ipaddr_t</a> ipaddr;
<a name="l00262"></a>00262 
<a name="l00263"></a>00263     <a class="code" href="a01815.html#ga53fbda0e8c31d4882294c8dc3cb5f487" title="Construct an IPv6 address from eight 16-bit words.">uip_ip6addr</a>(&amp;ipaddr, 0x2001, 0x630, 0x301, 0x6453, 0, 0, 0, 0);
<a name="l00264"></a>00264     <a class="code" href="a01929.html#gabbe961bbeaea80289fddf448a542fea9" title="set the last 64 bits of an IP address based on the MAC address">uip_ds6_set_addr_iid</a>(&amp;ipaddr, &amp;<a class="code" href="a01926.html#ga89bf167a9f1014d2d78754742eb7e06d" title="Host L2 address.">uip_lladdr</a>);
<a name="l00265"></a>00265     <a class="code" href="a01929.html#ga801390b5dced9a4601cc1c4f9baa08be">uip_ds6_addr_add</a>(&amp;ipaddr, 0, <a class="code" href="a01929.html#gae64653a0bf71369f18219aa494e362d7" title="Possible states for the an address (RFC 4862)">ADDR_TENTATIVE</a>);
<a name="l00266"></a>00266   }
<a name="l00267"></a>00267 <span class="preprocessor">#endif </span><span class="comment">/* UIP_CONF_IPV6_RPL */</span>
<a name="l00268"></a>00268 <span class="preprocessor">#endif </span><span class="comment">/* UIP_CONF_IPV6 */</span>
<a name="l00269"></a>00269 
<a name="l00270"></a>00270   <span class="comment">/*</span>
<a name="l00271"></a>00271 <span class="comment">   * Acknowledge the UART1 RX interrupt</span>
<a name="l00272"></a>00272 <span class="comment">   * now that we&#39;re sure we are ready to process it</span>
<a name="l00273"></a>00273 <span class="comment">   */</span>
<a name="l00274"></a>00274   model_uart_intr_en();
<a name="l00275"></a>00275 
<a name="l00276"></a>00276   energest_init();
<a name="l00277"></a>00277   ENERGEST_ON(ENERGEST_TYPE_CPU);
<a name="l00278"></a>00278 
<a name="l00279"></a>00279   fade(LEDS_RED);
<a name="l00280"></a>00280 
<a name="l00281"></a>00281 <span class="preprocessor">#if BATMON_CONF_ON</span>
<a name="l00282"></a>00282 <span class="preprocessor"></span>  <a class="code" href="a01866.html#ga1ecfc797b48072142b3e22ac1f0bbfdd" title="Start a process.">process_start</a>(&amp;batmon_process, <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>);
<a name="l00283"></a>00283 <span class="preprocessor">#endif</span>
<a name="l00284"></a>00284 <span class="preprocessor"></span>
<a name="l00285"></a>00285   autostart_start(autostart_processes);
<a name="l00286"></a>00286 
<a name="l00287"></a>00287   watchdog_start();
<a name="l00288"></a>00288 
<a name="l00289"></a>00289   <span class="keywordflow">while</span>(1) {
<a name="l00290"></a>00290     <span class="keywordflow">do</span> {
<a name="l00291"></a>00291       <span class="comment">/* Reset watchdog and handle polls and events */</span>
<a name="l00292"></a>00292       watchdog_periodic();
<a name="l00293"></a>00293 
<a name="l00294"></a>00294 <span class="preprocessor">#if CLOCK_CONF_STACK_FRIENDLY</span>
<a name="l00295"></a>00295 <span class="preprocessor"></span>      <span class="keywordflow">if</span>(sleep_flag) {
<a name="l00296"></a>00296         <span class="keywordflow">if</span>(<a class="code" href="a01862.html#ga1cc1db9f408e7c26035399ceb9ee1c5b" title="Check if there are any non-expired event timers.">etimer_pending</a>() &amp;&amp;
<a name="l00297"></a>00297             (<a class="code" href="a01862.html#ga904ba7c454cdf40eceaa010ed861006c" title="Get next event timer expiration time.">etimer_next_expiration_time</a>() - <a class="code" href="a01859.html#ga50c22f9b9d60dd1f9e59b63a3a6676b1" title="Get the current clock time.">clock_time</a>() - 1) &gt; MAX_TICKS) {
<a name="l00298"></a>00298           <a class="code" href="a01862.html#ga59f4cb712f2bba21ef307bcf67c83118" title="Make the event timer aware that the clock has changed.">etimer_request_poll</a>();
<a name="l00299"></a>00299         }
<a name="l00300"></a>00300         sleep_flag = 0;
<a name="l00301"></a>00301       }
<a name="l00302"></a>00302 <span class="preprocessor">#endif</span>
<a name="l00303"></a>00303 <span class="preprocessor"></span>      r = <a class="code" href="a01866.html#ga4968157ca91c28e26075ab78a1a4fb56" title="Run the system once - call poll handlers and process one event.">process_run</a>();
<a name="l00304"></a>00304     } <span class="keywordflow">while</span>(r &gt; 0);
<a name="l00305"></a>00305 <span class="preprocessor">#if NETSTACK_CONF_SHORTCUTS</span>
<a name="l00306"></a>00306 <span class="preprocessor"></span>    len = NETSTACK_RADIO.<a class="code" href="a00073.html#ab5fe62757c820d4bd690b8740d64e752" title="Check if the radio driver has just received a packet.">pending_packet</a>();
<a name="l00307"></a>00307     <span class="keywordflow">if</span>(len) {
<a name="l00308"></a>00308       <a class="code" href="a01801.html#gaa540c9abf0db13d27881b616f7794824" title="Clear and reset the packetbuf.">packetbuf_clear</a>();
<a name="l00309"></a>00309       len = NETSTACK_RADIO.<a class="code" href="a00073.html#a622c2a8abe3336e9c53e1484c269f840" title="Read a received packet into a buffer.">read</a>(<a class="code" href="a01801.html#ga29a6f3f230b55e6bc2f017879c27113a" title="Get a pointer to the data in the packetbuf.">packetbuf_dataptr</a>(), <a class="code" href="a01801.html#ga7a3b189fd04b82463abb4117fdb26b67" title="The size of the packetbuf, in bytes.">PACKETBUF_SIZE</a>);
<a name="l00310"></a>00310       <span class="keywordflow">if</span>(len &gt; 0) {
<a name="l00311"></a>00311         <a class="code" href="a01801.html#ga236b0d557fe119c39796432484c94b26" title="Set the length of the data in the packetbuf.">packetbuf_set_datalen</a>(len);
<a name="l00312"></a>00312         NETSTACK_RDC.<a class="code" href="a00074.html#a23ef7724147c010e5dc129bda8f6f3aa" title="Callback for getting notified of incoming packet.">input</a>();
<a name="l00313"></a>00313       }
<a name="l00314"></a>00314     }
<a name="l00315"></a>00315 <span class="preprocessor">#endif</span>
<a name="l00316"></a>00316 <span class="preprocessor"></span>
<a name="l00317"></a>00317 <span class="preprocessor">#if LPM_MODE</span>
<a name="l00318"></a>00318 <span class="preprocessor"></span><span class="preprocessor">#if (LPM_MODE==LPM_MODE_PM2)</span>
<a name="l00319"></a>00319 <span class="preprocessor"></span>    <a class="code" href="a00765.html#a44e89d523436fcbbf2c56e4fb335d509" title="Constant SLEEP for sub-register SR_TRX_STATUS.">SLEEP</a> &amp;= ~OSC_PD;            <span class="comment">/* Make sure both HS OSCs are on */</span>
<a name="l00320"></a>00320     <span class="keywordflow">while</span>(!(<a class="code" href="a00765.html#a44e89d523436fcbbf2c56e4fb335d509" title="Constant SLEEP for sub-register SR_TRX_STATUS.">SLEEP</a> &amp; HFRC_STB));  <span class="comment">/* Wait for RCOSC to be stable */</span>
<a name="l00321"></a>00321     CLKCON |= OSC;               <span class="comment">/* Switch to the RCOSC */</span>
<a name="l00322"></a>00322     <span class="keywordflow">while</span>(!(CLKCON &amp; OSC));      <span class="comment">/* Wait till it&#39;s happened */</span>
<a name="l00323"></a>00323     <a class="code" href="a00765.html#a44e89d523436fcbbf2c56e4fb335d509" title="Constant SLEEP for sub-register SR_TRX_STATUS.">SLEEP</a> |= OSC_PD;             <span class="comment">/* Turn the other one off */</span>
<a name="l00324"></a>00324 <span class="preprocessor">#endif </span><span class="comment">/* LPM_MODE==LPM_MODE_PM2 */</span>
<a name="l00325"></a>00325 
<a name="l00326"></a>00326     <span class="comment">/*</span>
<a name="l00327"></a>00327 <span class="comment">     * Set MCU IDLE or Drop to PM1. Any interrupt will take us out of LPM</span>
<a name="l00328"></a>00328 <span class="comment">     * Sleep Timer will wake us up in no more than 7.8ms (max idle interval)</span>
<a name="l00329"></a>00329 <span class="comment">     */</span>
<a name="l00330"></a>00330     <a class="code" href="a00765.html#a44e89d523436fcbbf2c56e4fb335d509" title="Constant SLEEP for sub-register SR_TRX_STATUS.">SLEEP</a> = (<a class="code" href="a00765.html#a44e89d523436fcbbf2c56e4fb335d509" title="Constant SLEEP for sub-register SR_TRX_STATUS.">SLEEP</a> &amp; 0xFC) | (LPM_MODE - 1);
<a name="l00331"></a>00331 
<a name="l00332"></a>00332 <span class="preprocessor">#if (LPM_MODE==LPM_MODE_PM2)</span>
<a name="l00333"></a>00333 <span class="preprocessor"></span>    <span class="comment">/*</span>
<a name="l00334"></a>00334 <span class="comment">     * Wait 3 NOPs. Either an interrupt occurred and SLEEP.MODE was cleared or</span>
<a name="l00335"></a>00335 <span class="comment">     * no interrupt occurred and we can safely power down</span>
<a name="l00336"></a>00336 <span class="comment">     */</span>
<a name="l00337"></a>00337     __asm
<a name="l00338"></a>00338       nop
<a name="l00339"></a>00339       nop
<a name="l00340"></a>00340       nop
<a name="l00341"></a>00341     __endasm;
<a name="l00342"></a>00342 
<a name="l00343"></a>00343     <span class="keywordflow">if</span> (<a class="code" href="a00765.html#a44e89d523436fcbbf2c56e4fb335d509" title="Constant SLEEP for sub-register SR_TRX_STATUS.">SLEEP</a> &amp; SLEEP_MODE0) {
<a name="l00344"></a>00344 <span class="preprocessor">#endif </span><span class="comment">/* LPM_MODE==LPM_MODE_PM2 */</span>
<a name="l00345"></a>00345 
<a name="l00346"></a>00346       ENERGEST_OFF(ENERGEST_TYPE_CPU);
<a name="l00347"></a>00347       ENERGEST_ON(ENERGEST_TYPE_LPM);
<a name="l00348"></a>00348 
<a name="l00349"></a>00349       <span class="comment">/* We are only interested in IRQ energest while idle or in LPM */</span>
<a name="l00350"></a>00350       ENERGEST_IRQ_RESTORE(irq_energest);
<a name="l00351"></a>00351 
<a name="l00352"></a>00352       <span class="comment">/* Go IDLE or Enter PM1 */</span>
<a name="l00353"></a>00353       PCON |= IDLE;
<a name="l00354"></a>00354 
<a name="l00355"></a>00355       <span class="comment">/* First instruction upon exiting PM1 must be a NOP */</span>
<a name="l00356"></a>00356       __asm
<a name="l00357"></a>00357         nop
<a name="l00358"></a>00358       __endasm;
<a name="l00359"></a>00359 
<a name="l00360"></a>00360       <span class="comment">/* Remember energest IRQ for next pass */</span>
<a name="l00361"></a>00361       ENERGEST_IRQ_SAVE(irq_energest);
<a name="l00362"></a>00362 
<a name="l00363"></a>00363       ENERGEST_ON(ENERGEST_TYPE_CPU);
<a name="l00364"></a>00364       ENERGEST_OFF(ENERGEST_TYPE_LPM);
<a name="l00365"></a>00365 
<a name="l00366"></a>00366 <span class="preprocessor">#if (LPM_MODE==LPM_MODE_PM2)</span>
<a name="l00367"></a>00367 <span class="preprocessor"></span>      <a class="code" href="a00765.html#a44e89d523436fcbbf2c56e4fb335d509" title="Constant SLEEP for sub-register SR_TRX_STATUS.">SLEEP</a> &amp;= ~OSC_PD;            <span class="comment">/* Make sure both HS OSCs are on */</span>
<a name="l00368"></a>00368       <span class="keywordflow">while</span>(!(<a class="code" href="a00765.html#a44e89d523436fcbbf2c56e4fb335d509" title="Constant SLEEP for sub-register SR_TRX_STATUS.">SLEEP</a> &amp; XOSC_STB));  <span class="comment">/* Wait for XOSC to be stable */</span>
<a name="l00369"></a>00369       CLKCON &amp;= ~OSC;              <span class="comment">/* Switch to the XOSC */</span>
<a name="l00370"></a>00370       <span class="comment">/*</span>
<a name="l00371"></a>00371 <span class="comment">       * On occasion the XOSC is reported stable when in reality it&#39;s not.</span>
<a name="l00372"></a>00372 <span class="comment">       * We need to wait for a safeguard of 64us or more before selecting it</span>
<a name="l00373"></a>00373 <span class="comment">       */</span>
<a name="l00374"></a>00374       <a class="code" href="a01859.html#gac0603df16193735b2cf4b70d54133356" title="Delay a given number of microseconds.">clock_delay_usec</a>(65);
<a name="l00375"></a>00375       <span class="keywordflow">while</span>(CLKCON &amp; OSC);         <span class="comment">/* Wait till it&#39;s happened */</span>
<a name="l00376"></a>00376     }
<a name="l00377"></a>00377 <span class="preprocessor">#endif </span><span class="comment">/* LPM_MODE==LPM_MODE_PM2 */</span>
<a name="l00378"></a>00378 <span class="preprocessor">#endif </span><span class="comment">/* LPM_MODE */</span>
<a name="l00379"></a>00379   }
<a name="l00380"></a>00380 }
<a name="l00381"></a>00381 <span class="comment">/*---------------------------------------------------------------------------*/</span>
</pre></div></div><!-- contents -->


<hr class="footer"/><address class="footer"><small>
Generated on Sun Jan 13 2013 10:57:28 for Contiki 2.6 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.7.6.1
</small></address>

</body>
</html>
