<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>Contiki 2.6: core/net/uip.h File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />



</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">Contiki 2.6
   
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.html"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.html"><span>Modules</span></a></li>
      <li><a href="annotated.html"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li><a href="dirs.html"><span>Directories</span></a></li>
      <li><a href="examples.html"><span>Examples</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>Globals</span></a></li>
    </ul>
  </div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="dir_3b4aaa38be606d755c8f09da5f4b54fc.html">core</a>      </li>
      <li class="navelem"><a class="el" href="dir_e85a2b0fd2c84e4058315392b52d2635.html">net</a>      </li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#define-members">Defines</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">uip.h File Reference<div class="ingroups"><a class="el" href="a01926.html">The uIP TCP/IP stack</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p>Header file for the uIP TCP/IP stack.  
<a href="#details">More...</a></p>
<div class="textblock"><code>#include &quot;<a class="el" href="a00442_source.html">net/uipopt.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="a00406_source.html">net/tcpip.h</a>&quot;</code><br/>
</div>
<p><a href="a00435_source.html">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">union &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00112.html">uip_ip4addr_t</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Representation of an IP address.  <a href="a00112.html#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00096.html">uip_802154_shortaddr</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">16 bit 802.15.4 address  <a href="a00096.html#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00095.html">uip_802154_longaddr</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">64 bit 802.15.4 address  <a href="a00095.html#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00094.html">uip_80211_addr</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">802.11 address  <a href="a00094.html#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00108.html">uip_eth_addr</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">802.3 address  <a href="a00108.html#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">union &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00097.html">uip_buf_t</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">The uIP packet buffer.  <a href="a00097.html#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00098.html">uip_conn</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Representation of a uIP TCP connection.  <a href="a00098.html#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00122.html">uip_udp_conn</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Representation of a uIP UDP connection.  <a href="a00122.html#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00121.html">uip_stats</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">The structure holding the TCP/IP statistics that are gathered if UIP_STATISTICS is set to 1.  <a href="a00121.html#details">More...</a><br/></td></tr>
<tr><td colspan="2"><h2><a name="define-members"></a>
Defines</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01811.html#ga12b467f314489259dd718228d0827a51">uip_sethostaddr</a>(addr)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the IP address of this host.  <a href="a01811.html#ga12b467f314489259dd718228d0827a51"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01811.html#ga20bc87e5c063c3f4b01547be6e5a0148">uip_gethostaddr</a>(addr)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the IP address of this host.  <a href="a01811.html#ga20bc87e5c063c3f4b01547be6e5a0148"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01811.html#ga41d37ea1e3bd24f7b51e9409aceaaa80">uip_setdraddr</a>(addr)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the default router's IP address.  <a href="a01811.html#ga41d37ea1e3bd24f7b51e9409aceaaa80"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01811.html#gaeb79c914cf137e6d27fd7583e5a66679">uip_setnetmask</a>(addr)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the netmask.  <a href="a01811.html#gaeb79c914cf137e6d27fd7583e5a66679"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01811.html#gad8e8bc9bc0e2ea4a24a8a024fd3a7f7c">uip_getdraddr</a>(addr)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the default router's IP address.  <a href="a01811.html#gad8e8bc9bc0e2ea4a24a8a024fd3a7f7c"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01811.html#ga5323320b7316647042016f17c4e881be">uip_getnetmask</a>(addr)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the netmask.  <a href="a01811.html#ga5323320b7316647042016f17c4e881be"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01813.html#gaa4360412ee9350fba725f98a137169fe">uip_input</a>()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Process an incoming packet.  <a href="a01813.html#gaa4360412ee9350fba725f98a137169fe"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01813.html#ga2c64c8c36bc84f9336f6a2184ea51883">uip_udp_periodic</a>(conn)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Periodic processing for a connection identified by its number.  <a href="a01813.html#ga2c64c8c36bc84f9336f6a2184ea51883"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01813.html#gaf5c2ad5acf3cc23b8262e9ba6a15136b">uip_udp_periodic_conn</a>(conn)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Periodic processing for a UDP connection identified by a pointer to its structure.  <a href="a01813.html#gaf5c2ad5acf3cc23b8262e9ba6a15136b"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01814.html#ga1a1bc437c09ddef238abab41d77c3177">uip_datalen</a>()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">The length of any incoming data that is currently available (if available) in the uip_appdata buffer.  <a href="a01814.html#ga1a1bc437c09ddef238abab41d77c3177"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01814.html#ga8411c95a4d89367ad2d9d6bde1a3d537">uip_urgdatalen</a>()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">The length of any out-of-band data (urgent data) that has arrived on the connection.  <a href="a01814.html#ga8411c95a4d89367ad2d9d6bde1a3d537"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01814.html#ga61db1dcb7c760e4dd5d60bf4e5576dca">uip_close</a>()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Close the current connection.  <a href="a01814.html#ga61db1dcb7c760e4dd5d60bf4e5576dca"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01814.html#ga88d2ccf7cd821f89d9a8df7e3948b56c">uip_abort</a>()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Abort the current connection.  <a href="a01814.html#ga88d2ccf7cd821f89d9a8df7e3948b56c"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01814.html#ga0a8bb9d6d0f1f56852ccfccbbad6c5d8">uip_stop</a>()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Tell the sending host to stop sending data.  <a href="a01814.html#ga0a8bb9d6d0f1f56852ccfccbbad6c5d8"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga64a238a5c02640a7a4aef004163aeb47"></a><!-- doxytag: member="uip.h::uip_stopped" ref="ga64a238a5c02640a7a4aef004163aeb47" args="(conn)" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01814.html#ga64a238a5c02640a7a4aef004163aeb47">uip_stopped</a>(conn)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Find out if the current connection has been previously stopped with <a class="el" href="a01814.html#ga0a8bb9d6d0f1f56852ccfccbbad6c5d8" title="Tell the sending host to stop sending data.">uip_stop()</a>. <br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01814.html#ga81ac47cee1c18f6aa479044069db7ca3">uip_restart</a>()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Restart the current connection, if is has previously been stopped with <a class="el" href="a01814.html#ga0a8bb9d6d0f1f56852ccfccbbad6c5d8" title="Tell the sending host to stop sending data.">uip_stop()</a>.  <a href="a01814.html#ga81ac47cee1c18f6aa479044069db7ca3"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01814.html#gaa9de254b8aa308eb4aab17efdde622d2">uip_udpconnection</a>()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Is the current connection a UDP connection?  <a href="a01814.html#gaa9de254b8aa308eb4aab17efdde622d2"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01814.html#ga26a14b8dae3f861830af9e7cf1e03725">uip_newdata</a>()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Is new incoming data available?  <a href="a01814.html#ga26a14b8dae3f861830af9e7cf1e03725"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01814.html#gade6634974418e3240c212b9b16864368">uip_acked</a>()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Has previously sent data been acknowledged?  <a href="a01814.html#gade6634974418e3240c212b9b16864368"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01814.html#gadb971fb1525d0c5002f52125b05f3218">uip_connected</a>()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Has the connection just been connected?  <a href="a01814.html#gadb971fb1525d0c5002f52125b05f3218"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01814.html#gaef6c4140c632b6a406779342cf3b6eb6">uip_closed</a>()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Has the connection been closed by the other end?  <a href="a01814.html#gaef6c4140c632b6a406779342cf3b6eb6"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01814.html#gafbd5fc486dfdf6bf6fc9db52b1f418c4">uip_aborted</a>()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Has the connection been aborted by the other end?  <a href="a01814.html#gafbd5fc486dfdf6bf6fc9db52b1f418c4"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01814.html#ga7b2ac4b18bd2ac3912fe67b3b17158c3">uip_timedout</a>()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Has the connection timed out?  <a href="a01814.html#ga7b2ac4b18bd2ac3912fe67b3b17158c3"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01814.html#gaa8933ad15a2e2947dae4a5cff50e6007">uip_rexmit</a>()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Do we need to retransmit previously data?  <a href="a01814.html#gaa8933ad15a2e2947dae4a5cff50e6007"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01814.html#ga58bb90796c1cdad3aac2ecf44d87b20e">uip_poll</a>()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Is the connection being polled by uIP?  <a href="a01814.html#ga58bb90796c1cdad3aac2ecf44d87b20e"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gaa87feebc7cffd4d8300e776cf64e4fec"></a><!-- doxytag: member="uip.h::uip_initialmss" ref="gaa87feebc7cffd4d8300e776cf64e4fec" args="()" -->
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01814.html#gaa87feebc7cffd4d8300e776cf64e4fec">uip_initialmss</a>()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the initial maximum segment size (MSS) of the current connection. <br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01814.html#gab5fecbc62edd128012cea0f47b57ab9f">uip_mss</a>()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the current maximum segment size that can be sent on the current connection.  <a href="a01814.html#gab5fecbc62edd128012cea0f47b57ab9f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01814.html#gaf2dbaceb10c67783a115075b5b6d66df">uip_udp_remove</a>(conn)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Remove a UDP connection.  <a href="a01814.html#gaf2dbaceb10c67783a115075b5b6d66df"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01814.html#gaa20812098a4663c8a9fc4ce8e95391b6">uip_udp_bind</a>(conn, port)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Bind a UDP connection to a local port.  <a href="a01814.html#gaa20812098a4663c8a9fc4ce8e95391b6"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01814.html#gae5ab69d40013e6cf86ef1763c95d920e">uip_udp_send</a>(len)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Send a UDP datagram of length len on the current connection.  <a href="a01814.html#gae5ab69d40013e6cf86ef1763c95d920e"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01815.html#gab6ae63b3e36da2ea6598ea91ad049516">uip_ipaddr_to_quad</a>(a)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert an IP address to four bytes separated by commas.  <a href="a01815.html#gab6ae63b3e36da2ea6598ea91ad049516"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01815.html#ga87f0b54ade0d159fba495089128a4932">uip_ipaddr</a>(addr, addr0, addr1, addr2, addr3)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct an IP address from four bytes.  <a href="a01815.html#ga87f0b54ade0d159fba495089128a4932"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01815.html#ga53fbda0e8c31d4882294c8dc3cb5f487">uip_ip6addr</a>(addr, addr0, addr1, addr2, addr3, addr4, addr5, addr6, addr7)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct an IPv6 address from eight 16-bit words.  <a href="a01815.html#ga53fbda0e8c31d4882294c8dc3cb5f487"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01815.html#ga3b6203a969d07b25be717bf04f0a0a99">uip_ip6addr_u8</a>(addr, addr0, addr1, addr2, addr3, addr4, addr5, addr6, addr7, addr8, addr9, addr10, addr11, addr12, addr13, addr14, addr15)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct an IPv6 address from sixteen 8-bit words.  <a href="a01815.html#ga3b6203a969d07b25be717bf04f0a0a99"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01815.html#ga210e629f7252e4bc8458cbdf260b3318">uip_ipaddr_cmp</a>(addr1, addr2)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy an IP address from one place to another.  <a href="a01815.html#ga210e629f7252e4bc8458cbdf260b3318"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01815.html#ga6b16e0bac41821c1fbe0c267071642f0">uip_ipaddr_maskcmp</a>(addr1, addr2, mask)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Compare two IP addresses with netmasks.  <a href="a01815.html#ga6b16e0bac41821c1fbe0c267071642f0"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01815.html#ga969d7fff37a979737da045e0d538a9bd">uip_ipaddr_mask</a>(dest, src, mask)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if an address is a broadcast address for a network.  <a href="a01815.html#ga969d7fff37a979737da045e0d538a9bd"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01815.html#ga22fa0681cd463191d7a01fe85d86996f">uip_ipaddr1</a>(addr)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Pick the first octet of an IP address.  <a href="a01815.html#ga22fa0681cd463191d7a01fe85d86996f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01815.html#gaffcd2fbe181e2aaefbf970551c302af5">uip_ipaddr2</a>(addr)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Pick the second octet of an IP address.  <a href="a01815.html#gaffcd2fbe181e2aaefbf970551c302af5"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01815.html#gae23534479ead15af8ff08ace26a47fb5">uip_ipaddr3</a>(addr)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Pick the third octet of an IP address.  <a href="a01815.html#gae23534479ead15af8ff08ace26a47fb5"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01815.html#ga165b603ec150e26efec7be199c9c2901">uip_ipaddr4</a>(addr)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Pick the fourth octet of an IP address.  <a href="a01815.html#ga165b603ec150e26efec7be199c9c2901"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01926.html#ga9c0814ed491fa452ec97910c0728d410">UIP_STAT</a>(s)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">The uIP TCP/IP statistics.  <a href="a01926.html#ga9c0814ed491fa452ec97910c0728d410"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01926.html#gae0825474feee11b4e038bfe71757875f">UIP_APPDATA_SIZE</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">The buffer size available for user data in the uip_buf buffer.  <a href="a01926.html#gae0825474feee11b4e038bfe71757875f"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gafcda3f09d42c591ef794e7e0939a5e0d"></a><!-- doxytag: member="uip.h::uip_ip4addr_t" ref="gafcda3f09d42c591ef794e7e0939a5e0d" args="" -->
typedef union <a class="el" href="a00112.html">uip_ip4addr_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01926.html#gafcda3f09d42c591ef794e7e0939a5e0d">uip_ip4addr_t</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Representation of an IP address. <br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gaa19f46c8c1df26f52a3e29e076a6f485"></a><!-- doxytag: member="uip.h::uip_802154_shortaddr" ref="gaa19f46c8c1df26f52a3e29e076a6f485" args="" -->
typedef struct <a class="el" href="a00096.html">uip_802154_shortaddr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01926.html#gaa19f46c8c1df26f52a3e29e076a6f485">uip_802154_shortaddr</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">16 bit 802.15.4 address <br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gad6602e7d93f6c640707ab765f0c10e74"></a><!-- doxytag: member="uip.h::uip_802154_longaddr" ref="gad6602e7d93f6c640707ab765f0c10e74" args="" -->
typedef struct <a class="el" href="a00095.html">uip_802154_longaddr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01926.html#gad6602e7d93f6c640707ab765f0c10e74">uip_802154_longaddr</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">64 bit 802.15.4 address <br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gafd5e417f029947c4101818b10a59b90c"></a><!-- doxytag: member="uip.h::uip_80211_addr" ref="gafd5e417f029947c4101818b10a59b90c" args="" -->
typedef struct <a class="el" href="a00094.html">uip_80211_addr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01926.html#gafd5e417f029947c4101818b10a59b90c">uip_80211_addr</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">802.11 address <br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga2261bf70c777f913cfefef920e57ed36"></a><!-- doxytag: member="uip.h::uip_eth_addr" ref="ga2261bf70c777f913cfefef920e57ed36" args="" -->
typedef struct <a class="el" href="a00108.html">uip_eth_addr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01926.html#ga2261bf70c777f913cfefef920e57ed36">uip_eth_addr</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">802.3 address <br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga239a73d412e4d6ce81473305919856cc"></a><!-- doxytag: member="uip.h::uip_lladdr_t" ref="ga239a73d412e4d6ce81473305919856cc" args="" -->
typedef <a class="el" href="a00108.html">uip_eth_addr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01926.html#ga239a73d412e4d6ce81473305919856cc">uip_lladdr_t</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Ethernet address. <br/></td></tr>
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01812.html#gac48ed5f0d27721ef62a3ed02a5ad8d2e">uip_init</a> (void)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">uIP initialization function.  <a href="a01812.html#gac48ed5f0d27721ef62a3ed02a5ad8d2e"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01812.html#gadad3fc79bd31e62b3e56ccca4ceaa565">uip_setipid</a> (uint16_t id)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">uIP initialization function.  <a href="a01812.html#gadad3fc79bd31e62b3e56ccca4ceaa565"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gaf8a01d734ce7c50dd9ef03b2a4e7a0ce"></a><!-- doxytag: member="uip.h::uip_reass_over" ref="gaf8a01d734ce7c50dd9ef03b2a4e7a0ce" args="(void)" -->
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01813.html#gaf8a01d734ce7c50dd9ef03b2a4e7a0ce">uip_reass_over</a> (void)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Abandon the reassembly of the current packet. <br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01814.html#ga50ff1ab4c8327f775eee393262ef1811">uip_listen</a> (uint16_t port)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Start listening to the specified port.  <a href="a01814.html#ga50ff1ab4c8327f775eee393262ef1811"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01814.html#gaabeca814c253359788ec2dbd6c62f17e">uip_unlisten</a> (uint16_t port)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Stop listening to the specified port.  <a href="a01814.html#gaabeca814c253359788ec2dbd6c62f17e"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="a00098.html">uip_conn</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01814.html#gadd213d8b34d70919ccac28303219cb82">uip_connect</a> (<a class="el" href="a00112.html">uip_ipaddr_t</a> *ripaddr, uint16_t port)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Connect to a remote host using TCP.  <a href="a01814.html#gadd213d8b34d70919ccac28303219cb82"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">CCIF void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01814.html#ga73635e084b87a4dd7535f579e680f268">uip_send</a> (const void *data, int len)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Send data on the current connection.  <a href="a01814.html#ga73635e084b87a4dd7535f579e680f268"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="a00122.html">uip_udp_conn</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01814.html#gae0ce3d16ecb813a6889616705f8d79c1">uip_udp_new</a> (const <a class="el" href="a00112.html">uip_ipaddr_t</a> *ripaddr, uint16_t rport)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Set up a new UDP connection.  <a href="a01814.html#gae0ce3d16ecb813a6889616705f8d79c1"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">CCIF uint16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01815.html#ga1079e0565aba46fc127b7ad6a4cf39b1">uip_htons</a> (uint16_t val)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert 16-bit quantity from host byte order to network byte order.  <a href="a01815.html#ga1079e0565aba46fc127b7ad6a4cf39b1"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01926.html#ga4c90e268d83fc6cd9cd78bfa435b8140">uip_process</a> (uint8_t flag)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">process the options within a hop by hop or destination option header  <a href="a01926.html#ga4c90e268d83fc6cd9cd78bfa435b8140"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">uint16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01926.html#ga9287706e35d5fb2080d1f6f14551f76f">uip_chksum</a> (uint16_t *buf, uint16_t len)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the Internet checksum over a buffer.  <a href="a01926.html#ga9287706e35d5fb2080d1f6f14551f76f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">uint16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01926.html#ga707e869bd80c32239d214a8ebe560c04">uip_ipchksum</a> (void)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the IP header checksum of the packet header in uip_buf.  <a href="a01926.html#ga707e869bd80c32239d214a8ebe560c04"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">uint16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01926.html#ga969ff8bccf86e1c4becc3c3fd23f93b4">uip_tcpchksum</a> (void)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the TCP checksum of the packet in uip_buf and uip_appdata.  <a href="a01926.html#ga969ff8bccf86e1c4becc3c3fd23f93b4"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">uint16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01926.html#gaeb447241dcd4e7840ea4b0603fc2c330">uip_udpchksum</a> (void)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the UDP checksum of the packet in uip_buf and uip_appdata.  <a href="a01926.html#gaeb447241dcd4e7840ea4b0603fc2c330"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">uint16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01926.html#ga3ec91f3c5d75781b5ad9915828aaeba9">uip_icmp6chksum</a> (void)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the ICMP checksum of the packet in uip_buf.  <a href="a01926.html#ga3ec91f3c5d75781b5ad9915828aaeba9"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="var-members"></a>
Variables</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga1ff9096f765144168470cfe7ebf75fec"></a><!-- doxytag: member="uip.h::uip_aligned_buf" ref="ga1ff9096f765144168470cfe7ebf75fec" args="" -->
CCIF <a class="el" href="a00097.html">uip_buf_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01813.html#ga1ff9096f765144168470cfe7ebf75fec">uip_aligned_buf</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Packet buffer for incoming and outgoing packets. <br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">CCIF void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01926.html#gad5848369ab5b02f2fb02d8390ccbaf79">uip_appdata</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Pointer to the application data in the packet buffer.  <a href="a01926.html#gad5848369ab5b02f2fb02d8390ccbaf79"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">CCIF uint16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01816.html#ga96b8904e098e8f1f896379732f1996be">uip_len</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">The length of the packet in the uip_buf buffer.  <a href="a01816.html#ga96b8904e098e8f1f896379732f1996be"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01816.html#ga0c63b80e0f8038403df5fee2bac3aab8">uip_ext_len</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">The length of the extension headers.  <a href="a01816.html#ga0c63b80e0f8038403df5fee2bac3aab8"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">CCIF struct <a class="el" href="a00098.html">uip_conn</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01926.html#ga76f4b1021e1a18d4d857ca8c121ec6e6">uip_conn</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Pointer to the current TCP connection.  <a href="a01926.html#ga76f4b1021e1a18d4d857ca8c121ec6e6"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gaf284d80df1a8b8c17c493739cb527e5c"></a><!-- doxytag: member="uip.h::uip_acc32" ref="gaf284d80df1a8b8c17c493739cb527e5c" args="[4]" -->
uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01817.html#gaf284d80df1a8b8c17c493739cb527e5c">uip_acc32</a> [4]</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">4-byte array used for the 32-bit sequence number calculations. <br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga210f227119fc972e6222c9cb452e15a9"></a><!-- doxytag: member="uip.h::uip_udp_conn" ref="ga210f227119fc972e6222c9cb452e15a9" args="" -->
struct <a class="el" href="a00122.html">uip_udp_conn</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01926.html#ga210f227119fc972e6222c9cb452e15a9">uip_udp_conn</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">The current UDP connection. <br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga89bf167a9f1014d2d78754742eb7e06d"></a><!-- doxytag: member="uip.h::uip_lladdr" ref="ga89bf167a9f1014d2d78754742eb7e06d" args="" -->
CCIF <a class="el" href="a01926.html#ga239a73d412e4d6ce81473305919856cc">uip_lladdr_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01926.html#ga89bf167a9f1014d2d78754742eb7e06d">uip_lladdr</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Host L2 address. <br/></td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>Header file for the uIP TCP/IP stack. </p>
<dl class="author"><dt><b>Author:</b></dt><dd>Adam Dunkels &lt;<a href="mailto:adam@dunkels.com">adam@dunkels.com</a>&gt; </dd>
<dd>
Julien Abeille &lt;<a href="mailto:jabeille@cisco.com">jabeille@cisco.com</a>&gt; (IPv6 related code) </dd>
<dd>
Mathilde Durvy &lt;<a href="mailto:mdurvy@cisco.com">mdurvy@cisco.com</a>&gt; (IPv6 related code)</dd></dl>
<p>The uIP TCP/IP stack header file contains definitions for a number of C macros that are used by uIP programs as well as internal uIP structures, TCP/IP header structures and function declarations. </p>

<p>Definition in file <a class="el" href="a00435_source.html">uip.h</a>.</p>
</div></div><!-- contents -->


<hr class="footer"/><address class="footer"><small>
Generated on Sun Jan 13 2013 10:57:29 for Contiki 2.6 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.7.6.1
</small></address>

</body>
</html>
