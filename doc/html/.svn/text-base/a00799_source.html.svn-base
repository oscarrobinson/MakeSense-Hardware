<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>Contiki 2.6: cpu/cc253x/dev/cc2530-rf.c Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />



</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">Contiki 2.6
   
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.html"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.html"><span>Modules</span></a></li>
      <li><a href="annotated.html"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li><a href="dirs.html"><span>Directories</span></a></li>
      <li><a href="examples.html"><span>Examples</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>Globals</span></a></li>
    </ul>
  </div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="dir_bd0bc4a94a775a8b7ece71496ffca05e.html">cpu</a>      </li>
      <li class="navelem"><a class="el" href="dir_474cdc50cd946d3705db7cf97f04db87.html">cc253x</a>      </li>
      <li class="navelem"><a class="el" href="dir_f4902116f363e51adde753d88cef255a.html">dev</a>      </li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">cc2530-rf.c</div>  </div>
</div><!--header-->
<div class="contents">
<a href="a00799.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment"> * Copyright (c) 2011, George Oikonomou - &lt;oikonomou@users.sourceforge.net&gt;</span>
<a name="l00003"></a>00003 <span class="comment"> * All rights reserved.</span>
<a name="l00004"></a>00004 <span class="comment"> *</span>
<a name="l00005"></a>00005 <span class="comment"> * Redistribution and use in source and binary forms, with or without</span>
<a name="l00006"></a>00006 <span class="comment"> * modification, are permitted provided that the following conditions</span>
<a name="l00007"></a>00007 <span class="comment"> * are met:</span>
<a name="l00008"></a>00008 <span class="comment"> * 1. Redistributions of source code must retain the above copyright</span>
<a name="l00009"></a>00009 <span class="comment"> *    notice, this list of conditions and the following disclaimer.</span>
<a name="l00010"></a>00010 <span class="comment"> * 2. Redistributions in binary form must reproduce the above copyright</span>
<a name="l00011"></a>00011 <span class="comment"> *    notice, this list of conditions and the following disclaimer in the</span>
<a name="l00012"></a>00012 <span class="comment"> *    documentation and/or other materials provided with the distribution.</span>
<a name="l00013"></a>00013 <span class="comment"> * 3. Neither the name of the Institute nor the names of its contributors</span>
<a name="l00014"></a>00014 <span class="comment"> *    may be used to endorse or promote products derived from this software</span>
<a name="l00015"></a>00015 <span class="comment"> *    without specific prior written permission.</span>
<a name="l00016"></a>00016 <span class="comment"> *</span>
<a name="l00017"></a>00017 <span class="comment"> * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS&#39;&#39; AND</span>
<a name="l00018"></a>00018 <span class="comment"> * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</span>
<a name="l00019"></a>00019 <span class="comment"> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE</span>
<a name="l00020"></a>00020 <span class="comment"> * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE</span>
<a name="l00021"></a>00021 <span class="comment"> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</span>
<a name="l00022"></a>00022 <span class="comment"> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS</span>
<a name="l00023"></a>00023 <span class="comment"> * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)</span>
<a name="l00024"></a>00024 <span class="comment"> * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT</span>
<a name="l00025"></a>00025 <span class="comment"> * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY</span>
<a name="l00026"></a>00026 <span class="comment"> * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF</span>
<a name="l00027"></a>00027 <span class="comment"> * SUCH DAMAGE.</span>
<a name="l00028"></a>00028 <span class="comment"> *</span>
<a name="l00029"></a>00029 <span class="comment"> * This file is part of the Contiki operating system.</span>
<a name="l00030"></a>00030 <span class="comment"> */</span>
<a name="l00031"></a>00031 <span class="comment"></span>
<a name="l00032"></a>00032 <span class="comment">/**</span>
<a name="l00033"></a>00033 <span class="comment"> * \file</span>
<a name="l00034"></a>00034 <span class="comment"> *         Implementation of the cc2530 RF driver</span>
<a name="l00035"></a>00035 <span class="comment"> *</span>
<a name="l00036"></a>00036 <span class="comment"> * \author</span>
<a name="l00037"></a>00037 <span class="comment"> *         George Oikonomou - &lt;oikonomou@users.sourceforge.net&gt;</span>
<a name="l00038"></a>00038 <span class="comment"> */</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &quot;contiki.h&quot;</span>
<a name="l00040"></a>00040 <span class="preprocessor">#include &quot;<a class="code" href="a00173.html" title="Header file for the radio API.">dev/radio.h</a>&quot;</span>
<a name="l00041"></a>00041 <span class="preprocessor">#include &quot;<a class="code" href="a00800.html" title="Implementation of the cc2530 RF driver.">dev/cc2530-rf.h</a>&quot;</span>
<a name="l00042"></a>00042 <span class="preprocessor">#include &quot;<a class="code" href="a00798.html" title="Definitions for TI/Chipcon cc2530, cc2531 and cc2533 SFR registers.">cc253x.h</a>&quot;</span>
<a name="l00043"></a>00043 <span class="preprocessor">#include &quot;<a class="code" href="a00804.html" title="Header file with definitions of bit masks for some cc2530 SFRs.">sfr-bits.h</a>&quot;</span>
<a name="l00044"></a>00044 <span class="preprocessor">#include &quot;sys/clock.h&quot;</span>
<a name="l00045"></a>00045 <span class="preprocessor">#include &quot;<a class="code" href="a00476.html" title="Header file for the real-time timer module.">sys/rtimer.h</a>&quot;</span>
<a name="l00046"></a>00046 
<a name="l00047"></a>00047 <span class="preprocessor">#include &quot;<a class="code" href="a00305.html" title="Header file for the Rime buffer (packetbuf) management.">net/packetbuf.h</a>&quot;</span>
<a name="l00048"></a>00048 <span class="preprocessor">#include &quot;<a class="code" href="a00360.html" title="Header file for Rime statistics.">net/rime/rimestats.h</a>&quot;</span>
<a name="l00049"></a>00049 <span class="preprocessor">#include &quot;<a class="code" href="a00358.html" title="Header file for the Rime address representation.">net/rime/rimeaddr.h</a>&quot;</span>
<a name="l00050"></a>00050 <span class="preprocessor">#include &quot;<a class="code" href="a00303.html" title="Include file for the Contiki low-layer network stack (NETSTACK)">net/netstack.h</a>&quot;</span>
<a name="l00051"></a>00051 
<a name="l00052"></a>00052 <span class="preprocessor">#include &lt;string.h&gt;</span>
<a name="l00053"></a>00053 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00054"></a>00054 <span class="preprocessor">#define CHECKSUM_LEN 2</span>
<a name="l00055"></a>00055 <span class="preprocessor"></span><span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00056"></a>00056 <span class="preprocessor">#if CC2530_RF_CONF_LEDS</span>
<a name="l00057"></a>00057 <span class="preprocessor"></span><span class="preprocessor">#define CC2530_RF_LEDS CC2530_RF_CONF_LEDS</span>
<a name="l00058"></a>00058 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00059"></a>00059 <span class="preprocessor"></span><span class="preprocessor">#define CC2530_RF_LEDS 0</span>
<a name="l00060"></a>00060 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00061"></a>00061 <span class="preprocessor"></span>
<a name="l00062"></a>00062 <span class="preprocessor">#if CC2530_RF_LEDS</span>
<a name="l00063"></a>00063 <span class="preprocessor"></span><span class="preprocessor">#include &quot;dev/leds.h&quot;</span>
<a name="l00064"></a>00064 <span class="preprocessor">#define RF_RX_LED_ON()          leds_on(LEDS_RED);</span>
<a name="l00065"></a>00065 <span class="preprocessor"></span><span class="preprocessor">#define RF_RX_LED_OFF()         leds_off(LEDS_RED);</span>
<a name="l00066"></a>00066 <span class="preprocessor"></span><span class="preprocessor">#define RF_TX_LED_ON()          leds_on(LEDS_GREEN);</span>
<a name="l00067"></a>00067 <span class="preprocessor"></span><span class="preprocessor">#define RF_TX_LED_OFF()         leds_off(LEDS_GREEN);</span>
<a name="l00068"></a>00068 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00069"></a>00069 <span class="preprocessor"></span><span class="preprocessor">#define RF_RX_LED_ON()</span>
<a name="l00070"></a>00070 <span class="preprocessor"></span><span class="preprocessor">#define RF_RX_LED_OFF()         </span>
<a name="l00071"></a>00071 <span class="preprocessor"></span><span class="preprocessor">#define RF_TX_LED_ON()</span>
<a name="l00072"></a>00072 <span class="preprocessor"></span><span class="preprocessor">#define RF_TX_LED_OFF()         </span>
<a name="l00073"></a>00073 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00074"></a>00074 <span class="preprocessor"></span><span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00075"></a>00075 <span class="preprocessor">#define DEBUG 0</span>
<a name="l00076"></a>00076 <span class="preprocessor"></span><span class="preprocessor">#if DEBUG</span>
<a name="l00077"></a>00077 <span class="preprocessor"></span><span class="preprocessor">#include &quot;debug.h&quot;</span>
<a name="l00078"></a>00078 <span class="preprocessor">#define PUTSTRING(...) putstring(__VA_ARGS__)</span>
<a name="l00079"></a>00079 <span class="preprocessor"></span><span class="preprocessor">#define PUTHEX(...) puthex(__VA_ARGS__)</span>
<a name="l00080"></a>00080 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00081"></a>00081 <span class="preprocessor"></span><span class="preprocessor">#define PUTSTRING(...)</span>
<a name="l00082"></a>00082 <span class="preprocessor"></span><span class="preprocessor">#define PUTHEX(...)</span>
<a name="l00083"></a>00083 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00084"></a>00084 <span class="preprocessor"></span><span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00085"></a>00085 <span class="comment">/* Local RF Flags */</span>
<a name="l00086"></a>00086 <span class="preprocessor">#define RX_ACTIVE  0x80</span>
<a name="l00087"></a>00087 <span class="preprocessor"></span><span class="preprocessor">#define WAS_OFF    0x10</span>
<a name="l00088"></a>00088 <span class="preprocessor"></span><span class="preprocessor">#define RF_ON      0x01</span>
<a name="l00089"></a>00089 <span class="preprocessor"></span>
<a name="l00090"></a>00090 <span class="comment">/* Bit Masks for the last byte in the RX FIFO */</span>
<a name="l00091"></a>00091 <span class="preprocessor">#define CRC_BIT_MASK 0x80</span>
<a name="l00092"></a>00092 <span class="preprocessor"></span><span class="preprocessor">#define LQI_BIT_MASK 0x7F</span>
<a name="l00093"></a>00093 <span class="preprocessor"></span><span class="comment">/* RSSI Offset */</span>
<a name="l00094"></a>00094 <span class="preprocessor">#define RSSI_OFFSET    73</span>
<a name="l00095"></a>00095 <span class="preprocessor"></span>
<a name="l00096"></a>00096 <span class="comment">/* 192 ms, radio off -&gt; on interval */</span>
<a name="l00097"></a>00097 <span class="preprocessor">#define ONOFF_TIME                    RTIMER_ARCH_SECOND / 3125</span>
<a name="l00098"></a>00098 <span class="preprocessor"></span><span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00099"></a>00099 <span class="preprocessor">#if CC2530_RF_CONF_HEXDUMP</span>
<a name="l00100"></a>00100 <span class="preprocessor"></span><span class="preprocessor">#include &quot;uart0.h&quot;</span>
<a name="l00101"></a>00101 <span class="keyword">static</span> <span class="keyword">const</span> uint8_t magic[] = { 0x53, 0x6E, 0x69, 0x66 }; <span class="comment">/* Snif */</span>
<a name="l00102"></a>00102 <span class="preprocessor">#endif</span>
<a name="l00103"></a>00103 <span class="preprocessor"></span><span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00104"></a>00104 <span class="preprocessor">#ifdef CC2530_RF_CONF_AUTOACK</span>
<a name="l00105"></a>00105 <span class="preprocessor"></span><span class="preprocessor">#define CC2530_RF_AUTOACK CC2530_RF_CONF_AUTOACK</span>
<a name="l00106"></a>00106 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00107"></a>00107 <span class="preprocessor"></span><span class="preprocessor">#define CC2530_RF_AUTOACK 1</span>
<a name="l00108"></a>00108 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00109"></a>00109 <span class="preprocessor"></span><span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00110"></a>00110 <span class="keyword">static</span> uint8_t __data rf_flags;
<a name="l00111"></a>00111 
<a name="l00112"></a>00112 <span class="keyword">static</span> <span class="keywordtype">int</span> on(<span class="keywordtype">void</span>); <span class="comment">/* prepare() needs our prototype */</span>
<a name="l00113"></a>00113 <span class="keyword">static</span> <span class="keywordtype">int</span> off(<span class="keywordtype">void</span>); <span class="comment">/* transmit() needs our prototype */</span>
<a name="l00114"></a>00114 <span class="keyword">static</span> <span class="keywordtype">int</span> channel_clear(<span class="keywordtype">void</span>); <span class="comment">/* transmit() needs our prototype */</span>
<a name="l00115"></a>00115 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00116"></a>00116 int8_t
<a name="l00117"></a>00117 cc2530_rf_channel_set(uint8_t channel)
<a name="l00118"></a>00118 {
<a name="l00119"></a>00119   PUTSTRING(<span class="stringliteral">&quot;RF: Set Chan\n&quot;</span>);
<a name="l00120"></a>00120 
<a name="l00121"></a>00121   <span class="keywordflow">if</span>((channel &lt; CC2530_RF_CHANNEL_MIN) || (channel &gt; CC2530_RF_CHANNEL_MAX)) {
<a name="l00122"></a>00122     <span class="keywordflow">return</span> -1;
<a name="l00123"></a>00123   }
<a name="l00124"></a>00124 
<a name="l00125"></a>00125   <span class="comment">/* Changes to FREQCTRL take effect after the next recalibration */</span>
<a name="l00126"></a>00126   off();
<a name="l00127"></a>00127   FREQCTRL = (CC2530_RF_CHANNEL_MIN
<a name="l00128"></a>00128       + (channel - CC2530_RF_CHANNEL_MIN) * CC2530_RF_CHANNEL_SPACING);
<a name="l00129"></a>00129   on();
<a name="l00130"></a>00130 
<a name="l00131"></a>00131   <span class="keywordflow">return</span> (int8_t) channel;
<a name="l00132"></a>00132 }
<a name="l00133"></a>00133 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00134"></a>00134 uint8_t
<a name="l00135"></a>00135 cc2530_rf_power_set(uint8_t new_power)
<a name="l00136"></a>00136 {
<a name="l00137"></a>00137   PUTSTRING(<span class="stringliteral">&quot;RF: Set Power\n&quot;</span>);
<a name="l00138"></a>00138   <span class="comment">/* off() */</span>
<a name="l00139"></a>00139   TXPOWER = new_power;
<a name="l00140"></a>00140   <span class="comment">/* on() */</span>
<a name="l00141"></a>00141 
<a name="l00142"></a>00142   <span class="keywordflow">return</span> TXPOWER;
<a name="l00143"></a>00143 }
<a name="l00144"></a>00144 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00145"></a>00145 <span class="keywordtype">void</span>
<a name="l00146"></a>00146 cc2530_rf_set_addr(uint16_t pan)
<a name="l00147"></a>00147 {
<a name="l00148"></a>00148 <span class="preprocessor">#if RIMEADDR_SIZE==8 </span><span class="comment">/* EXT_ADDR[7:0] is ignored when using short addresses */</span>
<a name="l00149"></a>00149   <span class="keywordtype">int</span> i;
<a name="l00150"></a>00150   <span class="keywordflow">for</span>(i = (RIMEADDR_SIZE - 1); i &gt;= 0; --i) {
<a name="l00151"></a>00151     ((uint8_t *)&amp;EXT_ADDR0)[i] = <a class="code" href="a01845.html#gaade5a80096fb3b4296cf89eeaca3087d" title="The Rime address of the node.">rimeaddr_node_addr</a>.u8[RIMEADDR_SIZE - 1 - i];
<a name="l00152"></a>00152   }
<a name="l00153"></a>00153 <span class="preprocessor">#endif</span>
<a name="l00154"></a>00154 <span class="preprocessor"></span>
<a name="l00155"></a>00155   PAN_ID0 = pan &amp; 0xFF;
<a name="l00156"></a>00156   PAN_ID1 = pan &gt;&gt; 8;
<a name="l00157"></a>00157 
<a name="l00158"></a>00158   SHORT_ADDR0 = <a class="code" href="a01845.html#gaade5a80096fb3b4296cf89eeaca3087d" title="The Rime address of the node.">rimeaddr_node_addr</a>.u8[RIMEADDR_SIZE - 1];
<a name="l00159"></a>00159   SHORT_ADDR1 = <a class="code" href="a01845.html#gaade5a80096fb3b4296cf89eeaca3087d" title="The Rime address of the node.">rimeaddr_node_addr</a>.u8[RIMEADDR_SIZE - 2];
<a name="l00160"></a>00160 }
<a name="l00161"></a>00161 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00162"></a>00162 <span class="comment">/* Netstack API radio driver functions */</span>
<a name="l00163"></a>00163 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00164"></a>00164 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00165"></a>00165 init(<span class="keywordtype">void</span>)
<a name="l00166"></a>00166 {
<a name="l00167"></a>00167   PUTSTRING(<span class="stringliteral">&quot;RF: Init\n&quot;</span>);
<a name="l00168"></a>00168 
<a name="l00169"></a>00169   <span class="keywordflow">if</span>(rf_flags &amp; RF_ON) {
<a name="l00170"></a>00170     <span class="keywordflow">return</span> 0;
<a name="l00171"></a>00171   }
<a name="l00172"></a>00172 
<a name="l00173"></a>00173 <span class="preprocessor">#if CC2530_RF_LOW_POWER_RX</span>
<a name="l00174"></a>00174 <span class="preprocessor"></span>  <span class="comment">/* Reduce RX power consumption current to 20mA at the cost of sensitivity */</span>
<a name="l00175"></a>00175   RXCTRL = 0x00;
<a name="l00176"></a>00176   FSCTRL = 0x50;
<a name="l00177"></a>00177 <span class="preprocessor">#else</span>
<a name="l00178"></a>00178 <span class="preprocessor"></span>  RXCTRL = 0x3F;
<a name="l00179"></a>00179   FSCTRL = 0x55;
<a name="l00180"></a>00180 <span class="preprocessor">#endif </span><span class="comment">/* CC2530_RF_LOW_POWER_RX */</span>
<a name="l00181"></a>00181 
<a name="l00182"></a>00182   CCACTRL0 = CC2530_RF_CCA_THRES;
<a name="l00183"></a>00183 
<a name="l00184"></a>00184   <span class="comment">/*</span>
<a name="l00185"></a>00185 <span class="comment">   * According to the user guide, these registers must be updated from their</span>
<a name="l00186"></a>00186 <span class="comment">   * defaults for optimal performance</span>
<a name="l00187"></a>00187 <span class="comment">   *</span>
<a name="l00188"></a>00188 <span class="comment">   * Table 23-6, Sec. 23.15.1, p. 259</span>
<a name="l00189"></a>00189 <span class="comment">   */</span>
<a name="l00190"></a>00190   TXFILTCFG = 0x09; <span class="comment">/* TX anti-aliasing filter */</span>
<a name="l00191"></a>00191   AGCCTRL1 = 0x15;  <span class="comment">/* AGC target value */</span>
<a name="l00192"></a>00192   FSCAL1 = 0x00;    <span class="comment">/* Reduce the VCO leakage */</span>
<a name="l00193"></a>00193 
<a name="l00194"></a>00194   <span class="comment">/* Auto ACKs and CRC calculation, default RX and TX modes with FIFOs */</span>
<a name="l00195"></a>00195   FRMCTRL0 = FRMCTRL0_AUTOCRC;
<a name="l00196"></a>00196 <span class="preprocessor">#if CC2530_RF_AUTOACK</span>
<a name="l00197"></a>00197 <span class="preprocessor"></span>  FRMCTRL0 |= FRMCTRL0_AUTOACK;
<a name="l00198"></a>00198 <span class="preprocessor">#endif</span>
<a name="l00199"></a>00199 <span class="preprocessor"></span>
<a name="l00200"></a>00200   <span class="comment">/* Disable source address matching and autopend */</span>
<a name="l00201"></a>00201   SRCMATCH = 0; <span class="comment">/* investigate */</span>
<a name="l00202"></a>00202 
<a name="l00203"></a>00203   <span class="comment">/* MAX FIFOP threshold */</span>
<a name="l00204"></a>00204   FIFOPCTRL = CC2530_RF_MAX_PACKET_LEN;
<a name="l00205"></a>00205 
<a name="l00206"></a>00206   cc2530_rf_power_set(CC2530_RF_TX_POWER);
<a name="l00207"></a>00207   cc2530_rf_channel_set(CC2530_RF_CHANNEL);
<a name="l00208"></a>00208 
<a name="l00209"></a>00209   RF_TX_LED_OFF();
<a name="l00210"></a>00210   RF_RX_LED_OFF();
<a name="l00211"></a>00211 
<a name="l00212"></a>00212   rf_flags |= RF_ON;
<a name="l00213"></a>00213 
<a name="l00214"></a>00214   <span class="keywordflow">return</span> 1;
<a name="l00215"></a>00215 }
<a name="l00216"></a>00216 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00217"></a>00217 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00218"></a>00218 prepare(<span class="keyword">const</span> <span class="keywordtype">void</span> *payload, <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> payload_len)
<a name="l00219"></a>00219 {
<a name="l00220"></a>00220   uint8_t i;
<a name="l00221"></a>00221 
<a name="l00222"></a>00222   PUTSTRING(<span class="stringliteral">&quot;RF: Prepare 0x&quot;</span>);
<a name="l00223"></a>00223   PUTHEX(payload_len + CHECKSUM_LEN);
<a name="l00224"></a>00224   PUTSTRING(<span class="stringliteral">&quot; bytes\n&quot;</span>);
<a name="l00225"></a>00225 
<a name="l00226"></a>00226   <span class="comment">/*</span>
<a name="l00227"></a>00227 <span class="comment">   * When we transmit in very quick bursts, make sure previous transmission</span>
<a name="l00228"></a>00228 <span class="comment">   * is not still in progress before re-writing to the TX FIFO</span>
<a name="l00229"></a>00229 <span class="comment">   */</span>
<a name="l00230"></a>00230   <span class="keywordflow">while</span>(FSMSTAT1 &amp; FSMSTAT1_TX_ACTIVE);
<a name="l00231"></a>00231 
<a name="l00232"></a>00232   <span class="keywordflow">if</span>((rf_flags &amp; RX_ACTIVE) == 0) {
<a name="l00233"></a>00233     on();
<a name="l00234"></a>00234   }
<a name="l00235"></a>00235 
<a name="l00236"></a>00236   CC2530_CSP_ISFLUSHTX();
<a name="l00237"></a>00237 
<a name="l00238"></a>00238   PUTSTRING(<span class="stringliteral">&quot;RF: data = &quot;</span>);
<a name="l00239"></a>00239   <span class="comment">/* Send the phy length byte first */</span>
<a name="l00240"></a>00240   RFD = payload_len + CHECKSUM_LEN; <span class="comment">/* Payload plus FCS */</span>
<a name="l00241"></a>00241   <span class="keywordflow">for</span>(i = 0; i &lt; payload_len; i++) {
<a name="l00242"></a>00242     RFD = ((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*) (payload))[i];
<a name="l00243"></a>00243     PUTHEX(((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)(payload))[i]);
<a name="l00244"></a>00244   }
<a name="l00245"></a>00245   PUTSTRING(<span class="stringliteral">&quot;\n&quot;</span>);
<a name="l00246"></a>00246 
<a name="l00247"></a>00247   <span class="comment">/* Leave space for the FCS */</span>
<a name="l00248"></a>00248   RFD = 0;
<a name="l00249"></a>00249   RFD = 0;
<a name="l00250"></a>00250 
<a name="l00251"></a>00251   <span class="keywordflow">return</span> 0;
<a name="l00252"></a>00252 }
<a name="l00253"></a>00253 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00254"></a>00254 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00255"></a>00255 transmit(<span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> transmit_len)
<a name="l00256"></a>00256 {
<a name="l00257"></a>00257   uint8_t counter;
<a name="l00258"></a>00258   <span class="keywordtype">int</span> ret = RADIO_TX_ERR;
<a name="l00259"></a>00259   rtimer_clock_t t0;
<a name="l00260"></a>00260   transmit_len; <span class="comment">/* hush the warning */</span>
<a name="l00261"></a>00261 
<a name="l00262"></a>00262   <span class="keywordflow">if</span>(!(rf_flags &amp; RX_ACTIVE)) {
<a name="l00263"></a>00263     t0 = <a class="code" href="a01868.html#gae646864933baa81ca646c96fa6f9f803" title="Get the current clock time.">RTIMER_NOW</a>();
<a name="l00264"></a>00264     on();
<a name="l00265"></a>00265     rf_flags |= WAS_OFF;
<a name="l00266"></a>00266     <span class="keywordflow">while</span> (RTIMER_CLOCK_LT(<a class="code" href="a01868.html#gae646864933baa81ca646c96fa6f9f803" title="Get the current clock time.">RTIMER_NOW</a>(), t0 + ONOFF_TIME));
<a name="l00267"></a>00267   }
<a name="l00268"></a>00268 
<a name="l00269"></a>00269   <span class="keywordflow">if</span>(channel_clear() == CC2530_RF_CCA_BUSY) {
<a name="l00270"></a>00270     RIMESTATS_ADD(contentiondrop);
<a name="l00271"></a>00271     <span class="keywordflow">return</span> RADIO_TX_COLLISION;
<a name="l00272"></a>00272   }
<a name="l00273"></a>00273 
<a name="l00274"></a>00274   <span class="comment">/*</span>
<a name="l00275"></a>00275 <span class="comment">   * prepare() double checked that TX_ACTIVE is low. If SFD is high we are</span>
<a name="l00276"></a>00276 <span class="comment">   * receiving. Abort transmission and bail out with RADIO_TX_COLLISION</span>
<a name="l00277"></a>00277 <span class="comment">   */</span>
<a name="l00278"></a>00278   <span class="keywordflow">if</span>(FSMSTAT1 &amp; FSMSTAT1_SFD) {
<a name="l00279"></a>00279     RIMESTATS_ADD(contentiondrop);
<a name="l00280"></a>00280     <span class="keywordflow">return</span> RADIO_TX_COLLISION;
<a name="l00281"></a>00281   }
<a name="l00282"></a>00282 
<a name="l00283"></a>00283   <span class="comment">/* Start the transmission */</span>
<a name="l00284"></a>00284   RF_TX_LED_ON();
<a name="l00285"></a>00285   ENERGEST_OFF(ENERGEST_TYPE_LISTEN);
<a name="l00286"></a>00286   ENERGEST_ON(ENERGEST_TYPE_TRANSMIT);
<a name="l00287"></a>00287 
<a name="l00288"></a>00288   CC2530_CSP_ISTXON();
<a name="l00289"></a>00289 
<a name="l00290"></a>00290   counter = 0;
<a name="l00291"></a>00291   <span class="keywordflow">while</span>(!(FSMSTAT1 &amp; FSMSTAT1_TX_ACTIVE) &amp;&amp; (counter++ &lt; 3)) {
<a name="l00292"></a>00292     <a class="code" href="a01859.html#gac0603df16193735b2cf4b70d54133356" title="Delay a given number of microseconds.">clock_delay_usec</a>(6);
<a name="l00293"></a>00293   }
<a name="l00294"></a>00294 
<a name="l00295"></a>00295   <span class="keywordflow">if</span>(!(FSMSTAT1 &amp; FSMSTAT1_TX_ACTIVE)) {
<a name="l00296"></a>00296     PUTSTRING(<span class="stringliteral">&quot;RF: TX never active.\n&quot;</span>);
<a name="l00297"></a>00297     CC2530_CSP_ISFLUSHTX();
<a name="l00298"></a>00298     ret = RADIO_TX_ERR;
<a name="l00299"></a>00299   } <span class="keywordflow">else</span> {
<a name="l00300"></a>00300     <span class="comment">/* Wait for the transmission to finish */</span>
<a name="l00301"></a>00301     <span class="keywordflow">while</span>(FSMSTAT1 &amp; FSMSTAT1_TX_ACTIVE);
<a name="l00302"></a>00302     ret = RADIO_TX_OK;
<a name="l00303"></a>00303   }
<a name="l00304"></a>00304   ENERGEST_OFF(ENERGEST_TYPE_TRANSMIT);
<a name="l00305"></a>00305   ENERGEST_ON(ENERGEST_TYPE_LISTEN);
<a name="l00306"></a>00306 
<a name="l00307"></a>00307   <span class="keywordflow">if</span>(rf_flags &amp; WAS_OFF){
<a name="l00308"></a>00308     off();
<a name="l00309"></a>00309   }
<a name="l00310"></a>00310 
<a name="l00311"></a>00311   RIMESTATS_ADD(lltx);
<a name="l00312"></a>00312 
<a name="l00313"></a>00313   RF_TX_LED_OFF();
<a name="l00314"></a>00314 
<a name="l00315"></a>00315   <span class="comment">/* OK, sent. We are now ready to send more */</span>
<a name="l00316"></a>00316   <span class="keywordflow">return</span> ret;
<a name="l00317"></a>00317 }
<a name="l00318"></a>00318 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00319"></a>00319 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00320"></a>00320 send(<span class="keywordtype">void</span> *payload, <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> payload_len)
<a name="l00321"></a>00321 {
<a name="l00322"></a>00322   prepare(payload, payload_len);
<a name="l00323"></a>00323   <span class="keywordflow">return</span> transmit(payload_len);
<a name="l00324"></a>00324 }
<a name="l00325"></a>00325 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00326"></a>00326 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00327"></a>00327 read(<span class="keywordtype">void</span> *buf, <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> bufsize)
<a name="l00328"></a>00328 {
<a name="l00329"></a>00329   uint8_t i;
<a name="l00330"></a>00330   uint8_t len;
<a name="l00331"></a>00331   uint8_t crc_corr;
<a name="l00332"></a>00332   int8_t rssi;
<a name="l00333"></a>00333 
<a name="l00334"></a>00334   PUTSTRING(<span class="stringliteral">&quot;RF: Read\n&quot;</span>);
<a name="l00335"></a>00335 
<a name="l00336"></a>00336   <span class="comment">/* Check the length */</span>
<a name="l00337"></a>00337   len = RFD;
<a name="l00338"></a>00338 
<a name="l00339"></a>00339   <span class="comment">/* Check for validity */</span>
<a name="l00340"></a>00340   <span class="keywordflow">if</span>(len &gt; CC2530_RF_MAX_PACKET_LEN) {
<a name="l00341"></a>00341     <span class="comment">/* Oops, we must be out of sync. */</span>
<a name="l00342"></a>00342     PUTSTRING(<span class="stringliteral">&quot;RF: bad sync\n&quot;</span>);
<a name="l00343"></a>00343 
<a name="l00344"></a>00344     RIMESTATS_ADD(badsynch);
<a name="l00345"></a>00345     CC2530_CSP_ISFLUSHRX();
<a name="l00346"></a>00346     <span class="keywordflow">return</span> 0;
<a name="l00347"></a>00347   }
<a name="l00348"></a>00348 
<a name="l00349"></a>00349   <span class="keywordflow">if</span>(len &lt;= CC2530_RF_MIN_PACKET_LEN) {
<a name="l00350"></a>00350     PUTSTRING(<span class="stringliteral">&quot;RF: too short\n&quot;</span>);
<a name="l00351"></a>00351 
<a name="l00352"></a>00352     RIMESTATS_ADD(tooshort);
<a name="l00353"></a>00353     CC2530_CSP_ISFLUSHRX();
<a name="l00354"></a>00354     <span class="keywordflow">return</span> 0;
<a name="l00355"></a>00355   }
<a name="l00356"></a>00356 
<a name="l00357"></a>00357   <span class="keywordflow">if</span>(len - CHECKSUM_LEN &gt; bufsize) {
<a name="l00358"></a>00358     PUTSTRING(<span class="stringliteral">&quot;RF: too long\n&quot;</span>);
<a name="l00359"></a>00359 
<a name="l00360"></a>00360     RIMESTATS_ADD(toolong);
<a name="l00361"></a>00361     CC2530_CSP_ISFLUSHRX();
<a name="l00362"></a>00362     <span class="keywordflow">return</span> 0;
<a name="l00363"></a>00363   }
<a name="l00364"></a>00364 
<a name="l00365"></a>00365 <span class="preprocessor">#if CC2530_RF_CONF_HEXDUMP</span>
<a name="l00366"></a>00366 <span class="preprocessor"></span>  <span class="comment">/* If we reach here, chances are the FIFO is holding a valid frame */</span>
<a name="l00367"></a>00367   uart0_writeb(magic[0]);
<a name="l00368"></a>00368   uart0_writeb(magic[1]);
<a name="l00369"></a>00369   uart0_writeb(magic[2]);
<a name="l00370"></a>00370   uart0_writeb(magic[3]);
<a name="l00371"></a>00371   uart0_writeb(len);
<a name="l00372"></a>00372 <span class="preprocessor">#endif</span>
<a name="l00373"></a>00373 <span class="preprocessor"></span>
<a name="l00374"></a>00374   RF_RX_LED_ON();
<a name="l00375"></a>00375 
<a name="l00376"></a>00376   PUTSTRING(<span class="stringliteral">&quot;RF: read (0x&quot;</span>);
<a name="l00377"></a>00377   PUTHEX(len);
<a name="l00378"></a>00378   PUTSTRING(<span class="stringliteral">&quot; bytes) = &quot;</span>);
<a name="l00379"></a>00379   len -= CHECKSUM_LEN;
<a name="l00380"></a>00380   <span class="keywordflow">for</span>(i = 0; i &lt; len; ++i) {
<a name="l00381"></a>00381     ((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)(buf))[i] = RFD;
<a name="l00382"></a>00382 <span class="preprocessor">#if CC2530_RF_CONF_HEXDUMP</span>
<a name="l00383"></a>00383 <span class="preprocessor"></span>    uart0_writeb(((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)(buf))[i]);
<a name="l00384"></a>00384 <span class="preprocessor">#endif</span>
<a name="l00385"></a>00385 <span class="preprocessor"></span>    PUTHEX(((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)(buf))[i]);
<a name="l00386"></a>00386   }
<a name="l00387"></a>00387   PUTSTRING(<span class="stringliteral">&quot;\n&quot;</span>);
<a name="l00388"></a>00388 
<a name="l00389"></a>00389   <span class="comment">/* Read the RSSI and CRC/Corr bytes */</span>
<a name="l00390"></a>00390   rssi = ((int8_t) RFD) - RSSI_OFFSET;
<a name="l00391"></a>00391   crc_corr = RFD;
<a name="l00392"></a>00392 
<a name="l00393"></a>00393 <span class="preprocessor">#if CC2530_RF_CONF_HEXDUMP</span>
<a name="l00394"></a>00394 <span class="preprocessor"></span>  uart0_writeb(rssi);
<a name="l00395"></a>00395   uart0_writeb(crc_corr);
<a name="l00396"></a>00396 <span class="preprocessor">#endif</span>
<a name="l00397"></a>00397 <span class="preprocessor"></span>
<a name="l00398"></a>00398   <span class="comment">/* MS bit CRC OK/Not OK, 7 LS Bits, Correlation value */</span>
<a name="l00399"></a>00399   <span class="keywordflow">if</span>(crc_corr &amp; CRC_BIT_MASK) {
<a name="l00400"></a>00400     packetbuf_set_attr(PACKETBUF_ATTR_RSSI, rssi);
<a name="l00401"></a>00401     packetbuf_set_attr(PACKETBUF_ATTR_LINK_QUALITY, crc_corr &amp; LQI_BIT_MASK);
<a name="l00402"></a>00402     RIMESTATS_ADD(llrx);
<a name="l00403"></a>00403   } <span class="keywordflow">else</span> {
<a name="l00404"></a>00404     RIMESTATS_ADD(badcrc);
<a name="l00405"></a>00405     CC2530_CSP_ISFLUSHRX();
<a name="l00406"></a>00406     RF_RX_LED_OFF();
<a name="l00407"></a>00407     <span class="keywordflow">return</span> 0;
<a name="l00408"></a>00408   }
<a name="l00409"></a>00409 
<a name="l00410"></a>00410   <span class="comment">/* If FIFOP==1 and FIFO==0 then we had a FIFO overflow at some point. */</span>
<a name="l00411"></a>00411   <span class="keywordflow">if</span>((FSMSTAT1 &amp; (FSMSTAT1_FIFO | FSMSTAT1_FIFOP)) == FSMSTAT1_FIFOP) {
<a name="l00412"></a>00412     <span class="comment">/*</span>
<a name="l00413"></a>00413 <span class="comment">     * If we reach here means that there might be more intact packets in the</span>
<a name="l00414"></a>00414 <span class="comment">     * FIFO despite the overflow. This can happen with bursts of small packets.</span>
<a name="l00415"></a>00415 <span class="comment">     *</span>
<a name="l00416"></a>00416 <span class="comment">     * Only flush if the FIFO is actually empty. If not, then next pass we will</span>
<a name="l00417"></a>00417 <span class="comment">     * pick up one more packet or flush due to an error.</span>
<a name="l00418"></a>00418 <span class="comment">     */</span>
<a name="l00419"></a>00419     <span class="keywordflow">if</span>(!RXFIFOCNT) {
<a name="l00420"></a>00420       CC2530_CSP_ISFLUSHRX();
<a name="l00421"></a>00421     }
<a name="l00422"></a>00422   }
<a name="l00423"></a>00423 
<a name="l00424"></a>00424   RF_RX_LED_OFF();
<a name="l00425"></a>00425 
<a name="l00426"></a>00426   <span class="keywordflow">return</span> (len);
<a name="l00427"></a>00427 }
<a name="l00428"></a>00428 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00429"></a>00429 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00430"></a>00430 channel_clear(<span class="keywordtype">void</span>)
<a name="l00431"></a>00431 {
<a name="l00432"></a>00432   <span class="keywordflow">if</span>(FSMSTAT1 &amp; FSMSTAT1_CCA) {
<a name="l00433"></a>00433     <span class="keywordflow">return</span> CC2530_RF_CCA_CLEAR;
<a name="l00434"></a>00434   }
<a name="l00435"></a>00435   <span class="keywordflow">return</span> CC2530_RF_CCA_BUSY;
<a name="l00436"></a>00436 }
<a name="l00437"></a>00437 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00438"></a>00438 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00439"></a>00439 receiving_packet(<span class="keywordtype">void</span>)
<a name="l00440"></a>00440 {
<a name="l00441"></a>00441   PUTSTRING(<span class="stringliteral">&quot;RF: Receiving\n&quot;</span>);
<a name="l00442"></a>00442 
<a name="l00443"></a>00443   <span class="comment">/*</span>
<a name="l00444"></a>00444 <span class="comment">   * SFD high while transmitting and receiving.</span>
<a name="l00445"></a>00445 <span class="comment">   * TX_ACTIVE high only when transmitting</span>
<a name="l00446"></a>00446 <span class="comment">   *</span>
<a name="l00447"></a>00447 <span class="comment">   * FSMSTAT1 &amp; (TX_ACTIVE | SFD) == SFD &lt;=&gt; receiving</span>
<a name="l00448"></a>00448 <span class="comment">   */</span>
<a name="l00449"></a>00449   <span class="keywordflow">return</span> (FSMSTAT1 &amp; (FSMSTAT1_TX_ACTIVE | FSMSTAT1_SFD) == FSMSTAT1_SFD);
<a name="l00450"></a>00450 }
<a name="l00451"></a>00451 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00452"></a>00452 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00453"></a>00453 pending_packet(<span class="keywordtype">void</span>)
<a name="l00454"></a>00454 {
<a name="l00455"></a>00455   <span class="keywordflow">return</span> (FSMSTAT1 &amp; FSMSTAT1_FIFOP);
<a name="l00456"></a>00456 }
<a name="l00457"></a>00457 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00458"></a>00458 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00459"></a>00459 on(<span class="keywordtype">void</span>)
<a name="l00460"></a>00460 {
<a name="l00461"></a>00461   <span class="keywordflow">if</span>(!(rf_flags &amp; RX_ACTIVE)) {
<a name="l00462"></a>00462     CC2530_CSP_ISFLUSHRX();
<a name="l00463"></a>00463     CC2530_CSP_ISRXON();
<a name="l00464"></a>00464 
<a name="l00465"></a>00465     rf_flags |= RX_ACTIVE;
<a name="l00466"></a>00466   }
<a name="l00467"></a>00467 
<a name="l00468"></a>00468   ENERGEST_ON(ENERGEST_TYPE_LISTEN);
<a name="l00469"></a>00469   <span class="keywordflow">return</span> 1;
<a name="l00470"></a>00470 }
<a name="l00471"></a>00471 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00472"></a>00472 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00473"></a>00473 off(<span class="keywordtype">void</span>)
<a name="l00474"></a>00474 {
<a name="l00475"></a>00475   CC2530_CSP_ISRFOFF();
<a name="l00476"></a>00476   CC2530_CSP_ISFLUSHRX();
<a name="l00477"></a>00477 
<a name="l00478"></a>00478   rf_flags &amp;= ~RX_ACTIVE;
<a name="l00479"></a>00479 
<a name="l00480"></a>00480   ENERGEST_OFF(ENERGEST_TYPE_LISTEN);
<a name="l00481"></a>00481   <span class="keywordflow">return</span> 1;
<a name="l00482"></a>00482 }
<a name="l00483"></a>00483 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00484"></a>00484 <span class="keyword">const</span> <span class="keyword">struct </span><a class="code" href="a00073.html" title="The structure of a device driver for a radio in Contiki.">radio_driver</a> cc2530_rf_driver =
<a name="l00485"></a>00485 {
<a name="l00486"></a>00486     init,
<a name="l00487"></a>00487     <a class="code" href="a00073.html#a38aa2cc1efc42aa695d3e10926c55eed" title="Prepare the radio with a packet to be sent.">prepare</a>,
<a name="l00488"></a>00488     <a class="code" href="a00073.html#aefbad725b4dd302fdf4bd62e28706378" title="Send the packet that has previously been prepared.">transmit</a>,
<a name="l00489"></a>00489     <a class="code" href="a00073.html#a8abbfdc45c060bcbfab97e7b336c7ac0" title="Prepare &amp; transmit a packet.">send</a>,
<a name="l00490"></a>00490     <a class="code" href="a00073.html#a622c2a8abe3336e9c53e1484c269f840" title="Read a received packet into a buffer.">read</a>,
<a name="l00491"></a>00491     <a class="code" href="a00073.html#a8284614b7c7ee7b35a7cf732276ba62d" title="Perform a Clear-Channel Assessment (CCA) to find out if there is a packet in the air or not...">channel_clear</a>,
<a name="l00492"></a>00492     <a class="code" href="a00073.html#a4b380ec8f632e6e435ca210b8072a438" title="Check if the radio driver is currently receiving a packet.">receiving_packet</a>,
<a name="l00493"></a>00493     <a class="code" href="a00073.html#ab5fe62757c820d4bd690b8740d64e752" title="Check if the radio driver has just received a packet.">pending_packet</a>,
<a name="l00494"></a>00494     <a class="code" href="a00073.html#a6b7a262e6494e3233e5d5c45bdfc6881" title="Turn the radio on.">on</a>,
<a name="l00495"></a>00495     <a class="code" href="a00073.html#aa6b6203cb6aef79945e689dde54a5008" title="Turn the radio off.">off</a>,
<a name="l00496"></a>00496 };
<a name="l00497"></a>00497 <span class="comment">/*---------------------------------------------------------------------------*/</span>
</pre></div></div><!-- contents -->


<hr class="footer"/><address class="footer"><small>
Generated on Sun Jan 13 2013 10:57:25 for Contiki 2.6 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.7.6.1
</small></address>

</body>
</html>
