<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>Contiki 2.6: platform/exp5438/uart1x.c Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />



</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">Contiki 2.6
   
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.html"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.html"><span>Modules</span></a></li>
      <li><a href="annotated.html"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li><a href="dirs.html"><span>Directories</span></a></li>
      <li><a href="examples.html"><span>Examples</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>Globals</span></a></li>
    </ul>
  </div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="dir_da81161b528b307837d2c2604d1aafcb.html">platform</a>      </li>
      <li class="navelem"><a class="el" href="dir_340bbac66e1488991cce70c451167fff.html">exp5438</a>      </li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">uart1x.c</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment"> * Copyright (c) 2010, Swedish Institute of Computer Science</span>
<a name="l00003"></a>00003 <span class="comment"> * All rights reserved.</span>
<a name="l00004"></a>00004 <span class="comment"> *</span>
<a name="l00005"></a>00005 <span class="comment"> * Redistribution and use in source and binary forms, with or without</span>
<a name="l00006"></a>00006 <span class="comment"> * modification, are permitted provided that the following conditions</span>
<a name="l00007"></a>00007 <span class="comment"> * are met:</span>
<a name="l00008"></a>00008 <span class="comment"> * 1. Redistributions of source code must retain the above copyright</span>
<a name="l00009"></a>00009 <span class="comment"> *    notice, this list of conditions and the following disclaimer.</span>
<a name="l00010"></a>00010 <span class="comment"> * 2. Redistributions in binary form must reproduce the above copyright</span>
<a name="l00011"></a>00011 <span class="comment"> *    notice, this list of conditions and the following disclaimer in the</span>
<a name="l00012"></a>00012 <span class="comment"> *    documentation and/or other materials provided with the distribution.</span>
<a name="l00013"></a>00013 <span class="comment"> * 3. Neither the name of the Institute nor the names of its contributors</span>
<a name="l00014"></a>00014 <span class="comment"> *    may be used to endorse or promote products derived from this software</span>
<a name="l00015"></a>00015 <span class="comment"> *    without specific prior written permission.</span>
<a name="l00016"></a>00016 <span class="comment"> *</span>
<a name="l00017"></a>00017 <span class="comment"> * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS&#39;&#39; AND</span>
<a name="l00018"></a>00018 <span class="comment"> * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</span>
<a name="l00019"></a>00019 <span class="comment"> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE</span>
<a name="l00020"></a>00020 <span class="comment"> * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE</span>
<a name="l00021"></a>00021 <span class="comment"> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</span>
<a name="l00022"></a>00022 <span class="comment"> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS</span>
<a name="l00023"></a>00023 <span class="comment"> * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)</span>
<a name="l00024"></a>00024 <span class="comment"> * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT</span>
<a name="l00025"></a>00025 <span class="comment"> * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY</span>
<a name="l00026"></a>00026 <span class="comment"> * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF</span>
<a name="l00027"></a>00027 <span class="comment"> * SUCH DAMAGE.</span>
<a name="l00028"></a>00028 <span class="comment"> *</span>
<a name="l00029"></a>00029 <span class="comment"> * @(#)$Id: uart1x.c,v 1.1 2010/08/24 16:23:20 joxe Exp $</span>
<a name="l00030"></a>00030 <span class="comment"> */</span>
<a name="l00031"></a>00031 
<a name="l00032"></a>00032 <span class="comment">/*</span>
<a name="l00033"></a>00033 <span class="comment"> * Yet another machine dependent MSP430X UART1 code.</span>
<a name="l00034"></a>00034 <span class="comment"> * IF2, etc. can not be used here... need to abstract to some macros</span>
<a name="l00035"></a>00035 <span class="comment"> * later.</span>
<a name="l00036"></a>00036 <span class="comment"> */</span>
<a name="l00037"></a>00037 
<a name="l00038"></a>00038 <span class="preprocessor">#include &quot;contiki.h&quot;</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &lt;stdlib.h&gt;</span>
<a name="l00040"></a>00040 
<a name="l00041"></a>00041 <span class="preprocessor">#include &quot;<a class="code" href="a00455.html" title="Header file for the energy estimation mechanism.">sys/energest.h</a>&quot;</span>
<a name="l00042"></a>00042 <span class="preprocessor">#include &quot;dev/uart1.h&quot;</span>
<a name="l00043"></a>00043 <span class="preprocessor">#include &quot;dev/watchdog.h&quot;</span>
<a name="l00044"></a>00044 <span class="preprocessor">#include &quot;<a class="code" href="a00227.html" title="Header file for the ring buffer library.">lib/ringbuf.h</a>&quot;</span>
<a name="l00045"></a>00045 <span class="preprocessor">#include &quot;dev/leds.h&quot;</span>
<a name="l00046"></a>00046 <span class="preprocessor">#include &quot;isr_compat.h&quot;</span>
<a name="l00047"></a>00047 
<a name="l00048"></a>00048 <span class="keyword">static</span> int (*uart1_input_handler)(<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> c);
<a name="l00049"></a>00049 
<a name="l00050"></a>00050 <span class="keyword">static</span> <span class="keyword">volatile</span> uint8_t transmitting;
<a name="l00051"></a>00051 
<a name="l00052"></a>00052 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00053"></a>00053 uint8_t
<a name="l00054"></a>00054 uart1_active(<span class="keywordtype">void</span>)
<a name="l00055"></a>00055 {
<a name="l00056"></a>00056   <span class="keywordflow">return</span> (UCA1STAT &amp; UCBUSY) | transmitting;
<a name="l00057"></a>00057 }
<a name="l00058"></a>00058 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00059"></a>00059 <span class="keywordtype">void</span>
<a name="l00060"></a>00060 uart1_set_input(<span class="keywordtype">int</span> (*input)(<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> c))
<a name="l00061"></a>00061 {
<a name="l00062"></a>00062   uart1_input_handler = input;
<a name="l00063"></a>00063 }
<a name="l00064"></a>00064 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00065"></a>00065 <span class="keywordtype">void</span>
<a name="l00066"></a>00066 uart1_writeb(<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> c)
<a name="l00067"></a>00067 {
<a name="l00068"></a>00068   watchdog_periodic();
<a name="l00069"></a>00069   <span class="comment">/* Loop until the transmission buffer is available. */</span>
<a name="l00070"></a>00070   <span class="keywordflow">while</span>((UCA1STAT &amp; UCBUSY));
<a name="l00071"></a>00071 
<a name="l00072"></a>00072   <span class="comment">/* Transmit the data. */</span>
<a name="l00073"></a>00073   UCA1TXBUF = c;
<a name="l00074"></a>00074 }
<a name="l00075"></a>00075 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00076"></a>00076 <span class="preprocessor">#if ! WITH_UIP </span><span class="comment">/* If WITH_UIP is defined, putchar() is defined by the SLIP driver */</span>
<a name="l00077"></a>00077 <span class="preprocessor">#endif </span><span class="comment">/* ! WITH_UIP */</span>
<a name="l00078"></a>00078 <span class="comment">/*---------------------------------------------------------------------------*/</span><span class="comment"></span>
<a name="l00079"></a>00079 <span class="comment">/**</span>
<a name="l00080"></a>00080 <span class="comment"> * Initalize the RS232 port.</span>
<a name="l00081"></a>00081 <span class="comment"> *</span>
<a name="l00082"></a>00082 <span class="comment"> */</span>
<a name="l00083"></a>00083 <span class="keywordtype">void</span>
<a name="l00084"></a>00084 <a class="code" href="a00937.html#a63263e531162ee62179b3f0c9915b8a3" title="Initalize the RS232 port.">uart1_init</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> ubr)
<a name="l00085"></a>00085 {
<a name="l00086"></a>00086   <span class="comment">/* RS232 */</span>
<a name="l00087"></a>00087   UCA1CTL1 |= UCSWRST;            <span class="comment">/* Hold peripheral in reset state */</span>
<a name="l00088"></a>00088   UCA1CTL1 |= UCSSEL_2;           <span class="comment">/* CLK = SMCLK */</span>
<a name="l00089"></a>00089 
<a name="l00090"></a>00090   <span class="comment">/* UCA1BR0 = 0x45;                 /\* 8MHz/115200 = 69 = 0x45 *\/ */</span>
<a name="l00091"></a>00091   UCA1BR0 = ubr &amp; 0xff; <span class="comment">//0x45; /* tested... */</span>
<a name="l00092"></a>00092   <span class="comment">/* UCA1BR0 = 9; */</span>
<a name="l00093"></a>00093   UCA1BR1 = ubr &gt;&gt; 8;
<a name="l00094"></a>00094   UCA1MCTL = UCBRS_3;             <span class="comment">/* Modulation UCBRSx = 3 */</span>
<a name="l00095"></a>00095   P5DIR &amp;= ~0x80;                 <span class="comment">/* P5.7 = USCI_A1 RXD as input */</span>
<a name="l00096"></a>00096   P5DIR |= 0x40;                  <span class="comment">/* P5.6 = USCI_A1 TXD as output */</span>
<a name="l00097"></a>00097   P5SEL |= 0xc0;                  <span class="comment">/* P5.6,7 = USCI_A1 TXD/RXD */</span>
<a name="l00098"></a>00098 
<a name="l00099"></a>00099   <span class="comment">/*UCA1CTL1 &amp;= ~UCSWRST;*/</span>       <span class="comment">/* Initialize USCI state machine */</span>
<a name="l00100"></a>00100 
<a name="l00101"></a>00101   transmitting = 0;
<a name="l00102"></a>00102 
<a name="l00103"></a>00103   <span class="comment">/* XXX Clear pending interrupts before enable */</span>
<a name="l00104"></a>00104   UCA1IE &amp;= ~UCRXIFG;
<a name="l00105"></a>00105   UCA1IE &amp;= ~UCTXIFG;
<a name="l00106"></a>00106 
<a name="l00107"></a>00107   UCA1CTL1 &amp;= ~UCSWRST;                   <span class="comment">/* Initialize USCI state machine **before** enabling interrupts */</span>
<a name="l00108"></a>00108   UCA1IE |= UCRXIE;                        <span class="comment">/* Enable UCA1 RX interrupt */</span>
<a name="l00109"></a>00109 }
<a name="l00110"></a>00110 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00111"></a>00111 ISR(USCI_A1, uart1_rx_interrupt)
<a name="l00112"></a>00112 {
<a name="l00113"></a>00113   uint8_t c;
<a name="l00114"></a>00114 
<a name="l00115"></a>00115   ENERGEST_ON(ENERGEST_TYPE_IRQ);
<a name="l00116"></a>00116   <span class="comment">/*leds_toggle(LEDS_ALL);*/</span>
<a name="l00117"></a>00117   <span class="keywordflow">if</span>(UCA1IV == 2) {
<a name="l00118"></a>00118     <span class="keywordflow">if</span>(UCA1STAT &amp; UCRXERR) {
<a name="l00119"></a>00119       c = UCA1RXBUF;   <span class="comment">/* Clear error flags by forcing a dummy read. */</span>
<a name="l00120"></a>00120     } <span class="keywordflow">else</span> {
<a name="l00121"></a>00121       c = UCA1RXBUF;
<a name="l00122"></a>00122       <span class="keywordflow">if</span>(uart1_input_handler != <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>) {
<a name="l00123"></a>00123         <span class="keywordflow">if</span>(uart1_input_handler(c)) {
<a name="l00124"></a>00124           LPM4_EXIT;
<a name="l00125"></a>00125         }
<a name="l00126"></a>00126       }
<a name="l00127"></a>00127     }
<a name="l00128"></a>00128   }
<a name="l00129"></a>00129   ENERGEST_OFF(ENERGEST_TYPE_IRQ);
<a name="l00130"></a>00130 }
<a name="l00131"></a>00131 <span class="comment">/*---------------------------------------------------------------------------*/</span>
</pre></div></div><!-- contents -->


<hr class="footer"/><address class="footer"><small>
Generated on Sun Jan 13 2013 10:57:27 for Contiki 2.6 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.7.6.1
</small></address>

</body>
</html>
