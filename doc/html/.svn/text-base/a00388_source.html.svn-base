<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>Contiki 2.6: core/net/rpl/rpl-dag.c Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />



</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">Contiki 2.6
   
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.html"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.html"><span>Modules</span></a></li>
      <li><a href="annotated.html"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li><a href="dirs.html"><span>Directories</span></a></li>
      <li><a href="examples.html"><span>Examples</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>Globals</span></a></li>
    </ul>
  </div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="dir_3b4aaa38be606d755c8f09da5f4b54fc.html">core</a>      </li>
      <li class="navelem"><a class="el" href="dir_e85a2b0fd2c84e4058315392b52d2635.html">net</a>      </li>
      <li class="navelem"><a class="el" href="dir_f4f360aa21647f965d2e29fb573cd9ac.html">rpl</a>      </li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">rpl-dag.c</div>  </div>
</div><!--header-->
<div class="contents">
<a href="a00388.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**</span>
<a name="l00002"></a>00002 <span class="comment"> * \addtogroup uip6</span>
<a name="l00003"></a>00003 <span class="comment"> * @{</span>
<a name="l00004"></a>00004 <span class="comment"> */</span>
<a name="l00005"></a>00005 <span class="comment">/*</span>
<a name="l00006"></a>00006 <span class="comment"> * Copyright (c) 2010, Swedish Institute of Computer Science.</span>
<a name="l00007"></a>00007 <span class="comment"> * All rights reserved.</span>
<a name="l00008"></a>00008 <span class="comment"> *</span>
<a name="l00009"></a>00009 <span class="comment"> * Redistribution and use in source and binary forms, with or without</span>
<a name="l00010"></a>00010 <span class="comment"> * modification, are permitted provided that the following conditions</span>
<a name="l00011"></a>00011 <span class="comment"> * are met:</span>
<a name="l00012"></a>00012 <span class="comment"> * 1. Redistributions of source code must retain the above copyright</span>
<a name="l00013"></a>00013 <span class="comment"> *    notice, this list of conditions and the following disclaimer.</span>
<a name="l00014"></a>00014 <span class="comment"> * 2. Redistributions in binary form must reproduce the above copyright</span>
<a name="l00015"></a>00015 <span class="comment"> *    notice, this list of conditions and the following disclaimer in the</span>
<a name="l00016"></a>00016 <span class="comment"> *    documentation and/or other materials provided with the distribution.</span>
<a name="l00017"></a>00017 <span class="comment"> * 3. Neither the name of the Institute nor the names of its contributors</span>
<a name="l00018"></a>00018 <span class="comment"> *    may be used to endorse or promote products derived from this software</span>
<a name="l00019"></a>00019 <span class="comment"> *    without specific prior written permission.</span>
<a name="l00020"></a>00020 <span class="comment"> *</span>
<a name="l00021"></a>00021 <span class="comment"> * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS&#39;&#39; AND</span>
<a name="l00022"></a>00022 <span class="comment"> * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</span>
<a name="l00023"></a>00023 <span class="comment"> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE</span>
<a name="l00024"></a>00024 <span class="comment"> * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE</span>
<a name="l00025"></a>00025 <span class="comment"> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</span>
<a name="l00026"></a>00026 <span class="comment"> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS</span>
<a name="l00027"></a>00027 <span class="comment"> * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)</span>
<a name="l00028"></a>00028 <span class="comment"> * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT</span>
<a name="l00029"></a>00029 <span class="comment"> * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY</span>
<a name="l00030"></a>00030 <span class="comment"> * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF</span>
<a name="l00031"></a>00031 <span class="comment"> * SUCH DAMAGE.</span>
<a name="l00032"></a>00032 <span class="comment"> *</span>
<a name="l00033"></a>00033 <span class="comment"> * This file is part of the Contiki operating system.</span>
<a name="l00034"></a>00034 <span class="comment"> *</span>
<a name="l00035"></a>00035 <span class="comment"> */</span><span class="comment"></span>
<a name="l00036"></a>00036 <span class="comment">/**</span>
<a name="l00037"></a>00037 <span class="comment"> * \file</span>
<a name="l00038"></a>00038 <span class="comment"> *         Logic for Directed Acyclic Graphs in RPL.</span>
<a name="l00039"></a>00039 <span class="comment"> *</span>
<a name="l00040"></a>00040 <span class="comment"> * \author Joakim Eriksson &lt;joakime@sics.se&gt;, Nicolas Tsiftes &lt;nvt@sics.se&gt;</span>
<a name="l00041"></a>00041 <span class="comment"> */</span>
<a name="l00042"></a>00042 
<a name="l00043"></a>00043 
<a name="l00044"></a>00044 <span class="preprocessor">#include &quot;contiki.h&quot;</span>
<a name="l00045"></a>00045 <span class="preprocessor">#include &quot;net/rpl/rpl-private.h&quot;</span>
<a name="l00046"></a>00046 <span class="preprocessor">#include &quot;<a class="code" href="a00435.html" title="Header file for the uIP TCP/IP stack.">net/uip.h</a>&quot;</span>
<a name="l00047"></a>00047 <span class="preprocessor">#include &quot;<a class="code" href="a00423.html" title="Neighbor discovery (RFC 4861)">net/uip-nd6.h</a>&quot;</span>
<a name="l00048"></a>00048 <span class="preprocessor">#include &quot;<a class="code" href="a00209.html" title="Linked list manipulation routines.">lib/list.h</a>&quot;</span>
<a name="l00049"></a>00049 <span class="preprocessor">#include &quot;<a class="code" href="a00215.html" title="Memory block allocation routines.">lib/memb.h</a>&quot;</span>
<a name="l00050"></a>00050 <span class="preprocessor">#include &quot;<a class="code" href="a00452.html" title="Header file for the callback timer.">sys/ctimer.h</a>&quot;</span>
<a name="l00051"></a>00051 
<a name="l00052"></a>00052 <span class="preprocessor">#include &lt;limits.h&gt;</span>
<a name="l00053"></a>00053 <span class="preprocessor">#include &lt;string.h&gt;</span>
<a name="l00054"></a>00054 
<a name="l00055"></a>00055 <span class="preprocessor">#define DEBUG DEBUG_NONE</span>
<a name="l00056"></a>00056 <span class="preprocessor"></span><span class="preprocessor">#include &quot;<a class="code" href="a00413.html" title="A set of debugging macros.">net/uip-debug.h</a>&quot;</span>
<a name="l00057"></a>00057 
<a name="l00058"></a>00058 <span class="preprocessor">#include &quot;<a class="code" href="a00301.html" title="Declarations for the neighbor information module.">net/neighbor-info.h</a>&quot;</span>
<a name="l00059"></a>00059 
<a name="l00060"></a>00060 <span class="comment">/************************************************************************/</span>
<a name="l00061"></a>00061 <span class="keyword">extern</span> rpl_of_t RPL_OF;
<a name="l00062"></a>00062 <span class="keyword">static</span> rpl_of_t * <span class="keyword">const</span> objective_functions[] = {&amp;RPL_OF};
<a name="l00063"></a>00063 
<a name="l00064"></a>00064 <span class="comment">/************************************************************************/</span>
<a name="l00065"></a>00065 <span class="preprocessor">#ifndef RPL_CONF_MAX_PARENTS_PER_DAG</span>
<a name="l00066"></a>00066 <span class="preprocessor"></span><span class="preprocessor">#define RPL_MAX_PARENTS_PER_DAG       8</span>
<a name="l00067"></a>00067 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00068"></a>00068 <span class="preprocessor"></span><span class="preprocessor">#define RPL_MAX_PARENTS_PER_DAG       RPL_CONF_MAX_PARENTS_PER_DAG</span>
<a name="l00069"></a>00069 <span class="preprocessor"></span><span class="preprocessor">#endif </span><span class="comment">/* !RPL_CONF_MAX_PARENTS_PER_DAG */</span>
<a name="l00070"></a>00070 
<a name="l00071"></a>00071 <span class="comment">/************************************************************************/</span>
<a name="l00072"></a>00072 <span class="comment">/* RPL definitions. */</span>
<a name="l00073"></a>00073 
<a name="l00074"></a>00074 <span class="preprocessor">#ifndef RPL_CONF_GROUNDED</span>
<a name="l00075"></a>00075 <span class="preprocessor"></span><span class="preprocessor">#define RPL_GROUNDED                    0</span>
<a name="l00076"></a>00076 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00077"></a>00077 <span class="preprocessor"></span><span class="preprocessor">#define RPL_GROUNDED                    RPL_CONF_GROUNDED</span>
<a name="l00078"></a>00078 <span class="preprocessor"></span><span class="preprocessor">#endif </span><span class="comment">/* !RPL_CONF_GROUNDED */</span>
<a name="l00079"></a>00079 
<a name="l00080"></a>00080 <span class="comment">/************************************************************************/</span>
<a name="l00081"></a>00081 <span class="comment">/* Allocate parents from the same static MEMB chunk to reduce memory waste. */</span>
<a name="l00082"></a>00082 <a class="code" href="a01880.html#gaf31774d02a69fd3f1c2b282454438cba" title="Declare a memory block.">MEMB</a>(parent_memb, <span class="keyword">struct</span> rpl_parent,
<a name="l00083"></a>00083      RPL_MAX_PARENTS_PER_DAG * RPL_MAX_INSTANCES * RPL_MAX_DAG_PER_INSTANCE);
<a name="l00084"></a>00084 <span class="comment">/************************************************************************/</span>
<a name="l00085"></a>00085 <span class="comment">/* Allocate instance table. */</span>
<a name="l00086"></a>00086 rpl_instance_t instance_table[RPL_MAX_INSTANCES];
<a name="l00087"></a>00087 rpl_instance_t *default_instance;
<a name="l00088"></a>00088 <span class="comment">/************************************************************************/</span>
<a name="l00089"></a>00089 <span class="comment">/* Greater-than function for the lollipop counter.                      */</span>
<a name="l00090"></a>00090 <span class="comment">/************************************************************************/</span>
<a name="l00091"></a>00091 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00092"></a>00092 lollipop_greater_than(<span class="keywordtype">int</span> a, <span class="keywordtype">int</span> b)
<a name="l00093"></a>00093 {
<a name="l00094"></a>00094   <span class="comment">/* Check if we are comparing an initial value with an old value */</span>
<a name="l00095"></a>00095   <span class="keywordflow">if</span>(a &gt; RPL_LOLLIPOP_CIRCULAR_REGION &amp;&amp; b &lt;= RPL_LOLLIPOP_CIRCULAR_REGION) {
<a name="l00096"></a>00096     <span class="keywordflow">return</span> (RPL_LOLLIPOP_MAX_VALUE + 1 + b - a) &gt; RPL_LOLLIPOP_SEQUENCE_WINDOWS;
<a name="l00097"></a>00097   }
<a name="l00098"></a>00098   <span class="comment">/* Otherwise check if a &gt; b and comparable =&gt; ok, or</span>
<a name="l00099"></a>00099 <span class="comment">     if they have wrapped and are still comparable */</span>
<a name="l00100"></a>00100   <span class="keywordflow">return</span> (a &gt; b &amp;&amp; (a - b) &lt; RPL_LOLLIPOP_SEQUENCE_WINDOWS) ||
<a name="l00101"></a>00101     (a &lt; b &amp;&amp; (b - a) &gt; (RPL_LOLLIPOP_CIRCULAR_REGION + 1-
<a name="l00102"></a>00102                          RPL_LOLLIPOP_SEQUENCE_WINDOWS));
<a name="l00103"></a>00103 }
<a name="l00104"></a>00104 <span class="comment">/************************************************************************/</span>
<a name="l00105"></a>00105 <span class="comment">/* Remove DAG parents with a rank that is at least the same as minimum_rank. */</span>
<a name="l00106"></a>00106 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00107"></a>00107 remove_parents(rpl_dag_t *dag, rpl_rank_t minimum_rank)
<a name="l00108"></a>00108 {
<a name="l00109"></a>00109   rpl_parent_t *p, *p2;
<a name="l00110"></a>00110 
<a name="l00111"></a>00111   PRINTF(<span class="stringliteral">&quot;RPL: Removing parents (minimum rank %u)\n&quot;</span>,
<a name="l00112"></a>00112         minimum_rank);
<a name="l00113"></a>00113 
<a name="l00114"></a>00114   <span class="keywordflow">for</span>(p = <a class="code" href="a01878.html#gacc0723982dcfcc54cfa6ba932ee63051" title="Get a pointer to the first element of a list.">list_head</a>(dag-&gt;parents); p != <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>; p = p2) {
<a name="l00115"></a>00115     p2 = p-&gt;next;
<a name="l00116"></a>00116     <span class="keywordflow">if</span>(p-&gt;rank &gt;= minimum_rank) {
<a name="l00117"></a>00117       rpl_remove_parent(dag, p);
<a name="l00118"></a>00118     }
<a name="l00119"></a>00119   }
<a name="l00120"></a>00120 }
<a name="l00121"></a>00121 <span class="comment">/************************************************************************/</span>
<a name="l00122"></a>00122 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00123"></a>00123 nullify_parents(rpl_dag_t *dag, rpl_rank_t minimum_rank)
<a name="l00124"></a>00124 {
<a name="l00125"></a>00125   rpl_parent_t *p, *p2;
<a name="l00126"></a>00126 
<a name="l00127"></a>00127   PRINTF(<span class="stringliteral">&quot;RPL: Removing parents (minimum rank %u)\n&quot;</span>,
<a name="l00128"></a>00128         minimum_rank);
<a name="l00129"></a>00129 
<a name="l00130"></a>00130   <span class="keywordflow">for</span>(p = <a class="code" href="a01878.html#gacc0723982dcfcc54cfa6ba932ee63051" title="Get a pointer to the first element of a list.">list_head</a>(dag-&gt;parents); p != <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>; p = p2) {
<a name="l00131"></a>00131     p2 = p-&gt;next;
<a name="l00132"></a>00132     <span class="keywordflow">if</span>(p-&gt;rank &gt;= minimum_rank) {
<a name="l00133"></a>00133       rpl_nullify_parent(dag, p);
<a name="l00134"></a>00134     }
<a name="l00135"></a>00135   }
<a name="l00136"></a>00136 }
<a name="l00137"></a>00137 <span class="comment">/************************************************************************/</span>
<a name="l00138"></a>00138 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00139"></a>00139 remove_worst_parent(rpl_dag_t *dag, rpl_rank_t min_worst_rank)
<a name="l00140"></a>00140 {
<a name="l00141"></a>00141   rpl_parent_t *p, *worst;
<a name="l00142"></a>00142 
<a name="l00143"></a>00143   PRINTF(<span class="stringliteral">&quot;RPL: Removing the worst parent\n&quot;</span>);
<a name="l00144"></a>00144 
<a name="l00145"></a>00145   <span class="comment">/* Find the parent with the highest rank. */</span>
<a name="l00146"></a>00146   worst = <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>;
<a name="l00147"></a>00147   <span class="keywordflow">for</span>(p = <a class="code" href="a01878.html#gacc0723982dcfcc54cfa6ba932ee63051" title="Get a pointer to the first element of a list.">list_head</a>(dag-&gt;parents); p != <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>; p = <a class="code" href="a01878.html#gae9c13698f6fd8620561f0d1124ec8cdf" title="Get the next item following this item.">list_item_next</a>(p)) {
<a name="l00148"></a>00148     <span class="keywordflow">if</span>(p != dag-&gt;preferred_parent &amp;&amp;
<a name="l00149"></a>00149        (worst == <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a> || p-&gt;rank &gt; worst-&gt;rank)) {
<a name="l00150"></a>00150       worst = p;
<a name="l00151"></a>00151     }
<a name="l00152"></a>00152   }
<a name="l00153"></a>00153   <span class="comment">/* Remove the neighbor if its rank is worse than the minimum worst rank. */</span>
<a name="l00154"></a>00154   <span class="keywordflow">if</span>(worst != <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a> &amp;&amp; worst-&gt;rank &gt; min_worst_rank) {
<a name="l00155"></a>00155     rpl_remove_parent(dag, worst);
<a name="l00156"></a>00156   }
<a name="l00157"></a>00157 }
<a name="l00158"></a>00158 <span class="comment">/************************************************************************/</span>
<a name="l00159"></a>00159 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00160"></a>00160 should_send_dao(rpl_instance_t *instance, rpl_dio_t *dio, rpl_parent_t *p)
<a name="l00161"></a>00161 {
<a name="l00162"></a>00162   <span class="comment">/* if MOP is set to no downward routes no DAO should be sent */</span>
<a name="l00163"></a>00163   <span class="keywordflow">if</span>(instance-&gt;mop == RPL_MOP_NO_DOWNWARD_ROUTES) {
<a name="l00164"></a>00164     <span class="keywordflow">return</span> 0;
<a name="l00165"></a>00165   }
<a name="l00166"></a>00166   <span class="comment">/* check if the new DTSN is more recent */</span>
<a name="l00167"></a>00167   <span class="keywordflow">return</span> p == instance-&gt;current_dag-&gt;preferred_parent &amp;&amp;
<a name="l00168"></a>00168     (lollipop_greater_than(dio-&gt;dtsn, p-&gt;dtsn));
<a name="l00169"></a>00169 }
<a name="l00170"></a>00170 <span class="comment">/************************************************************************/</span>
<a name="l00171"></a>00171 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00172"></a>00172 acceptable_rank(rpl_dag_t *dag, rpl_rank_t rank)
<a name="l00173"></a>00173 {
<a name="l00174"></a>00174   <span class="keywordflow">return</span> rank != INFINITE_RANK &amp;&amp;
<a name="l00175"></a>00175     ((dag-&gt;instance-&gt;max_rankinc == 0) ||
<a name="l00176"></a>00176      DAG_RANK(rank, dag-&gt;instance) &lt;= DAG_RANK(dag-&gt;min_rank + dag-&gt;instance-&gt;max_rankinc, dag-&gt;instance));
<a name="l00177"></a>00177 }
<a name="l00178"></a>00178 <span class="comment">/************************************************************************/</span>
<a name="l00179"></a>00179 <span class="keyword">static</span> rpl_dag_t *
<a name="l00180"></a>00180 get_dag(uint8_t instance_id, <a class="code" href="a00112.html" title="Representation of an IP address.">uip_ipaddr_t</a> *dag_id)
<a name="l00181"></a>00181 {
<a name="l00182"></a>00182   rpl_instance_t *instance;
<a name="l00183"></a>00183   rpl_dag_t *dag;
<a name="l00184"></a>00184   <span class="keywordtype">int</span> i;
<a name="l00185"></a>00185 
<a name="l00186"></a>00186   instance = rpl_get_instance(instance_id);
<a name="l00187"></a>00187   <span class="keywordflow">if</span>(instance == <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>) {
<a name="l00188"></a>00188     <span class="keywordflow">return</span> <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>;
<a name="l00189"></a>00189   }
<a name="l00190"></a>00190 
<a name="l00191"></a>00191   <span class="keywordflow">for</span>(i = 0; i &lt; RPL_MAX_DAG_PER_INSTANCE; ++i) {
<a name="l00192"></a>00192     dag = &amp;instance-&gt;dag_table[i];
<a name="l00193"></a>00193     <span class="keywordflow">if</span>(dag-&gt;used &amp;&amp; <a class="code" href="a01815.html#ga210e629f7252e4bc8458cbdf260b3318" title="Copy an IP address from one place to another.">uip_ipaddr_cmp</a>(&amp;dag-&gt;dag_id, dag_id)) {
<a name="l00194"></a>00194       <span class="keywordflow">return</span> dag;
<a name="l00195"></a>00195     }
<a name="l00196"></a>00196   }
<a name="l00197"></a>00197 
<a name="l00198"></a>00198   <span class="keywordflow">return</span> <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>;
<a name="l00199"></a>00199 }
<a name="l00200"></a>00200 <span class="comment">/************************************************************************/</span>
<a name="l00201"></a>00201 rpl_dag_t *
<a name="l00202"></a>00202 rpl_set_root(uint8_t instance_id, <a class="code" href="a00112.html" title="Representation of an IP address.">uip_ipaddr_t</a> *dag_id)
<a name="l00203"></a>00203 {
<a name="l00204"></a>00204   rpl_dag_t *dag;
<a name="l00205"></a>00205   rpl_instance_t *instance;
<a name="l00206"></a>00206   uint8_t version;
<a name="l00207"></a>00207 
<a name="l00208"></a>00208   version = RPL_LOLLIPOP_INIT;
<a name="l00209"></a>00209   dag = get_dag(instance_id, dag_id);
<a name="l00210"></a>00210   <span class="keywordflow">if</span>(dag != <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>) {
<a name="l00211"></a>00211     version = dag-&gt;version;
<a name="l00212"></a>00212     RPL_LOLLIPOP_INCREMENT(version);
<a name="l00213"></a>00213     PRINTF(<span class="stringliteral">&quot;RPL: Dropping a joined DAG when setting this node as root&quot;</span>);
<a name="l00214"></a>00214     <span class="keywordflow">if</span>(dag == dag-&gt;instance-&gt;current_dag) {
<a name="l00215"></a>00215       dag-&gt;instance-&gt;current_dag = <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>;
<a name="l00216"></a>00216     }
<a name="l00217"></a>00217     rpl_free_dag(dag);
<a name="l00218"></a>00218   }
<a name="l00219"></a>00219 
<a name="l00220"></a>00220   dag = rpl_alloc_dag(instance_id, dag_id);
<a name="l00221"></a>00221   <span class="keywordflow">if</span>(dag == <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>) {
<a name="l00222"></a>00222     PRINTF(<span class="stringliteral">&quot;RPL: Failed to allocate a DAG\n&quot;</span>);
<a name="l00223"></a>00223     <span class="keywordflow">return</span> <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>;
<a name="l00224"></a>00224   }
<a name="l00225"></a>00225 
<a name="l00226"></a>00226   instance = dag-&gt;instance;
<a name="l00227"></a>00227 
<a name="l00228"></a>00228   dag-&gt;version = version;
<a name="l00229"></a>00229   dag-&gt;joined = 1;
<a name="l00230"></a>00230   dag-&gt;grounded = RPL_GROUNDED;
<a name="l00231"></a>00231   instance-&gt;mop = RPL_MOP_DEFAULT;
<a name="l00232"></a>00232   instance-&gt;of = &amp;RPL_OF;
<a name="l00233"></a>00233   dag-&gt;preferred_parent = <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>;
<a name="l00234"></a>00234 
<a name="l00235"></a>00235   memcpy(&amp;dag-&gt;dag_id, dag_id, <span class="keyword">sizeof</span>(dag-&gt;dag_id));
<a name="l00236"></a>00236 
<a name="l00237"></a>00237   instance-&gt;dio_intdoubl = RPL_DIO_INTERVAL_DOUBLINGS;
<a name="l00238"></a>00238   instance-&gt;dio_intmin = RPL_DIO_INTERVAL_MIN;
<a name="l00239"></a>00239   <span class="comment">/* The current interval must differ from the minimum interval in order to</span>
<a name="l00240"></a>00240 <span class="comment">     trigger a DIO timer reset. */</span>
<a name="l00241"></a>00241   instance-&gt;dio_intcurrent = RPL_DIO_INTERVAL_MIN +
<a name="l00242"></a>00242     RPL_DIO_INTERVAL_DOUBLINGS;
<a name="l00243"></a>00243   instance-&gt;dio_redundancy = RPL_DIO_REDUNDANCY;
<a name="l00244"></a>00244   instance-&gt;max_rankinc = RPL_MAX_RANKINC;
<a name="l00245"></a>00245   instance-&gt;min_hoprankinc = RPL_MIN_HOPRANKINC;
<a name="l00246"></a>00246   instance-&gt;default_lifetime = RPL_DEFAULT_LIFETIME;
<a name="l00247"></a>00247   instance-&gt;lifetime_unit = RPL_DEFAULT_LIFETIME_UNIT;
<a name="l00248"></a>00248 
<a name="l00249"></a>00249   dag-&gt;rank = ROOT_RANK(instance);
<a name="l00250"></a>00250 
<a name="l00251"></a>00251   <span class="keywordflow">if</span>(instance-&gt;current_dag != dag &amp;&amp; instance-&gt;current_dag != <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>) {
<a name="l00252"></a>00252     <span class="comment">/* Remove routes installed by DAOs. */</span>
<a name="l00253"></a>00253     rpl_remove_routes(instance-&gt;current_dag);
<a name="l00254"></a>00254 
<a name="l00255"></a>00255     instance-&gt;current_dag-&gt;joined = 0;
<a name="l00256"></a>00256   }
<a name="l00257"></a>00257 
<a name="l00258"></a>00258   instance-&gt;current_dag = dag;
<a name="l00259"></a>00259   instance-&gt;dtsn_out = RPL_LOLLIPOP_INIT;
<a name="l00260"></a>00260   instance-&gt;of-&gt;update_metric_container(instance);
<a name="l00261"></a>00261   default_instance = instance;
<a name="l00262"></a>00262 
<a name="l00263"></a>00263   PRINTF(<span class="stringliteral">&quot;RPL: Node set to be a DAG root with DAG ID &quot;</span>);
<a name="l00264"></a>00264   PRINT6ADDR(&amp;dag-&gt;dag_id);
<a name="l00265"></a>00265   PRINTF(<span class="stringliteral">&quot;\n&quot;</span>);
<a name="l00266"></a>00266 
<a name="l00267"></a>00267   ANNOTATE(<span class="stringliteral">&quot;#A root=%u\n&quot;</span>, dag-&gt;dag_id.u8[<span class="keyword">sizeof</span>(dag-&gt;dag_id) - 1]);
<a name="l00268"></a>00268 
<a name="l00269"></a>00269   rpl_reset_dio_timer(instance);
<a name="l00270"></a>00270 
<a name="l00271"></a>00271   <span class="keywordflow">return</span> dag;
<a name="l00272"></a>00272 }
<a name="l00273"></a>00273 <span class="comment">/************************************************************************/</span>
<a name="l00274"></a>00274 <span class="keywordtype">int</span>
<a name="l00275"></a>00275 rpl_repair_root(uint8_t instance_id)
<a name="l00276"></a>00276 {
<a name="l00277"></a>00277   rpl_instance_t *instance;
<a name="l00278"></a>00278 
<a name="l00279"></a>00279   instance = rpl_get_instance(instance_id);
<a name="l00280"></a>00280   <span class="keywordflow">if</span>(instance == <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a> ||
<a name="l00281"></a>00281      instance-&gt;current_dag-&gt;rank != ROOT_RANK(instance)) {
<a name="l00282"></a>00282     <span class="keywordflow">return</span> 0;
<a name="l00283"></a>00283   }
<a name="l00284"></a>00284 
<a name="l00285"></a>00285   RPL_LOLLIPOP_INCREMENT(instance-&gt;current_dag-&gt;version);
<a name="l00286"></a>00286   RPL_LOLLIPOP_INCREMENT(instance-&gt;dtsn_out);
<a name="l00287"></a>00287   rpl_reset_dio_timer(instance);
<a name="l00288"></a>00288   <span class="keywordflow">return</span> 1;
<a name="l00289"></a>00289 }
<a name="l00290"></a>00290 <span class="comment">/************************************************************************/</span>
<a name="l00291"></a>00291 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00292"></a>00292 set_ip_from_prefix(<a class="code" href="a00112.html" title="Representation of an IP address.">uip_ipaddr_t</a> *ipaddr, rpl_prefix_t *prefix)
<a name="l00293"></a>00293 {
<a name="l00294"></a>00294   memset(ipaddr, 0, <span class="keyword">sizeof</span>(<a class="code" href="a00112.html" title="Representation of an IP address.">uip_ipaddr_t</a>));
<a name="l00295"></a>00295   memcpy(ipaddr, &amp;prefix-&gt;prefix, (prefix-&gt;length + 7) / 8);
<a name="l00296"></a>00296   <a class="code" href="a01929.html#gabbe961bbeaea80289fddf448a542fea9" title="set the last 64 bits of an IP address based on the MAC address">uip_ds6_set_addr_iid</a>(ipaddr, &amp;<a class="code" href="a01926.html#ga89bf167a9f1014d2d78754742eb7e06d" title="Host L2 address.">uip_lladdr</a>);
<a name="l00297"></a>00297 }
<a name="l00298"></a>00298 <span class="comment">/************************************************************************/</span>
<a name="l00299"></a>00299 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00300"></a>00300 check_prefix(rpl_prefix_t *last_prefix, rpl_prefix_t *new_prefix)
<a name="l00301"></a>00301 {
<a name="l00302"></a>00302   <a class="code" href="a00112.html" title="Representation of an IP address.">uip_ipaddr_t</a> ipaddr;
<a name="l00303"></a>00303   <a class="code" href="a00100.html" title="*">uip_ds6_addr_t</a> *rep;
<a name="l00304"></a>00304 
<a name="l00305"></a>00305   <span class="keywordflow">if</span>(last_prefix != <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a> &amp;&amp; new_prefix != <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a> &amp;&amp;
<a name="l00306"></a>00306      last_prefix-&gt;length == new_prefix-&gt;length &amp;&amp;
<a name="l00307"></a>00307      uip_ipaddr_prefixcmp(&amp;last_prefix-&gt;prefix, &amp;new_prefix-&gt;prefix, new_prefix-&gt;length) &amp;&amp;
<a name="l00308"></a>00308      last_prefix-&gt;flags == new_prefix-&gt;flags) {
<a name="l00309"></a>00309     <span class="comment">/* Nothing has changed. */</span>
<a name="l00310"></a>00310     <span class="keywordflow">return</span>;
<a name="l00311"></a>00311   }
<a name="l00312"></a>00312 
<a name="l00313"></a>00313   <span class="keywordflow">if</span>(last_prefix != <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>) {
<a name="l00314"></a>00314     set_ip_from_prefix(&amp;ipaddr, last_prefix);
<a name="l00315"></a>00315     rep = uip_ds6_addr_lookup(&amp;ipaddr);
<a name="l00316"></a>00316     <span class="keywordflow">if</span>(rep != <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>) {
<a name="l00317"></a>00317       PRINTF(<span class="stringliteral">&quot;RPL: removing global IP address &quot;</span>);
<a name="l00318"></a>00318       PRINT6ADDR(&amp;ipaddr);
<a name="l00319"></a>00319       PRINTF(<span class="stringliteral">&quot;\n&quot;</span>);
<a name="l00320"></a>00320       uip_ds6_addr_rm(rep);
<a name="l00321"></a>00321     }
<a name="l00322"></a>00322   }
<a name="l00323"></a>00323   
<a name="l00324"></a>00324   <span class="keywordflow">if</span>(new_prefix != <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>) {
<a name="l00325"></a>00325     set_ip_from_prefix(&amp;ipaddr, new_prefix);
<a name="l00326"></a>00326     <span class="keywordflow">if</span>(uip_ds6_addr_lookup(&amp;ipaddr) == <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>) {
<a name="l00327"></a>00327       PRINTF(<span class="stringliteral">&quot;RPL: adding global IP address &quot;</span>);
<a name="l00328"></a>00328       PRINT6ADDR(&amp;ipaddr);
<a name="l00329"></a>00329       PRINTF(<span class="stringliteral">&quot;\n&quot;</span>);
<a name="l00330"></a>00330       <a class="code" href="a01929.html#ga801390b5dced9a4601cc1c4f9baa08be">uip_ds6_addr_add</a>(&amp;ipaddr, 0, ADDR_AUTOCONF);
<a name="l00331"></a>00331     }
<a name="l00332"></a>00332   }
<a name="l00333"></a>00333 }
<a name="l00334"></a>00334 <span class="comment">/************************************************************************/</span>
<a name="l00335"></a>00335 <span class="keywordtype">int</span>
<a name="l00336"></a>00336 rpl_set_prefix(rpl_dag_t *dag, <a class="code" href="a00112.html" title="Representation of an IP address.">uip_ipaddr_t</a> *prefix, <span class="keywordtype">unsigned</span> len)
<a name="l00337"></a>00337 {
<a name="l00338"></a>00338   <span class="keywordflow">if</span>(len &gt; 128) {
<a name="l00339"></a>00339     <span class="keywordflow">return</span> 0;
<a name="l00340"></a>00340   }
<a name="l00341"></a>00341 
<a name="l00342"></a>00342   memset(&amp;dag-&gt;prefix_info.prefix, 0, <span class="keyword">sizeof</span>(dag-&gt;prefix_info.prefix));
<a name="l00343"></a>00343   memcpy(&amp;dag-&gt;prefix_info.prefix, prefix, (len + 7) / 8);
<a name="l00344"></a>00344   dag-&gt;prefix_info.length = len;
<a name="l00345"></a>00345   dag-&gt;prefix_info.flags = UIP_ND6_RA_FLAG_AUTONOMOUS;
<a name="l00346"></a>00346   PRINTF(<span class="stringliteral">&quot;RPL: Prefix set - will announce this in DIOs\n&quot;</span>);
<a name="l00347"></a>00347   <span class="comment">/* Autoconfigure an address if this node does not already have an address</span>
<a name="l00348"></a>00348 <span class="comment">     with this prefix. */</span>
<a name="l00349"></a>00349   check_prefix(<a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>, &amp;dag-&gt;prefix_info);
<a name="l00350"></a>00350   <span class="keywordflow">return</span> 1;
<a name="l00351"></a>00351 }
<a name="l00352"></a>00352 <span class="comment">/************************************************************************/</span>
<a name="l00353"></a>00353 <span class="keywordtype">int</span>
<a name="l00354"></a>00354 rpl_set_default_route(rpl_instance_t *instance, <a class="code" href="a00112.html" title="Representation of an IP address.">uip_ipaddr_t</a> *from)
<a name="l00355"></a>00355 {
<a name="l00356"></a>00356   <span class="keywordflow">if</span>(instance-&gt;def_route != <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>) {
<a name="l00357"></a>00357     <span class="keywordflow">if</span>(instance-&gt;def_route-&gt;isused) {
<a name="l00358"></a>00358       PRINTF(<span class="stringliteral">&quot;RPL: Removing default route through &quot;</span>);
<a name="l00359"></a>00359       PRINT6ADDR(&amp;instance-&gt;def_route-&gt;ipaddr);
<a name="l00360"></a>00360       PRINTF(<span class="stringliteral">&quot;\n&quot;</span>);
<a name="l00361"></a>00361       uip_ds6_defrt_rm(instance-&gt;def_route);
<a name="l00362"></a>00362     }
<a name="l00363"></a>00363     instance-&gt;def_route = <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>;
<a name="l00364"></a>00364   }
<a name="l00365"></a>00365 
<a name="l00366"></a>00366   <span class="keywordflow">if</span>(from != <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>) {
<a name="l00367"></a>00367     PRINTF(<span class="stringliteral">&quot;RPL: Adding default route through &quot;</span>);
<a name="l00368"></a>00368     PRINT6ADDR(from);
<a name="l00369"></a>00369     PRINTF(<span class="stringliteral">&quot;\n&quot;</span>);
<a name="l00370"></a>00370     instance-&gt;def_route = <a class="code" href="a01929.html#ga9e6a00e971cd3230e410522e8c60c95a">uip_ds6_defrt_add</a>(from,
<a name="l00371"></a>00371                                             RPL_LIFETIME(instance,
<a name="l00372"></a>00372                                                          instance-&gt;default_lifetime));
<a name="l00373"></a>00373     <span class="keywordflow">if</span>(instance-&gt;def_route == <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>) {
<a name="l00374"></a>00374       <span class="keywordflow">return</span> 0;
<a name="l00375"></a>00375     }
<a name="l00376"></a>00376   }
<a name="l00377"></a>00377   <span class="keywordflow">return</span> 1;
<a name="l00378"></a>00378 }
<a name="l00379"></a>00379 <span class="comment">/************************************************************************/</span>
<a name="l00380"></a>00380 rpl_instance_t *
<a name="l00381"></a>00381 rpl_alloc_instance(uint8_t instance_id)
<a name="l00382"></a>00382 {
<a name="l00383"></a>00383   rpl_instance_t *instance, *end;
<a name="l00384"></a>00384 
<a name="l00385"></a>00385   <span class="keywordflow">for</span>(instance = &amp;instance_table[0], end = instance + RPL_MAX_INSTANCES; instance &lt; end; ++instance) {
<a name="l00386"></a>00386     <span class="keywordflow">if</span>(instance-&gt;used == 0) {
<a name="l00387"></a>00387       memset(instance, 0, <span class="keyword">sizeof</span>(*instance));
<a name="l00388"></a>00388       instance-&gt;instance_id = instance_id;
<a name="l00389"></a>00389       instance-&gt;def_route = <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>;
<a name="l00390"></a>00390       instance-&gt;used = 1;
<a name="l00391"></a>00391       <span class="keywordflow">return</span> instance;
<a name="l00392"></a>00392     }
<a name="l00393"></a>00393   }
<a name="l00394"></a>00394   <span class="keywordflow">return</span> <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>;
<a name="l00395"></a>00395 }
<a name="l00396"></a>00396 <span class="comment">/************************************************************************/</span>
<a name="l00397"></a>00397 rpl_dag_t *
<a name="l00398"></a>00398 rpl_alloc_dag(uint8_t instance_id, <a class="code" href="a00112.html" title="Representation of an IP address.">uip_ipaddr_t</a> *dag_id)
<a name="l00399"></a>00399 {
<a name="l00400"></a>00400   rpl_dag_t *dag, *end;
<a name="l00401"></a>00401   rpl_instance_t *instance;
<a name="l00402"></a>00402 
<a name="l00403"></a>00403   instance = rpl_get_instance(instance_id);
<a name="l00404"></a>00404   <span class="keywordflow">if</span>(instance == <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>) {
<a name="l00405"></a>00405     instance = rpl_alloc_instance(instance_id);
<a name="l00406"></a>00406     <span class="keywordflow">if</span>(instance == <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>) {
<a name="l00407"></a>00407       RPL_STAT(rpl_stats.mem_overflows++);
<a name="l00408"></a>00408       <span class="keywordflow">return</span> <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>;
<a name="l00409"></a>00409     }
<a name="l00410"></a>00410   }
<a name="l00411"></a>00411 
<a name="l00412"></a>00412   <span class="keywordflow">for</span>(dag = &amp;instance-&gt;dag_table[0], end = dag + RPL_MAX_DAG_PER_INSTANCE; dag &lt; end; ++dag) {
<a name="l00413"></a>00413     <span class="keywordflow">if</span>(!dag-&gt;used) {
<a name="l00414"></a>00414       memset(dag, 0, <span class="keyword">sizeof</span>(*dag));
<a name="l00415"></a>00415       <a class="code" href="a01878.html#gadcb86fe4485a0f8ea79541117641f730" title="Initialize a linked list that is part of a structure.">LIST_STRUCT_INIT</a>(dag, parents);
<a name="l00416"></a>00416       dag-&gt;used = 1;
<a name="l00417"></a>00417       dag-&gt;rank = INFINITE_RANK;
<a name="l00418"></a>00418       dag-&gt;min_rank = INFINITE_RANK;
<a name="l00419"></a>00419       dag-&gt;instance = instance;
<a name="l00420"></a>00420       <span class="keywordflow">return</span> dag;
<a name="l00421"></a>00421     }
<a name="l00422"></a>00422   }
<a name="l00423"></a>00423 
<a name="l00424"></a>00424   RPL_STAT(rpl_stats.mem_overflows++);
<a name="l00425"></a>00425   rpl_free_instance(instance);
<a name="l00426"></a>00426   <span class="keywordflow">return</span> <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>;
<a name="l00427"></a>00427 }
<a name="l00428"></a>00428 <span class="comment">/************************************************************************/</span>
<a name="l00429"></a>00429 <span class="keywordtype">void</span>
<a name="l00430"></a>00430 rpl_set_default_instance(rpl_instance_t *instance)
<a name="l00431"></a>00431 {
<a name="l00432"></a>00432   default_instance = instance;
<a name="l00433"></a>00433 }
<a name="l00434"></a>00434 <span class="comment">/************************************************************************/</span>
<a name="l00435"></a>00435 <span class="keywordtype">void</span>
<a name="l00436"></a>00436 rpl_free_instance(rpl_instance_t *instance)
<a name="l00437"></a>00437 {
<a name="l00438"></a>00438   rpl_dag_t *dag;
<a name="l00439"></a>00439   rpl_dag_t *end;
<a name="l00440"></a>00440 
<a name="l00441"></a>00441   PRINTF(<span class="stringliteral">&quot;RPL: Leaving the instance %u\n&quot;</span>, instance-&gt;instance_id);
<a name="l00442"></a>00442 
<a name="l00443"></a>00443   <span class="comment">/* Remove any DAG inside this instance */</span>
<a name="l00444"></a>00444   <span class="keywordflow">for</span>(dag = &amp;instance-&gt;dag_table[0], end = dag + RPL_MAX_DAG_PER_INSTANCE; dag &lt; end; ++dag) {
<a name="l00445"></a>00445     <span class="keywordflow">if</span>(dag-&gt;used) {
<a name="l00446"></a>00446       rpl_free_dag(dag);
<a name="l00447"></a>00447     }
<a name="l00448"></a>00448   }
<a name="l00449"></a>00449 
<a name="l00450"></a>00450   rpl_set_default_route(instance, <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>);
<a name="l00451"></a>00451 
<a name="l00452"></a>00452   <a class="code" href="a01861.html#ga18f970561c46fe308991fcf8002838b4" title="Stop a pending callback timer.">ctimer_stop</a>(&amp;instance-&gt;dio_timer);
<a name="l00453"></a>00453   <a class="code" href="a01861.html#ga18f970561c46fe308991fcf8002838b4" title="Stop a pending callback timer.">ctimer_stop</a>(&amp;instance-&gt;dao_timer);
<a name="l00454"></a>00454 
<a name="l00455"></a>00455   <span class="keywordflow">if</span>(default_instance == instance) {
<a name="l00456"></a>00456     default_instance = <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>;
<a name="l00457"></a>00457   }
<a name="l00458"></a>00458 
<a name="l00459"></a>00459   instance-&gt;used = 0;
<a name="l00460"></a>00460 }
<a name="l00461"></a>00461 <span class="comment">/************************************************************************/</span>
<a name="l00462"></a>00462 <span class="keywordtype">void</span>
<a name="l00463"></a>00463 rpl_free_dag(rpl_dag_t *dag)
<a name="l00464"></a>00464 {
<a name="l00465"></a>00465   <span class="keywordflow">if</span>(dag-&gt;joined) {
<a name="l00466"></a>00466     PRINTF(<span class="stringliteral">&quot;RPL: Leaving the DAG &quot;</span>);
<a name="l00467"></a>00467     PRINT6ADDR(&amp;dag-&gt;dag_id);
<a name="l00468"></a>00468     PRINTF(<span class="stringliteral">&quot;\n&quot;</span>);
<a name="l00469"></a>00469     dag-&gt;joined = 0;
<a name="l00470"></a>00470 
<a name="l00471"></a>00471     <span class="comment">/* Remove routes installed by DAOs. */</span>
<a name="l00472"></a>00472     rpl_remove_routes(dag);
<a name="l00473"></a>00473 
<a name="l00474"></a>00474    <span class="comment">/* Remove autoconfigured address */</span>
<a name="l00475"></a>00475     <span class="keywordflow">if</span>((dag-&gt;prefix_info.flags &amp; UIP_ND6_RA_FLAG_AUTONOMOUS)) {
<a name="l00476"></a>00476       check_prefix(&amp;dag-&gt;prefix_info, <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>);
<a name="l00477"></a>00477     }
<a name="l00478"></a>00478 
<a name="l00479"></a>00479     remove_parents(dag, 0);
<a name="l00480"></a>00480   }
<a name="l00481"></a>00481   dag-&gt;used = 0;
<a name="l00482"></a>00482 }
<a name="l00483"></a>00483 <span class="comment">/************************************************************************/</span>
<a name="l00484"></a>00484 rpl_parent_t *
<a name="l00485"></a>00485 rpl_add_parent(rpl_dag_t *dag, rpl_dio_t *dio, <a class="code" href="a00112.html" title="Representation of an IP address.">uip_ipaddr_t</a> *addr)
<a name="l00486"></a>00486 {
<a name="l00487"></a>00487   rpl_parent_t *p;
<a name="l00488"></a>00488 
<a name="l00489"></a>00489   <span class="keywordflow">if</span>(RPL_PARENT_COUNT(dag) == RPL_MAX_PARENTS_PER_DAG) {
<a name="l00490"></a>00490     <span class="keywordflow">return</span> <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>;
<a name="l00491"></a>00491   }
<a name="l00492"></a>00492 
<a name="l00493"></a>00493   p = <a class="code" href="a01880.html#ga9eb12536c921ee25d3886ed9640fe6fe" title="Allocate a memory block from a block of memory declared with MEMB().">memb_alloc</a>(&amp;parent_memb);
<a name="l00494"></a>00494   <span class="keywordflow">if</span>(p == <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>) {
<a name="l00495"></a>00495     RPL_STAT(rpl_stats.mem_overflows++);
<a name="l00496"></a>00496     <span class="keywordflow">return</span> <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>;
<a name="l00497"></a>00497   }
<a name="l00498"></a>00498   memcpy(&amp;p-&gt;addr, addr, <span class="keyword">sizeof</span>(p-&gt;addr));
<a name="l00499"></a>00499   p-&gt;dag = dag;
<a name="l00500"></a>00500   p-&gt;rank = dio-&gt;rank;
<a name="l00501"></a>00501   p-&gt;dtsn = dio-&gt;dtsn;
<a name="l00502"></a>00502   p-&gt;link_metric = INITIAL_LINK_METRIC;
<a name="l00503"></a>00503   memcpy(&amp;p-&gt;mc, &amp;dio-&gt;mc, <span class="keyword">sizeof</span>(p-&gt;mc));
<a name="l00504"></a>00504   <a class="code" href="a01878.html#ga775c0dfc08dca991297df7b419b7be43" title="Add an item at the end of a list.">list_add</a>(dag-&gt;parents, p);
<a name="l00505"></a>00505   <span class="keywordflow">return</span> p;
<a name="l00506"></a>00506 }
<a name="l00507"></a>00507 <span class="comment">/************************************************************************/</span>
<a name="l00508"></a>00508 rpl_parent_t *
<a name="l00509"></a>00509 rpl_find_parent(rpl_dag_t *dag, <a class="code" href="a00112.html" title="Representation of an IP address.">uip_ipaddr_t</a> *addr)
<a name="l00510"></a>00510 {
<a name="l00511"></a>00511   rpl_parent_t *p;
<a name="l00512"></a>00512 
<a name="l00513"></a>00513   <span class="keywordflow">for</span>(p = <a class="code" href="a01878.html#gacc0723982dcfcc54cfa6ba932ee63051" title="Get a pointer to the first element of a list.">list_head</a>(dag-&gt;parents); p != <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>; p = p-&gt;next) {
<a name="l00514"></a>00514     <span class="keywordflow">if</span>(<a class="code" href="a01815.html#ga210e629f7252e4bc8458cbdf260b3318" title="Copy an IP address from one place to another.">uip_ipaddr_cmp</a>(&amp;p-&gt;addr, addr)) {
<a name="l00515"></a>00515       <span class="keywordflow">return</span> p;
<a name="l00516"></a>00516     }
<a name="l00517"></a>00517   }
<a name="l00518"></a>00518   <span class="keywordflow">return</span> <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>;
<a name="l00519"></a>00519 }
<a name="l00520"></a>00520 
<a name="l00521"></a>00521 <span class="comment">/************************************************************************/</span>
<a name="l00522"></a>00522 <span class="keyword">static</span> rpl_dag_t *
<a name="l00523"></a>00523 find_parent_dag(rpl_instance_t *instance, <a class="code" href="a00112.html" title="Representation of an IP address.">uip_ipaddr_t</a> *addr)
<a name="l00524"></a>00524 {
<a name="l00525"></a>00525   rpl_parent_t *p;
<a name="l00526"></a>00526   rpl_dag_t *dag, *end;
<a name="l00527"></a>00527 
<a name="l00528"></a>00528   <span class="keywordflow">for</span>(dag = &amp;instance-&gt;dag_table[0], end = dag + RPL_MAX_DAG_PER_INSTANCE; dag &lt; end; ++dag) {
<a name="l00529"></a>00529     <span class="keywordflow">if</span>(dag-&gt;used) {
<a name="l00530"></a>00530       <span class="keywordflow">for</span>(p = <a class="code" href="a01878.html#gacc0723982dcfcc54cfa6ba932ee63051" title="Get a pointer to the first element of a list.">list_head</a>(dag-&gt;parents); p != <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>; p = p-&gt;next) {
<a name="l00531"></a>00531         <span class="keywordflow">if</span>(<a class="code" href="a01815.html#ga210e629f7252e4bc8458cbdf260b3318" title="Copy an IP address from one place to another.">uip_ipaddr_cmp</a>(&amp;p-&gt;addr, addr)) {
<a name="l00532"></a>00532           <span class="keywordflow">return</span> dag;
<a name="l00533"></a>00533         }
<a name="l00534"></a>00534       }
<a name="l00535"></a>00535     }
<a name="l00536"></a>00536   }
<a name="l00537"></a>00537   <span class="keywordflow">return</span> <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>;
<a name="l00538"></a>00538 }
<a name="l00539"></a>00539 <span class="comment">/************************************************************************/</span>
<a name="l00540"></a>00540 rpl_parent_t *
<a name="l00541"></a>00541 rpl_find_parent_any_dag(rpl_instance_t *instance, <a class="code" href="a00112.html" title="Representation of an IP address.">uip_ipaddr_t</a> *addr)
<a name="l00542"></a>00542 {
<a name="l00543"></a>00543   rpl_parent_t *p;
<a name="l00544"></a>00544   rpl_dag_t *dag, *end;
<a name="l00545"></a>00545 
<a name="l00546"></a>00546   <span class="keywordflow">for</span>(dag = &amp;instance-&gt;dag_table[0], end = dag + RPL_MAX_DAG_PER_INSTANCE; dag &lt; end; ++dag) {
<a name="l00547"></a>00547     <span class="keywordflow">if</span>(dag-&gt;used) {
<a name="l00548"></a>00548       <span class="keywordflow">for</span>(p = <a class="code" href="a01878.html#gacc0723982dcfcc54cfa6ba932ee63051" title="Get a pointer to the first element of a list.">list_head</a>(dag-&gt;parents); p != <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>; p = p-&gt;next) {
<a name="l00549"></a>00549         <span class="keywordflow">if</span>(<a class="code" href="a01815.html#ga210e629f7252e4bc8458cbdf260b3318" title="Copy an IP address from one place to another.">uip_ipaddr_cmp</a>(&amp;p-&gt;addr, addr)) {
<a name="l00550"></a>00550           <span class="keywordflow">return</span> p;
<a name="l00551"></a>00551         }
<a name="l00552"></a>00552       }
<a name="l00553"></a>00553     }
<a name="l00554"></a>00554   }
<a name="l00555"></a>00555   <span class="keywordflow">return</span> <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>;
<a name="l00556"></a>00556 }
<a name="l00557"></a>00557 <span class="comment">/************************************************************************/</span>
<a name="l00558"></a>00558 rpl_dag_t *
<a name="l00559"></a>00559 rpl_select_dag(rpl_instance_t *instance, rpl_parent_t *p)
<a name="l00560"></a>00560 {
<a name="l00561"></a>00561   rpl_parent_t *last_parent;
<a name="l00562"></a>00562   rpl_dag_t *dag, *end, *best_dag;
<a name="l00563"></a>00563   rpl_rank_t old_rank;
<a name="l00564"></a>00564 
<a name="l00565"></a>00565   old_rank = instance-&gt;current_dag-&gt;rank;
<a name="l00566"></a>00566   last_parent = instance-&gt;current_dag-&gt;preferred_parent;
<a name="l00567"></a>00567 
<a name="l00568"></a>00568   best_dag = instance-&gt;current_dag;
<a name="l00569"></a>00569   <span class="keywordflow">if</span>(best_dag-&gt;rank != ROOT_RANK(instance)) {
<a name="l00570"></a>00570     <span class="keywordflow">if</span>(rpl_select_parent(p-&gt;dag) != <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>) {
<a name="l00571"></a>00571       <span class="keywordflow">if</span>(p-&gt;dag != best_dag) {
<a name="l00572"></a>00572         best_dag = instance-&gt;of-&gt;best_dag(best_dag, p-&gt;dag);
<a name="l00573"></a>00573       }
<a name="l00574"></a>00574     } <span class="keywordflow">else</span> <span class="keywordflow">if</span>(p-&gt;dag == best_dag) {
<a name="l00575"></a>00575       best_dag = <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>;
<a name="l00576"></a>00576       <span class="keywordflow">for</span>(dag = &amp;instance-&gt;dag_table[0], end = dag + RPL_MAX_DAG_PER_INSTANCE; dag &lt; end; ++dag) {
<a name="l00577"></a>00577         <span class="keywordflow">if</span>(dag-&gt;used &amp;&amp; dag-&gt;preferred_parent != <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a> &amp;&amp; dag-&gt;preferred_parent-&gt;rank != INFINITE_RANK) {
<a name="l00578"></a>00578           <span class="keywordflow">if</span>(best_dag == <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>) {
<a name="l00579"></a>00579             best_dag = dag;
<a name="l00580"></a>00580           } <span class="keywordflow">else</span> {
<a name="l00581"></a>00581             best_dag = instance-&gt;of-&gt;best_dag(best_dag, dag);
<a name="l00582"></a>00582           }
<a name="l00583"></a>00583         }
<a name="l00584"></a>00584       }
<a name="l00585"></a>00585     }
<a name="l00586"></a>00586   }
<a name="l00587"></a>00587 
<a name="l00588"></a>00588   <span class="keywordflow">if</span>(best_dag == <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>) {
<a name="l00589"></a>00589     <span class="comment">/* No parent found: the calling function handle this problem. */</span>
<a name="l00590"></a>00590     <span class="keywordflow">return</span> <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>;
<a name="l00591"></a>00591   }
<a name="l00592"></a>00592 
<a name="l00593"></a>00593   <span class="keywordflow">if</span>(instance-&gt;current_dag != best_dag) {
<a name="l00594"></a>00594     <span class="comment">/* Remove routes installed by DAOs. */</span>
<a name="l00595"></a>00595     rpl_remove_routes(instance-&gt;current_dag);
<a name="l00596"></a>00596 
<a name="l00597"></a>00597     PRINTF(<span class="stringliteral">&quot;RPL: New preferred DAG: &quot;</span>);
<a name="l00598"></a>00598     PRINT6ADDR(&amp;best_dag-&gt;dag_id);
<a name="l00599"></a>00599     PRINTF(<span class="stringliteral">&quot;\n&quot;</span>);
<a name="l00600"></a>00600 
<a name="l00601"></a>00601     <span class="keywordflow">if</span>(best_dag-&gt;prefix_info.flags &amp; UIP_ND6_RA_FLAG_AUTONOMOUS) {
<a name="l00602"></a>00602       check_prefix(&amp;instance-&gt;current_dag-&gt;prefix_info, &amp;best_dag-&gt;prefix_info);
<a name="l00603"></a>00603     } <span class="keywordflow">else</span> <span class="keywordflow">if</span>(instance-&gt;current_dag-&gt;prefix_info.flags &amp; UIP_ND6_RA_FLAG_AUTONOMOUS) {
<a name="l00604"></a>00604       check_prefix(&amp;instance-&gt;current_dag-&gt;prefix_info, <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>);
<a name="l00605"></a>00605     }
<a name="l00606"></a>00606 
<a name="l00607"></a>00607     best_dag-&gt;joined = 1;
<a name="l00608"></a>00608     instance-&gt;current_dag-&gt;joined = 0;
<a name="l00609"></a>00609     instance-&gt;current_dag = best_dag;
<a name="l00610"></a>00610   }
<a name="l00611"></a>00611 
<a name="l00612"></a>00612   instance-&gt;of-&gt;update_metric_container(instance);
<a name="l00613"></a>00613   <span class="comment">/* Update the DAG rank. */</span>
<a name="l00614"></a>00614   best_dag-&gt;rank = instance-&gt;of-&gt;calculate_rank(best_dag-&gt;preferred_parent, 0);
<a name="l00615"></a>00615   <span class="keywordflow">if</span>(best_dag-&gt;rank &lt; best_dag-&gt;min_rank) {
<a name="l00616"></a>00616     best_dag-&gt;min_rank = best_dag-&gt;rank;
<a name="l00617"></a>00617   } <span class="keywordflow">else</span> <span class="keywordflow">if</span>(!acceptable_rank(best_dag, best_dag-&gt;rank)) {
<a name="l00618"></a>00618     PRINTF(<span class="stringliteral">&quot;RPL: New rank unacceptable!\n&quot;</span>);
<a name="l00619"></a>00619     instance-&gt;current_dag-&gt;preferred_parent = <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>;
<a name="l00620"></a>00620     <span class="keywordflow">if</span>(instance-&gt;mop != RPL_MOP_NO_DOWNWARD_ROUTES &amp;&amp; last_parent != <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>) {
<a name="l00621"></a>00621       <span class="comment">/* Send a No-Path DAO to the removed preferred parent. */</span>
<a name="l00622"></a>00622       dao_output(last_parent, RPL_ZERO_LIFETIME);
<a name="l00623"></a>00623     }
<a name="l00624"></a>00624     <span class="keywordflow">return</span> <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>;
<a name="l00625"></a>00625   }
<a name="l00626"></a>00626 
<a name="l00627"></a>00627   <span class="keywordflow">if</span>(best_dag-&gt;preferred_parent != last_parent) {
<a name="l00628"></a>00628     rpl_set_default_route(instance, &amp;best_dag-&gt;preferred_parent-&gt;addr);
<a name="l00629"></a>00629     PRINTF(<span class="stringliteral">&quot;RPL: Changed preferred parent, rank changed from %u to %u\n&quot;</span>,
<a name="l00630"></a>00630         (<span class="keywordtype">unsigned</span>)old_rank, best_dag-&gt;rank);
<a name="l00631"></a>00631     RPL_STAT(rpl_stats.parent_switch++);
<a name="l00632"></a>00632     <span class="keywordflow">if</span>(instance-&gt;mop != RPL_MOP_NO_DOWNWARD_ROUTES) {
<a name="l00633"></a>00633       <span class="keywordflow">if</span>(last_parent != <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>) {
<a name="l00634"></a>00634         <span class="comment">/* Send a No-Path DAO to the removed preferred parent. */</span>
<a name="l00635"></a>00635         dao_output(last_parent, RPL_ZERO_LIFETIME);
<a name="l00636"></a>00636       }
<a name="l00637"></a>00637       <span class="comment">/* The DAO parent set changed - schedule a DAO transmission. */</span>
<a name="l00638"></a>00638       RPL_LOLLIPOP_INCREMENT(instance-&gt;dtsn_out);
<a name="l00639"></a>00639       rpl_schedule_dao(instance);
<a name="l00640"></a>00640     }
<a name="l00641"></a>00641     rpl_reset_dio_timer(instance);
<a name="l00642"></a>00642   } <span class="keywordflow">else</span> <span class="keywordflow">if</span>(best_dag-&gt;rank != old_rank) {
<a name="l00643"></a>00643     PRINTF(<span class="stringliteral">&quot;RPL: Preferred parent update, rank changed from %u to %u\n&quot;</span>,
<a name="l00644"></a>00644         (<span class="keywordtype">unsigned</span>)old_rank, best_dag-&gt;rank);
<a name="l00645"></a>00645   }
<a name="l00646"></a>00646   <span class="keywordflow">return</span> best_dag;
<a name="l00647"></a>00647 }
<a name="l00648"></a>00648 <span class="comment">/************************************************************************/</span>
<a name="l00649"></a>00649 rpl_parent_t *
<a name="l00650"></a>00650 rpl_select_parent(rpl_dag_t *dag)
<a name="l00651"></a>00651 {
<a name="l00652"></a>00652   rpl_parent_t *p, *best;
<a name="l00653"></a>00653 
<a name="l00654"></a>00654   best = <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>;
<a name="l00655"></a>00655   <span class="keywordflow">for</span>(p = <a class="code" href="a01878.html#gacc0723982dcfcc54cfa6ba932ee63051" title="Get a pointer to the first element of a list.">list_head</a>(dag-&gt;parents); p != <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>; p = p-&gt;next) {
<a name="l00656"></a>00656     <span class="keywordflow">if</span>(p-&gt;rank == INFINITE_RANK) {
<a name="l00657"></a>00657       <span class="comment">/* ignore this neighbor */</span>
<a name="l00658"></a>00658     } <span class="keywordflow">else</span> <span class="keywordflow">if</span>(best == <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>) {
<a name="l00659"></a>00659       best = p;
<a name="l00660"></a>00660     } <span class="keywordflow">else</span> {
<a name="l00661"></a>00661       best = dag-&gt;instance-&gt;of-&gt;best_parent(best, p);
<a name="l00662"></a>00662     }
<a name="l00663"></a>00663   }
<a name="l00664"></a>00664 
<a name="l00665"></a>00665   <span class="keywordflow">if</span>(best != <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>) {
<a name="l00666"></a>00666     dag-&gt;preferred_parent = best;
<a name="l00667"></a>00667   }
<a name="l00668"></a>00668 
<a name="l00669"></a>00669   <span class="keywordflow">return</span> best;
<a name="l00670"></a>00670 }
<a name="l00671"></a>00671 <span class="comment">/************************************************************************/</span>
<a name="l00672"></a>00672 <span class="keywordtype">void</span>
<a name="l00673"></a>00673 rpl_remove_parent(rpl_dag_t *dag, rpl_parent_t *parent)
<a name="l00674"></a>00674 {
<a name="l00675"></a>00675   rpl_nullify_parent(dag, parent);
<a name="l00676"></a>00676 
<a name="l00677"></a>00677   PRINTF(<span class="stringliteral">&quot;RPL: Removing parent &quot;</span>);
<a name="l00678"></a>00678   PRINT6ADDR(&amp;parent-&gt;addr);
<a name="l00679"></a>00679   PRINTF(<span class="stringliteral">&quot;\n&quot;</span>);
<a name="l00680"></a>00680 
<a name="l00681"></a>00681   <a class="code" href="a01878.html#ga3eb717d9997a980e937e2ea8b0c07677" title="Remove a specific element from a list.">list_remove</a>(dag-&gt;parents, parent);
<a name="l00682"></a>00682   <a class="code" href="a01880.html#ga513698da82ec79ec7115ffa0d80df77d" title="Deallocate a memory block from a memory block previously declared with MEMB().">memb_free</a>(&amp;parent_memb, parent);
<a name="l00683"></a>00683 }
<a name="l00684"></a>00684 <span class="comment">/************************************************************************/</span>
<a name="l00685"></a>00685 <span class="keywordtype">void</span>
<a name="l00686"></a>00686 rpl_nullify_parent(rpl_dag_t *dag, rpl_parent_t *parent)
<a name="l00687"></a>00687 {
<a name="l00688"></a>00688   <span class="keywordflow">if</span>(parent == dag-&gt;preferred_parent) {
<a name="l00689"></a>00689     dag-&gt;preferred_parent = <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>;
<a name="l00690"></a>00690     dag-&gt;rank = INFINITE_RANK;
<a name="l00691"></a>00691     <span class="keywordflow">if</span>(dag-&gt;joined) {
<a name="l00692"></a>00692       <span class="keywordflow">if</span>(dag-&gt;instance-&gt;def_route != <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>) {
<a name="l00693"></a>00693         <span class="keywordflow">if</span>(dag-&gt;instance-&gt;def_route-&gt;isused) {
<a name="l00694"></a>00694           PRINTF(<span class="stringliteral">&quot;RPL: Removing default route &quot;</span>);
<a name="l00695"></a>00695           PRINT6ADDR(&amp;parent-&gt;addr);
<a name="l00696"></a>00696           PRINTF(<span class="stringliteral">&quot;\n&quot;</span>);
<a name="l00697"></a>00697           uip_ds6_defrt_rm(dag-&gt;instance-&gt;def_route);
<a name="l00698"></a>00698         }
<a name="l00699"></a>00699         dag-&gt;instance-&gt;def_route = <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>;
<a name="l00700"></a>00700       }
<a name="l00701"></a>00701       dao_output(parent, RPL_ZERO_LIFETIME);
<a name="l00702"></a>00702     }
<a name="l00703"></a>00703   }
<a name="l00704"></a>00704 
<a name="l00705"></a>00705   PRINTF(<span class="stringliteral">&quot;RPL: Nullifying parent &quot;</span>);
<a name="l00706"></a>00706   PRINT6ADDR(&amp;parent-&gt;addr);
<a name="l00707"></a>00707   PRINTF(<span class="stringliteral">&quot;\n&quot;</span>);
<a name="l00708"></a>00708 }
<a name="l00709"></a>00709 <span class="comment">/************************************************************************/</span>
<a name="l00710"></a>00710 <span class="keywordtype">void</span>
<a name="l00711"></a>00711 rpl_move_parent(rpl_dag_t *dag_src, rpl_dag_t *dag_dst, rpl_parent_t *parent)
<a name="l00712"></a>00712 {
<a name="l00713"></a>00713   <span class="keywordflow">if</span>(parent == dag_src-&gt;preferred_parent) {
<a name="l00714"></a>00714       dag_src-&gt;preferred_parent = <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>;
<a name="l00715"></a>00715       dag_src-&gt;rank = INFINITE_RANK;
<a name="l00716"></a>00716     <span class="keywordflow">if</span>(dag_src-&gt;joined &amp;&amp; dag_src-&gt;instance-&gt;def_route != <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>) {
<a name="l00717"></a>00717       <span class="keywordflow">if</span>(dag_src-&gt;instance-&gt;def_route-&gt;isused) {
<a name="l00718"></a>00718         PRINTF(<span class="stringliteral">&quot;RPL: Removing default route &quot;</span>);
<a name="l00719"></a>00719         PRINT6ADDR(&amp;parent-&gt;addr);
<a name="l00720"></a>00720         PRINTF(<span class="stringliteral">&quot;\n&quot;</span>);
<a name="l00721"></a>00721         uip_ds6_defrt_rm(dag_src-&gt;instance-&gt;def_route);
<a name="l00722"></a>00722       }
<a name="l00723"></a>00723       dag_src-&gt;instance-&gt;def_route = <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>;
<a name="l00724"></a>00724     }
<a name="l00725"></a>00725   } <span class="keywordflow">else</span> <span class="keywordflow">if</span>(dag_src-&gt;joined) {
<a name="l00726"></a>00726     <span class="comment">/* Remove uIPv6 routes that have this parent as the next hop. */</span>
<a name="l00727"></a>00727     rpl_remove_routes_by_nexthop(&amp;parent-&gt;addr, dag_src);
<a name="l00728"></a>00728   }
<a name="l00729"></a>00729 
<a name="l00730"></a>00730   PRINTF(<span class="stringliteral">&quot;RPL: Moving parent &quot;</span>);
<a name="l00731"></a>00731   PRINT6ADDR(&amp;parent-&gt;addr);
<a name="l00732"></a>00732   PRINTF(<span class="stringliteral">&quot;\n&quot;</span>);
<a name="l00733"></a>00733 
<a name="l00734"></a>00734   <a class="code" href="a01878.html#ga3eb717d9997a980e937e2ea8b0c07677" title="Remove a specific element from a list.">list_remove</a>(dag_src-&gt;parents, parent);
<a name="l00735"></a>00735   parent-&gt;dag = dag_dst;
<a name="l00736"></a>00736   <a class="code" href="a01878.html#ga775c0dfc08dca991297df7b419b7be43" title="Add an item at the end of a list.">list_add</a>(dag_dst-&gt;parents, parent);
<a name="l00737"></a>00737 }
<a name="l00738"></a>00738 <span class="comment">/************************************************************************/</span>
<a name="l00739"></a>00739 rpl_dag_t *
<a name="l00740"></a>00740 rpl_get_any_dag(<span class="keywordtype">void</span>)
<a name="l00741"></a>00741 {
<a name="l00742"></a>00742   <span class="keywordtype">int</span> i;
<a name="l00743"></a>00743 
<a name="l00744"></a>00744   <span class="keywordflow">for</span>(i = 0; i &lt; RPL_MAX_INSTANCES; ++i) {
<a name="l00745"></a>00745     <span class="keywordflow">if</span>(instance_table[i].used &amp;&amp; instance_table[i].current_dag-&gt;joined) {
<a name="l00746"></a>00746       <span class="keywordflow">return</span> instance_table[i].current_dag;
<a name="l00747"></a>00747     }
<a name="l00748"></a>00748   }
<a name="l00749"></a>00749   <span class="keywordflow">return</span> <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>;
<a name="l00750"></a>00750 }
<a name="l00751"></a>00751 <span class="comment">/************************************************************************/</span>
<a name="l00752"></a>00752 rpl_instance_t *
<a name="l00753"></a>00753 rpl_get_instance(uint8_t instance_id)
<a name="l00754"></a>00754 {
<a name="l00755"></a>00755   <span class="keywordtype">int</span> i;
<a name="l00756"></a>00756 
<a name="l00757"></a>00757   <span class="keywordflow">for</span>(i = 0; i &lt; RPL_MAX_INSTANCES; ++i) {
<a name="l00758"></a>00758     <span class="keywordflow">if</span>(instance_table[i].used &amp;&amp; instance_table[i].instance_id == instance_id) {
<a name="l00759"></a>00759       <span class="keywordflow">return</span> &amp;instance_table[i];
<a name="l00760"></a>00760     }
<a name="l00761"></a>00761   }
<a name="l00762"></a>00762   <span class="keywordflow">return</span> <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>;
<a name="l00763"></a>00763 }
<a name="l00764"></a>00764 <span class="comment">/************************************************************************/</span>
<a name="l00765"></a>00765 rpl_of_t *
<a name="l00766"></a>00766 rpl_find_of(rpl_ocp_t ocp)
<a name="l00767"></a>00767 {
<a name="l00768"></a>00768   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i;
<a name="l00769"></a>00769 
<a name="l00770"></a>00770   <span class="keywordflow">for</span>(i = 0;
<a name="l00771"></a>00771       i &lt; <span class="keyword">sizeof</span>(objective_functions) / <span class="keyword">sizeof</span>(objective_functions[0]);
<a name="l00772"></a>00772       i++) {
<a name="l00773"></a>00773     <span class="keywordflow">if</span>(objective_functions[i]-&gt;ocp == ocp) {
<a name="l00774"></a>00774       <span class="keywordflow">return</span> objective_functions[i];
<a name="l00775"></a>00775     }
<a name="l00776"></a>00776   }
<a name="l00777"></a>00777 
<a name="l00778"></a>00778   <span class="keywordflow">return</span> <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>;
<a name="l00779"></a>00779 }
<a name="l00780"></a>00780 <span class="comment">/************************************************************************/</span>
<a name="l00781"></a>00781 <span class="keywordtype">void</span>
<a name="l00782"></a>00782 rpl_join_instance(<a class="code" href="a00112.html" title="Representation of an IP address.">uip_ipaddr_t</a> *from, rpl_dio_t *dio)
<a name="l00783"></a>00783 {
<a name="l00784"></a>00784   rpl_instance_t *instance;
<a name="l00785"></a>00785   rpl_dag_t *dag;
<a name="l00786"></a>00786   rpl_parent_t *p;
<a name="l00787"></a>00787   rpl_of_t *of;
<a name="l00788"></a>00788 
<a name="l00789"></a>00789   dag = rpl_alloc_dag(dio-&gt;instance_id, &amp;dio-&gt;dag_id);
<a name="l00790"></a>00790   <span class="keywordflow">if</span>(dag == <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>) {
<a name="l00791"></a>00791     PRINTF(<span class="stringliteral">&quot;RPL: Failed to allocate a DAG object!\n&quot;</span>);
<a name="l00792"></a>00792     <span class="keywordflow">return</span>;
<a name="l00793"></a>00793   }
<a name="l00794"></a>00794 
<a name="l00795"></a>00795   instance = dag-&gt;instance;
<a name="l00796"></a>00796 
<a name="l00797"></a>00797   p = rpl_add_parent(dag, dio, from);
<a name="l00798"></a>00798   PRINTF(<span class="stringliteral">&quot;RPL: Adding &quot;</span>);
<a name="l00799"></a>00799   PRINT6ADDR(from);
<a name="l00800"></a>00800   PRINTF(<span class="stringliteral">&quot; as a parent: &quot;</span>);
<a name="l00801"></a>00801   <span class="keywordflow">if</span>(p == <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>) {
<a name="l00802"></a>00802     PRINTF(<span class="stringliteral">&quot;failed\n&quot;</span>);
<a name="l00803"></a>00803     instance-&gt;used = 0;
<a name="l00804"></a>00804     <span class="keywordflow">return</span>;
<a name="l00805"></a>00805   }
<a name="l00806"></a>00806   p-&gt;dtsn = dio-&gt;dtsn;
<a name="l00807"></a>00807   PRINTF(<span class="stringliteral">&quot;succeeded\n&quot;</span>);
<a name="l00808"></a>00808 
<a name="l00809"></a>00809   <span class="comment">/* Determine the objective function by using the</span>
<a name="l00810"></a>00810 <span class="comment">     objective code point of the DIO. */</span>
<a name="l00811"></a>00811   of = rpl_find_of(dio-&gt;ocp);
<a name="l00812"></a>00812   <span class="keywordflow">if</span>(of == <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>) {
<a name="l00813"></a>00813     PRINTF(<span class="stringliteral">&quot;RPL: DIO for DAG instance %u does not specify a supported OF\n&quot;</span>,
<a name="l00814"></a>00814         dio-&gt;instance_id);
<a name="l00815"></a>00815     rpl_remove_parent(dag, p);
<a name="l00816"></a>00816     instance-&gt;used = 0;
<a name="l00817"></a>00817     <span class="keywordflow">return</span>;
<a name="l00818"></a>00818   }
<a name="l00819"></a>00819 
<a name="l00820"></a>00820   <span class="comment">/* Autoconfigure an address if this node does not already have an address</span>
<a name="l00821"></a>00821 <span class="comment">     with this prefix. */</span>
<a name="l00822"></a>00822   <span class="keywordflow">if</span>(dio-&gt;prefix_info.flags &amp; UIP_ND6_RA_FLAG_AUTONOMOUS) {
<a name="l00823"></a>00823     check_prefix(<a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>, &amp;dio-&gt;prefix_info);
<a name="l00824"></a>00824   }
<a name="l00825"></a>00825 
<a name="l00826"></a>00826   dag-&gt;joined = 1;
<a name="l00827"></a>00827   dag-&gt;preference = dio-&gt;preference;
<a name="l00828"></a>00828   dag-&gt;grounded = dio-&gt;grounded;
<a name="l00829"></a>00829   dag-&gt;version = dio-&gt;version;
<a name="l00830"></a>00830 
<a name="l00831"></a>00831   instance-&gt;of = of;
<a name="l00832"></a>00832   instance-&gt;mop = dio-&gt;mop;
<a name="l00833"></a>00833   instance-&gt;current_dag = dag;
<a name="l00834"></a>00834   instance-&gt;dtsn_out = RPL_LOLLIPOP_INIT;
<a name="l00835"></a>00835 
<a name="l00836"></a>00836   instance-&gt;max_rankinc = dio-&gt;dag_max_rankinc;
<a name="l00837"></a>00837   instance-&gt;min_hoprankinc = dio-&gt;dag_min_hoprankinc;
<a name="l00838"></a>00838   instance-&gt;dio_intdoubl = dio-&gt;dag_intdoubl;
<a name="l00839"></a>00839   instance-&gt;dio_intmin = dio-&gt;dag_intmin;
<a name="l00840"></a>00840   instance-&gt;dio_intcurrent = instance-&gt;dio_intmin + instance-&gt;dio_intdoubl;
<a name="l00841"></a>00841   instance-&gt;dio_redundancy = dio-&gt;dag_redund;
<a name="l00842"></a>00842   instance-&gt;default_lifetime = dio-&gt;default_lifetime;
<a name="l00843"></a>00843   instance-&gt;lifetime_unit = dio-&gt;lifetime_unit;
<a name="l00844"></a>00844 
<a name="l00845"></a>00845   memcpy(&amp;dag-&gt;dag_id, &amp;dio-&gt;dag_id, <span class="keyword">sizeof</span>(dio-&gt;dag_id));
<a name="l00846"></a>00846 
<a name="l00847"></a>00847   <span class="comment">/* Copy prefix information from the DIO into the DAG object. */</span>
<a name="l00848"></a>00848   memcpy(&amp;dag-&gt;prefix_info, &amp;dio-&gt;prefix_info, <span class="keyword">sizeof</span>(rpl_prefix_t));
<a name="l00849"></a>00849 
<a name="l00850"></a>00850   dag-&gt;preferred_parent = p;
<a name="l00851"></a>00851   instance-&gt;of-&gt;update_metric_container(instance);
<a name="l00852"></a>00852   dag-&gt;rank = instance-&gt;of-&gt;calculate_rank(p, 0);
<a name="l00853"></a>00853   <span class="comment">/* So far this is the lowest rank we are aware of. */</span>
<a name="l00854"></a>00854   dag-&gt;min_rank = dag-&gt;rank;
<a name="l00855"></a>00855 
<a name="l00856"></a>00856   <span class="keywordflow">if</span>(default_instance == <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>) {
<a name="l00857"></a>00857     default_instance = instance;
<a name="l00858"></a>00858   }
<a name="l00859"></a>00859 
<a name="l00860"></a>00860   PRINTF(<span class="stringliteral">&quot;RPL: Joined DAG with instance ID %u, rank %hu, DAG ID &quot;</span>,
<a name="l00861"></a>00861          dio-&gt;instance_id, dag-&gt;rank);
<a name="l00862"></a>00862   PRINT6ADDR(&amp;dag-&gt;dag_id);
<a name="l00863"></a>00863   PRINTF(<span class="stringliteral">&quot;\n&quot;</span>);
<a name="l00864"></a>00864 
<a name="l00865"></a>00865   ANNOTATE(<span class="stringliteral">&quot;#A join=%u\n&quot;</span>, dag-&gt;dag_id.u8[<span class="keyword">sizeof</span>(dag-&gt;dag_id) - 1]);
<a name="l00866"></a>00866 
<a name="l00867"></a>00867   rpl_reset_dio_timer(instance);
<a name="l00868"></a>00868   rpl_set_default_route(instance, from);
<a name="l00869"></a>00869 
<a name="l00870"></a>00870   <span class="keywordflow">if</span>(instance-&gt;mop != RPL_MOP_NO_DOWNWARD_ROUTES) {
<a name="l00871"></a>00871     rpl_schedule_dao(instance);
<a name="l00872"></a>00872   } <span class="keywordflow">else</span> {
<a name="l00873"></a>00873     PRINTF(<span class="stringliteral">&quot;RPL: The DIO does not meet the prerequisites for sending a DAO\n&quot;</span>);
<a name="l00874"></a>00874   }
<a name="l00875"></a>00875 }
<a name="l00876"></a>00876 
<a name="l00877"></a>00877 <span class="comment">/************************************************************************/</span>
<a name="l00878"></a>00878 <span class="keywordtype">void</span>
<a name="l00879"></a>00879 rpl_add_dag(<a class="code" href="a00112.html" title="Representation of an IP address.">uip_ipaddr_t</a> *from, rpl_dio_t *dio)
<a name="l00880"></a>00880 {
<a name="l00881"></a>00881   rpl_instance_t *instance;
<a name="l00882"></a>00882   rpl_dag_t *dag, *previous_dag;
<a name="l00883"></a>00883   rpl_parent_t *p;
<a name="l00884"></a>00884   rpl_of_t *of;
<a name="l00885"></a>00885 
<a name="l00886"></a>00886   dag = rpl_alloc_dag(dio-&gt;instance_id, &amp;dio-&gt;dag_id);
<a name="l00887"></a>00887   <span class="keywordflow">if</span>(dag == <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>) {
<a name="l00888"></a>00888     PRINTF(<span class="stringliteral">&quot;RPL: Failed to allocate a DAG object!\n&quot;</span>);
<a name="l00889"></a>00889     <span class="keywordflow">return</span>;
<a name="l00890"></a>00890   }
<a name="l00891"></a>00891 
<a name="l00892"></a>00892   instance = dag-&gt;instance;
<a name="l00893"></a>00893 
<a name="l00894"></a>00894   previous_dag = find_parent_dag(instance, from);
<a name="l00895"></a>00895   <span class="keywordflow">if</span>(previous_dag == <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>) {
<a name="l00896"></a>00896     PRINTF(<span class="stringliteral">&quot;RPL: Adding &quot;</span>);
<a name="l00897"></a>00897     PRINT6ADDR(from);
<a name="l00898"></a>00898     PRINTF(<span class="stringliteral">&quot; as a parent: &quot;</span>);
<a name="l00899"></a>00899     p = rpl_add_parent(dag, dio, from);
<a name="l00900"></a>00900     <span class="keywordflow">if</span>(p == <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>) {
<a name="l00901"></a>00901       PRINTF(<span class="stringliteral">&quot;failed\n&quot;</span>);
<a name="l00902"></a>00902       dag-&gt;used = 0;
<a name="l00903"></a>00903       <span class="keywordflow">return</span>;
<a name="l00904"></a>00904     }
<a name="l00905"></a>00905     PRINTF(<span class="stringliteral">&quot;succeeded\n&quot;</span>);
<a name="l00906"></a>00906   } <span class="keywordflow">else</span> {
<a name="l00907"></a>00907     p = rpl_find_parent(previous_dag, from);
<a name="l00908"></a>00908     <span class="keywordflow">if</span>(p != <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>) {
<a name="l00909"></a>00909       rpl_move_parent(previous_dag, dag, p);
<a name="l00910"></a>00910     }
<a name="l00911"></a>00911   }
<a name="l00912"></a>00912 
<a name="l00913"></a>00913   <span class="comment">/* Determine the objective function by using the</span>
<a name="l00914"></a>00914 <span class="comment">     objective code point of the DIO. */</span>
<a name="l00915"></a>00915   of = rpl_find_of(dio-&gt;ocp);
<a name="l00916"></a>00916   <span class="keywordflow">if</span>(of != instance-&gt;of ||
<a name="l00917"></a>00917      instance-&gt;mop != dio-&gt;mop ||
<a name="l00918"></a>00918      instance-&gt;max_rankinc != dio-&gt;dag_max_rankinc ||
<a name="l00919"></a>00919      instance-&gt;min_hoprankinc != dio-&gt;dag_min_hoprankinc ||
<a name="l00920"></a>00920      instance-&gt;dio_intdoubl != dio-&gt;dag_intdoubl ||
<a name="l00921"></a>00921      instance-&gt;dio_intmin != dio-&gt;dag_intmin ||
<a name="l00922"></a>00922      instance-&gt;dio_redundancy != dio-&gt;dag_redund ||
<a name="l00923"></a>00923      instance-&gt;default_lifetime != dio-&gt;default_lifetime ||
<a name="l00924"></a>00924      instance-&gt;lifetime_unit != dio-&gt;lifetime_unit) {
<a name="l00925"></a>00925     PRINTF(<span class="stringliteral">&quot;RPL: DIO for DAG instance %u uncompatible with previos DIO\n&quot;</span>,
<a name="l00926"></a>00926            dio-&gt;instance_id);
<a name="l00927"></a>00927     rpl_remove_parent(dag, p);
<a name="l00928"></a>00928     dag-&gt;used = 0;
<a name="l00929"></a>00929     <span class="keywordflow">return</span>;
<a name="l00930"></a>00930   }
<a name="l00931"></a>00931 
<a name="l00932"></a>00932   dag-&gt;used = 1;
<a name="l00933"></a>00933   dag-&gt;grounded = dio-&gt;grounded;
<a name="l00934"></a>00934   dag-&gt;preference = dio-&gt;preference;
<a name="l00935"></a>00935   dag-&gt;version = dio-&gt;version;
<a name="l00936"></a>00936 
<a name="l00937"></a>00937   memcpy(&amp;dag-&gt;dag_id, &amp;dio-&gt;dag_id, <span class="keyword">sizeof</span>(dio-&gt;dag_id));
<a name="l00938"></a>00938 
<a name="l00939"></a>00939   <span class="comment">/* copy prefix information into the dag */</span>
<a name="l00940"></a>00940   memcpy(&amp;dag-&gt;prefix_info, &amp;dio-&gt;prefix_info, <span class="keyword">sizeof</span>(rpl_prefix_t));
<a name="l00941"></a>00941 
<a name="l00942"></a>00942   dag-&gt;preferred_parent = p;
<a name="l00943"></a>00943   dag-&gt;rank = instance-&gt;of-&gt;calculate_rank(p, 0);
<a name="l00944"></a>00944   dag-&gt;min_rank = dag-&gt;rank; <span class="comment">/* So far this is the lowest rank we know of. */</span>
<a name="l00945"></a>00945 
<a name="l00946"></a>00946   PRINTF(<span class="stringliteral">&quot;RPL: Joined DAG with instance ID %u, rank %hu, DAG ID &quot;</span>,
<a name="l00947"></a>00947          dio-&gt;instance_id, dag-&gt;rank);
<a name="l00948"></a>00948   PRINT6ADDR(&amp;dag-&gt;dag_id);
<a name="l00949"></a>00949   PRINTF(<span class="stringliteral">&quot;\n&quot;</span>);
<a name="l00950"></a>00950 
<a name="l00951"></a>00951   ANNOTATE(<span class="stringliteral">&quot;#A join=%u\n&quot;</span>, dag-&gt;dag_id.u8[<span class="keyword">sizeof</span>(dag-&gt;dag_id) - 1]);
<a name="l00952"></a>00952 
<a name="l00953"></a>00953   rpl_process_parent_event(instance, p);
<a name="l00954"></a>00954   p-&gt;dtsn = dio-&gt;dtsn;
<a name="l00955"></a>00955 }
<a name="l00956"></a>00956 
<a name="l00957"></a>00957 <span class="comment">/************************************************************************/</span>
<a name="l00958"></a>00958 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00959"></a>00959 global_repair(<a class="code" href="a00112.html" title="Representation of an IP address.">uip_ipaddr_t</a> *from, rpl_dag_t *dag, rpl_dio_t *dio)
<a name="l00960"></a>00960 {
<a name="l00961"></a>00961   rpl_parent_t *p;
<a name="l00962"></a>00962 
<a name="l00963"></a>00963   remove_parents(dag, 0);
<a name="l00964"></a>00964   dag-&gt;version = dio-&gt;version;
<a name="l00965"></a>00965   dag-&gt;instance-&gt;of-&gt;reset(dag);
<a name="l00966"></a>00966   dag-&gt;min_rank = INFINITE_RANK;
<a name="l00967"></a>00967   RPL_LOLLIPOP_INCREMENT(dag-&gt;instance-&gt;dtsn_out);
<a name="l00968"></a>00968 
<a name="l00969"></a>00969   p = rpl_add_parent(dag, dio, from);
<a name="l00970"></a>00970   <span class="keywordflow">if</span>(p == <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>) {
<a name="l00971"></a>00971     PRINTF(<span class="stringliteral">&quot;RPL: Failed to add a parent during the global repair\n&quot;</span>);
<a name="l00972"></a>00972     dag-&gt;rank = INFINITE_RANK;
<a name="l00973"></a>00973   } <span class="keywordflow">else</span> {
<a name="l00974"></a>00974     dag-&gt;rank = dag-&gt;instance-&gt;of-&gt;calculate_rank(p, 0);
<a name="l00975"></a>00975     dag-&gt;min_rank = dag-&gt;rank;
<a name="l00976"></a>00976     rpl_process_parent_event(dag-&gt;instance, p);
<a name="l00977"></a>00977   }
<a name="l00978"></a>00978 
<a name="l00979"></a>00979   PRINTF(<span class="stringliteral">&quot;RPL: Participating in a global repair (version=%u, rank=%hu)\n&quot;</span>,
<a name="l00980"></a>00980          dag-&gt;version, dag-&gt;rank);
<a name="l00981"></a>00981 
<a name="l00982"></a>00982   RPL_STAT(rpl_stats.global_repairs++);
<a name="l00983"></a>00983 }
<a name="l00984"></a>00984 <span class="comment">/************************************************************************/</span>
<a name="l00985"></a>00985 <span class="keywordtype">void</span>
<a name="l00986"></a>00986 rpl_local_repair(rpl_instance_t *instance)
<a name="l00987"></a>00987 {
<a name="l00988"></a>00988   <span class="keywordtype">int</span> i;
<a name="l00989"></a>00989 
<a name="l00990"></a>00990   PRINTF(<span class="stringliteral">&quot;RPL: Starting a local instance repair\n&quot;</span>);
<a name="l00991"></a>00991   <span class="keywordflow">for</span>(i = 0; i &lt; RPL_MAX_DAG_PER_INSTANCE; i++) {
<a name="l00992"></a>00992     <span class="keywordflow">if</span>(instance-&gt;dag_table[i].used) {
<a name="l00993"></a>00993       instance-&gt;dag_table[i].rank = INFINITE_RANK;
<a name="l00994"></a>00994       nullify_parents(&amp;instance-&gt;dag_table[i], 0);
<a name="l00995"></a>00995     }
<a name="l00996"></a>00996   }
<a name="l00997"></a>00997 
<a name="l00998"></a>00998   rpl_reset_dio_timer(instance);
<a name="l00999"></a>00999 
<a name="l01000"></a>01000   RPL_STAT(rpl_stats.local_repairs++);
<a name="l01001"></a>01001 }
<a name="l01002"></a>01002 <span class="comment">/************************************************************************/</span>
<a name="l01003"></a>01003 <span class="keywordtype">void</span>
<a name="l01004"></a>01004 rpl_recalculate_ranks(<span class="keywordtype">void</span>)
<a name="l01005"></a>01005 {
<a name="l01006"></a>01006   rpl_instance_t *instance, *end;
<a name="l01007"></a>01007   rpl_parent_t *p;
<a name="l01008"></a>01008   <span class="keywordtype">int</span> i;
<a name="l01009"></a>01009 
<a name="l01010"></a>01010   <span class="comment">/*</span>
<a name="l01011"></a>01011 <span class="comment">   * We recalculate ranks when we receive feedback from the system rather</span>
<a name="l01012"></a>01012 <span class="comment">   * than RPL protocol messages. This periodical recalculation is called</span>
<a name="l01013"></a>01013 <span class="comment">   * from a timer in order to keep the stack depth reasonably low.</span>
<a name="l01014"></a>01014 <span class="comment">   */</span>
<a name="l01015"></a>01015   <span class="keywordflow">for</span>(instance = &amp;instance_table[0], end = instance + RPL_MAX_INSTANCES; instance &lt; end; ++instance) {
<a name="l01016"></a>01016     <span class="keywordflow">if</span>(instance-&gt;used) {
<a name="l01017"></a>01017       <span class="keywordflow">for</span>(i = 0; i &lt; RPL_MAX_DAG_PER_INSTANCE; i++) {
<a name="l01018"></a>01018         <span class="keywordflow">if</span>(instance-&gt;dag_table[i].used) {
<a name="l01019"></a>01019           <span class="keywordflow">for</span>(p = <a class="code" href="a01878.html#gacc0723982dcfcc54cfa6ba932ee63051" title="Get a pointer to the first element of a list.">list_head</a>(instance-&gt;dag_table[i].parents); p != <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>; p = p-&gt;next) {
<a name="l01020"></a>01020             <span class="keywordflow">if</span>(p-&gt;updated) {
<a name="l01021"></a>01021               p-&gt;updated = 0;
<a name="l01022"></a>01022               <span class="keywordflow">if</span>(!rpl_process_parent_event(instance, p)) {
<a name="l01023"></a>01023                 PRINTF(<span class="stringliteral">&quot;RPL: A parent was dropped\n&quot;</span>);
<a name="l01024"></a>01024               }
<a name="l01025"></a>01025               <span class="comment">/*</span>
<a name="l01026"></a>01026 <span class="comment">               * Stop calculating here because the parent list may have changed.</span>
<a name="l01027"></a>01027 <span class="comment">               * If more ranks need to be recalculated, it will be taken care of</span>
<a name="l01028"></a>01028 <span class="comment">               * in subsequent calls to this functions.</span>
<a name="l01029"></a>01029 <span class="comment">               */</span>
<a name="l01030"></a>01030               <span class="keywordflow">break</span>;
<a name="l01031"></a>01031             }
<a name="l01032"></a>01032           }
<a name="l01033"></a>01033         }
<a name="l01034"></a>01034       }
<a name="l01035"></a>01035     }
<a name="l01036"></a>01036   }
<a name="l01037"></a>01037 }
<a name="l01038"></a>01038 <span class="comment">/************************************************************************/</span>
<a name="l01039"></a>01039 <span class="keywordtype">int</span>
<a name="l01040"></a>01040 rpl_process_parent_event(rpl_instance_t *instance, rpl_parent_t *p)
<a name="l01041"></a>01041 {
<a name="l01042"></a>01042   rpl_rank_t old_rank;
<a name="l01043"></a>01043   <span class="keywordtype">int</span> return_value;
<a name="l01044"></a>01044 
<a name="l01045"></a>01045   old_rank = instance-&gt;current_dag-&gt;rank;
<a name="l01046"></a>01046   return_value = 1;
<a name="l01047"></a>01047 
<a name="l01048"></a>01048   <span class="keywordflow">if</span>(!acceptable_rank(p-&gt;dag, p-&gt;rank)) {
<a name="l01049"></a>01049     <span class="comment">/* The candidate parent is no longer valid: the rank increase resulting</span>
<a name="l01050"></a>01050 <span class="comment">       from the choice of it as a parent would be too high. */</span>
<a name="l01051"></a>01051     PRINTF(<span class="stringliteral">&quot;RPL: Unacceptable rank %u\n&quot;</span>, (<span class="keywordtype">unsigned</span>)p-&gt;rank);
<a name="l01052"></a>01052     <span class="keywordflow">if</span>(p != instance-&gt;current_dag-&gt;preferred_parent) {
<a name="l01053"></a>01053       rpl_nullify_parent(p-&gt;dag, p);
<a name="l01054"></a>01054       <span class="keywordflow">return</span> 0;
<a name="l01055"></a>01055     } <span class="keywordflow">else</span> {
<a name="l01056"></a>01056       rpl_nullify_parent(p-&gt;dag, p);
<a name="l01057"></a>01057       return_value = 0;
<a name="l01058"></a>01058     }
<a name="l01059"></a>01059   }
<a name="l01060"></a>01060 
<a name="l01061"></a>01061   <span class="keywordflow">if</span>(rpl_select_dag(instance, p) == <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>) {
<a name="l01062"></a>01062     <span class="comment">/* No suitable parent; trigger a local repair. */</span>
<a name="l01063"></a>01063     PRINTF(<span class="stringliteral">&quot;RPL: No parents found in any DAG\n&quot;</span>);
<a name="l01064"></a>01064     rpl_local_repair(instance);
<a name="l01065"></a>01065     <span class="keywordflow">return</span> 0;
<a name="l01066"></a>01066   }
<a name="l01067"></a>01067 
<a name="l01068"></a>01068 <span class="preprocessor">#if DEBUG</span>
<a name="l01069"></a>01069 <span class="preprocessor"></span>  <span class="keywordflow">if</span>(DAG_RANK(old_rank, instance) != DAG_RANK(instance-&gt;current_dag-&gt;rank, instance)) {
<a name="l01070"></a>01070     PRINTF(<span class="stringliteral">&quot;RPL: Moving in the instance from rank %hu to %hu\n&quot;</span>,
<a name="l01071"></a>01071            DAG_RANK(old_rank, instance), DAG_RANK(instance-&gt;current_dag-&gt;rank, instance));
<a name="l01072"></a>01072     <span class="keywordflow">if</span>(instance-&gt;current_dag-&gt;rank != INFINITE_RANK) {
<a name="l01073"></a>01073       PRINTF(<span class="stringliteral">&quot;RPL: The preferred parent is &quot;</span>);
<a name="l01074"></a>01074       PRINT6ADDR(&amp;instance-&gt;current_dag-&gt;preferred_parent-&gt;addr);
<a name="l01075"></a>01075       PRINTF(<span class="stringliteral">&quot; (rank %u)\n&quot;</span>,
<a name="l01076"></a>01076            (<span class="keywordtype">unsigned</span>)DAG_RANK(instance-&gt;current_dag-&gt;preferred_parent-&gt;rank, instance));
<a name="l01077"></a>01077     } <span class="keywordflow">else</span> {
<a name="l01078"></a>01078       PRINTF(<span class="stringliteral">&quot;RPL: We don&#39;t have any parent&quot;</span>);
<a name="l01079"></a>01079     }
<a name="l01080"></a>01080   }
<a name="l01081"></a>01081 <span class="preprocessor">#endif </span><span class="comment">/* DEBUG */</span>
<a name="l01082"></a>01082 
<a name="l01083"></a>01083   <span class="keywordflow">return</span> return_value;
<a name="l01084"></a>01084 }
<a name="l01085"></a>01085 <span class="comment">/************************************************************************/</span>
<a name="l01086"></a>01086 <span class="keywordtype">void</span>
<a name="l01087"></a>01087 rpl_process_dio(<a class="code" href="a00112.html" title="Representation of an IP address.">uip_ipaddr_t</a> *from, rpl_dio_t *dio)
<a name="l01088"></a>01088 {
<a name="l01089"></a>01089   rpl_instance_t *instance;
<a name="l01090"></a>01090   rpl_dag_t *dag, *previous_dag;
<a name="l01091"></a>01091   rpl_parent_t *p;
<a name="l01092"></a>01092 
<a name="l01093"></a>01093   <span class="keywordflow">if</span>(dio-&gt;mop != RPL_MOP_DEFAULT) {
<a name="l01094"></a>01094     PRINTF(<span class="stringliteral">&quot;RPL: Ignoring a DIO with an unsupported MOP: %d\n&quot;</span>, dio-&gt;mop);
<a name="l01095"></a>01095     <span class="keywordflow">return</span>;
<a name="l01096"></a>01096   }
<a name="l01097"></a>01097 
<a name="l01098"></a>01098   <span class="keywordflow">if</span>(dio-&gt;rank == INFINITE_RANK) {
<a name="l01099"></a>01099     PRINTF(<span class="stringliteral">&quot;RPL: Ignoring DIO from node with infinite rank: &quot;</span>);
<a name="l01100"></a>01100     PRINT6ADDR(from);
<a name="l01101"></a>01101     PRINTF(<span class="stringliteral">&quot;\n&quot;</span>);
<a name="l01102"></a>01102     <span class="keywordflow">return</span>;
<a name="l01103"></a>01103   }
<a name="l01104"></a>01104 
<a name="l01105"></a>01105   instance = rpl_get_instance(dio-&gt;instance_id);
<a name="l01106"></a>01106   <span class="keywordflow">if</span>(instance == <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>) {
<a name="l01107"></a>01107     PRINTF(<span class="stringliteral">&quot;RPL: New instance detected: Joining...\n&quot;</span>);
<a name="l01108"></a>01108     rpl_join_instance(from, dio);
<a name="l01109"></a>01109     <span class="keywordflow">return</span>;
<a name="l01110"></a>01110   }
<a name="l01111"></a>01111 
<a name="l01112"></a>01112   dag = get_dag(dio-&gt;instance_id, &amp;dio-&gt;dag_id);
<a name="l01113"></a>01113   <span class="keywordflow">if</span>(dag == <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>) {
<a name="l01114"></a>01114     PRINTF(<span class="stringliteral">&quot;RPL: Adding new DAG to known instance.\n&quot;</span>);
<a name="l01115"></a>01115     rpl_add_dag(from, dio);
<a name="l01116"></a>01116     <span class="keywordflow">return</span>;
<a name="l01117"></a>01117   }
<a name="l01118"></a>01118 
<a name="l01119"></a>01119   <span class="keywordflow">if</span>(lollipop_greater_than(dio-&gt;version, dag-&gt;version)) {
<a name="l01120"></a>01120     <span class="keywordflow">if</span>(dag-&gt;rank == ROOT_RANK(instance)) {
<a name="l01121"></a>01121       PRINTF(<span class="stringliteral">&quot;RPL: Root received inconsistent DIO version number\n&quot;</span>);
<a name="l01122"></a>01122       dag-&gt;version = dio-&gt;version;
<a name="l01123"></a>01123       RPL_LOLLIPOP_INCREMENT(dag-&gt;version);
<a name="l01124"></a>01124       rpl_reset_dio_timer(instance);
<a name="l01125"></a>01125     } <span class="keywordflow">else</span> {
<a name="l01126"></a>01126       global_repair(from, dag, dio);
<a name="l01127"></a>01127     }
<a name="l01128"></a>01128     <span class="keywordflow">return</span>;
<a name="l01129"></a>01129   }
<a name="l01130"></a>01130 
<a name="l01131"></a>01131   <span class="keywordflow">if</span>(lollipop_greater_than(dag-&gt;version, dio-&gt;version)) {
<a name="l01132"></a>01132     <span class="comment">/* The DIO sender is on an older version of the DAG. */</span>
<a name="l01133"></a>01133     PRINTF(<span class="stringliteral">&quot;RPL: old version received =&gt; inconsistency detected\n&quot;</span>);
<a name="l01134"></a>01134     <span class="keywordflow">if</span>(dag-&gt;joined) {
<a name="l01135"></a>01135       rpl_reset_dio_timer(instance);
<a name="l01136"></a>01136       <span class="keywordflow">return</span>;
<a name="l01137"></a>01137     }
<a name="l01138"></a>01138   }
<a name="l01139"></a>01139 
<a name="l01140"></a>01140   <span class="keywordflow">if</span>(dio-&gt;rank &lt; ROOT_RANK(instance)) {
<a name="l01141"></a>01141     PRINTF(<span class="stringliteral">&quot;RPL: Ignoring DIO with too low rank: %u\n&quot;</span>,
<a name="l01142"></a>01142            (<span class="keywordtype">unsigned</span>)dio-&gt;rank);
<a name="l01143"></a>01143     <span class="keywordflow">return</span>;
<a name="l01144"></a>01144   } <span class="keywordflow">else</span> <span class="keywordflow">if</span>(dio-&gt;rank == INFINITE_RANK &amp;&amp; dag-&gt;joined) {
<a name="l01145"></a>01145     rpl_reset_dio_timer(instance);
<a name="l01146"></a>01146   }
<a name="l01147"></a>01147 
<a name="l01148"></a>01148   <span class="keywordflow">if</span>(dag-&gt;rank == ROOT_RANK(instance)) {
<a name="l01149"></a>01149     <span class="keywordflow">if</span>(dio-&gt;rank != INFINITE_RANK) {
<a name="l01150"></a>01150       instance-&gt;dio_counter++;
<a name="l01151"></a>01151     }
<a name="l01152"></a>01152     <span class="keywordflow">return</span>;
<a name="l01153"></a>01153   }
<a name="l01154"></a>01154 
<a name="l01155"></a>01155   <span class="comment">/*</span>
<a name="l01156"></a>01156 <span class="comment">   * At this point, we know that this DIO pertains to a DAG that</span>
<a name="l01157"></a>01157 <span class="comment">   * we are already part of. We consider the sender of the DIO to be</span>
<a name="l01158"></a>01158 <span class="comment">   * a candidate parent, and let rpl_process_parent_event decide</span>
<a name="l01159"></a>01159 <span class="comment">   * whether to keep it in the set.</span>
<a name="l01160"></a>01160 <span class="comment">   */</span>
<a name="l01161"></a>01161 
<a name="l01162"></a>01162   p = rpl_find_parent(dag, from);
<a name="l01163"></a>01163   <span class="keywordflow">if</span>(p == <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>) {
<a name="l01164"></a>01164     previous_dag = find_parent_dag(instance, from);
<a name="l01165"></a>01165     <span class="keywordflow">if</span>(previous_dag == <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>) {
<a name="l01166"></a>01166       <span class="keywordflow">if</span>(RPL_PARENT_COUNT(dag) == RPL_MAX_PARENTS_PER_DAG) {
<a name="l01167"></a>01167         <span class="comment">/* Make room for a new parent. */</span>
<a name="l01168"></a>01168         remove_worst_parent(dag, dio-&gt;rank);
<a name="l01169"></a>01169       }
<a name="l01170"></a>01170       <span class="comment">/* Add the DIO sender as a candidate parent. */</span>
<a name="l01171"></a>01171       p = rpl_add_parent(dag, dio, from);
<a name="l01172"></a>01172       <span class="keywordflow">if</span>(p == <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>) {
<a name="l01173"></a>01173         PRINTF(<span class="stringliteral">&quot;RPL: Failed to add a new parent (&quot;</span>);
<a name="l01174"></a>01174         PRINT6ADDR(from);
<a name="l01175"></a>01175         PRINTF(<span class="stringliteral">&quot;)\n&quot;</span>);
<a name="l01176"></a>01176         <span class="keywordflow">return</span>;
<a name="l01177"></a>01177       }
<a name="l01178"></a>01178       PRINTF(<span class="stringliteral">&quot;RPL: New candidate parent with rank %u: &quot;</span>, (<span class="keywordtype">unsigned</span>)p-&gt;rank);
<a name="l01179"></a>01179       PRINT6ADDR(from);
<a name="l01180"></a>01180       PRINTF(<span class="stringliteral">&quot;\n&quot;</span>);
<a name="l01181"></a>01181     } <span class="keywordflow">else</span> {
<a name="l01182"></a>01182       p = rpl_find_parent(previous_dag, from);
<a name="l01183"></a>01183       <span class="keywordflow">if</span>(p != <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>) {
<a name="l01184"></a>01184         rpl_move_parent(previous_dag, dag, p);
<a name="l01185"></a>01185       }
<a name="l01186"></a>01186     }
<a name="l01187"></a>01187   } <span class="keywordflow">else</span> {
<a name="l01188"></a>01188     <span class="keywordflow">if</span>(p-&gt;rank == dio-&gt;rank) {
<a name="l01189"></a>01189       PRINTF(<span class="stringliteral">&quot;RPL: Received consistent DIO\n&quot;</span>);
<a name="l01190"></a>01190       <span class="keywordflow">if</span>(dag-&gt;joined) {
<a name="l01191"></a>01191         instance-&gt;dio_counter++;
<a name="l01192"></a>01192       }
<a name="l01193"></a>01193     } <span class="keywordflow">else</span> {
<a name="l01194"></a>01194       p-&gt;rank=dio-&gt;rank;
<a name="l01195"></a>01195     }
<a name="l01196"></a>01196   }
<a name="l01197"></a>01197 
<a name="l01198"></a>01198   PRINTF(<span class="stringliteral">&quot;RPL: preferred DAG &quot;</span>);
<a name="l01199"></a>01199   PRINT6ADDR(&amp;instance-&gt;current_dag-&gt;dag_id);
<a name="l01200"></a>01200   PRINTF(<span class="stringliteral">&quot;, rank %u, min_rank %u, &quot;</span>,
<a name="l01201"></a>01201          instance-&gt;current_dag-&gt;rank, instance-&gt;current_dag-&gt;min_rank);
<a name="l01202"></a>01202   PRINTF(<span class="stringliteral">&quot;parent rank %u, parent etx %u, link metric %u, instance etx %u\n&quot;</span>,
<a name="l01203"></a>01203          p-&gt;rank, p-&gt;mc.obj.etx, p-&gt;link_metric, instance-&gt;mc.obj.etx);
<a name="l01204"></a>01204 
<a name="l01205"></a>01205   <span class="comment">/* We have allocated a candidate parent; process the DIO further. */</span>
<a name="l01206"></a>01206 
<a name="l01207"></a>01207   memcpy(&amp;p-&gt;mc, &amp;dio-&gt;mc, <span class="keyword">sizeof</span>(p-&gt;mc));
<a name="l01208"></a>01208   <span class="keywordflow">if</span>(rpl_process_parent_event(instance, p) == 0) {
<a name="l01209"></a>01209     PRINTF(<span class="stringliteral">&quot;RPL: The candidate parent is rejected\n&quot;</span>);
<a name="l01210"></a>01210     <span class="keywordflow">return</span>;
<a name="l01211"></a>01211   }
<a name="l01212"></a>01212 
<a name="l01213"></a>01213   <span class="comment">/* We don&#39;t use route control, so we can have only one official parent. */</span>
<a name="l01214"></a>01214   <span class="keywordflow">if</span>(dag-&gt;joined &amp;&amp; p == dag-&gt;preferred_parent) {
<a name="l01215"></a>01215     <span class="keywordflow">if</span>(should_send_dao(instance, dio, p)) {
<a name="l01216"></a>01216       RPL_LOLLIPOP_INCREMENT(instance-&gt;dtsn_out);
<a name="l01217"></a>01217       rpl_schedule_dao(instance);
<a name="l01218"></a>01218     }
<a name="l01219"></a>01219   }
<a name="l01220"></a>01220   p-&gt;dtsn = dio-&gt;dtsn;
<a name="l01221"></a>01221 }
<a name="l01222"></a>01222 <span class="comment">/************************************************************************/</span>
</pre></div></div><!-- contents -->


<hr class="footer"/><address class="footer"><small>
Generated on Sun Jan 13 2013 10:57:23 for Contiki 2.6 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.7.6.1
</small></address>

</body>
</html>
