<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>Contiki 2.6: platform/OrisenPrime/dev/co-ads1015.c Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />



</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">Contiki 2.6
   
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.html"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.html"><span>Modules</span></a></li>
      <li><a href="annotated.html"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li><a href="dirs.html"><span>Directories</span></a></li>
      <li><a href="examples.html"><span>Examples</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>Globals</span></a></li>
    </ul>
  </div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="dir_da81161b528b307837d2c2604d1aafcb.html">platform</a>      </li>
      <li class="navelem"><a class="el" href="dir_61c1519dc7c64251c41b08c597bd4931.html">OrisenPrime</a>      </li>
      <li class="navelem"><a class="el" href="dir_2c3bf02cfca604d79735b3e18babb9e3.html">dev</a>      </li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">co-ads1015.c</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment"> *  CO sensor reader &amp; decoder</span>
<a name="l00003"></a>00003 <span class="comment"> *  co-asd1015.c</span>
<a name="l00004"></a>00004 <span class="comment"> *</span>
<a name="l00005"></a>00005 <span class="comment"> *  Created on: 1 Sep 2011</span>
<a name="l00006"></a>00006 <span class="comment"> *      Author: mcphillips</span>
<a name="l00007"></a>00007 <span class="comment"> *</span>
<a name="l00008"></a>00008 <span class="comment"> *  Updated on: 20 Aug 2012 by Jagun Kwon (j.kwon@cs.ucl.ac.uk)</span>
<a name="l00009"></a>00009 <span class="comment"> *  Refactored to comply with Contiki sensor interface structure</span>
<a name="l00010"></a>00010 <span class="comment"> */</span>
<a name="l00011"></a>00011 
<a name="l00012"></a>00012 <span class="preprocessor">#include &lt;stdio.h&gt;</span>
<a name="l00013"></a>00013 <span class="preprocessor">#include &quot;i2c.h&quot;</span>
<a name="l00014"></a>00014 <span class="preprocessor">#include &quot;include/co-ads1015.h&quot;</span>
<a name="l00015"></a>00015 <span class="preprocessor">#include &quot;lib/sensors.h&quot;</span>
<a name="l00016"></a>00016 
<a name="l00017"></a>00017 
<a name="l00018"></a>00018 <span class="keywordtype">void</span> co_ads1015_init(uint8_t co_ads1015_ainx, uint8_t ads1015_gainx) {
<a name="l00019"></a>00019 
<a name="l00020"></a>00020         uint8_t request = CO_ADS1015_CONF_REG ;
<a name="l00021"></a>00021         uint8_t receive[] = {0,0} ;
<a name="l00022"></a>00022         uint8_t <span class="keyword">set</span>[] = {0,0,0} ;
<a name="l00023"></a>00023 
<a name="l00024"></a>00024         i2c_transmitinit( CO_ADS1015_I2C_ADDR, 1, &amp;request ) ;
<a name="l00025"></a>00025         <span class="keywordflow">while</span>(!i2c_transferred()) <span class="comment">/* Wait for transfer */</span> ;
<a name="l00026"></a>00026 
<a name="l00027"></a>00027         i2c_receiveinit( CO_ADS1015_I2C_ADDR, 2, receive ) ;
<a name="l00028"></a>00028         <span class="keywordflow">while</span>(!i2c_transferred()) <span class="comment">/* Wait for transfer */</span> ;
<a name="l00029"></a>00029 
<a name="l00030"></a>00030         <span class="keyword">set</span>[0] = CO_ADS1015_CONF_REG ;
<a name="l00031"></a>00031         <span class="comment">//conf_set[0] = set[0];</span>
<a name="l00032"></a>00032         <span class="keyword">set</span>[1] =  ((receive[0] &amp; CO_ADS1015_RANGE_MASK &amp; CO_ADS1015_GAIN_MASK) | co_ads1015_ainx | ads1015_gainx | CO_ADS1015_START_SINGLE_CONV|0x01);
<a name="l00033"></a>00033         <span class="comment">// set[1] =  ((receive[0] &amp; CO_ADS1015_RANGE_MASK &amp; CO_ADS1015_GAIN_MASK) | co_ads1015_ainx | ads1015_gainx | CO_ADS1015_START_SINGLE_CONV);</span>
<a name="l00034"></a>00034         <span class="comment">//conf_set[1] = set[1];</span>
<a name="l00035"></a>00035         <span class="keyword">set</span>[2] =  receive[1];
<a name="l00036"></a>00036         <span class="comment">//printf(&quot;set[1]=%02X, set[2]=%02X\r\n&quot;, set[1], set[2]);</span>
<a name="l00037"></a>00037         <span class="comment">//set[2] = 0x83;</span>
<a name="l00038"></a>00038 
<a name="l00039"></a>00039         i2c_transmitinit( CO_ADS1015_I2C_ADDR, 3, <span class="keyword">set</span> ) ;
<a name="l00040"></a>00040         <span class="keywordflow">while</span>(!i2c_transferred()) <span class="comment">/* Wait for transfer */</span> ;
<a name="l00041"></a>00041 
<a name="l00042"></a>00042 }
<a name="l00043"></a>00043 
<a name="l00044"></a>00044 
<a name="l00045"></a>00045 <span class="keywordtype">void</span> co_ads1015_get_data(uint8_t co_ads1015_ainx, uint8_t *buffer) {
<a name="l00046"></a>00046 
<a name="l00047"></a>00047         uint8_t request_MSB = CO_ADS1015_CONV_REG ;
<a name="l00048"></a>00048         uint8_t read[] = {0,0} ;
<a name="l00049"></a>00049 
<a name="l00050"></a>00050         i2c_transmitinit( CO_ADS1015_I2C_ADDR, 1, &amp;request_MSB ) ;
<a name="l00051"></a>00051         <span class="keywordflow">while</span>(!i2c_transferred()) <span class="comment">/* Wait for transfer */</span> ;
<a name="l00052"></a>00052 
<a name="l00053"></a>00053         i2c_receiveinit( CO_ADS1015_I2C_ADDR, 2, read ) ;
<a name="l00054"></a>00054         <span class="keywordflow">while</span>(!i2c_transferred()) <span class="comment">/* Wait for transfer */</span> ;
<a name="l00055"></a>00055         
<a name="l00056"></a>00056         <span class="comment">//printf(&quot;read = 0x%02X, 0x%02X\r\n&quot;, read[0], read[1]);</span>
<a name="l00057"></a>00057         <span class="keywordflow">switch</span> (co_ads1015_ainx){
<a name="l00058"></a>00058                 <span class="keywordflow">case</span> ((0x04)&lt;&lt;4):
<a name="l00059"></a>00059                         buffer[5] = read[0];
<a name="l00060"></a>00060                         buffer[6] = read[1];
<a name="l00061"></a>00061                         <span class="keywordflow">break</span>;
<a name="l00062"></a>00062                 <span class="keywordflow">case</span> ((0x05)&lt;&lt;4):
<a name="l00063"></a>00063                         buffer[7] = read[0];
<a name="l00064"></a>00064                         buffer[8] = read[1];
<a name="l00065"></a>00065                         <span class="keywordflow">break</span>;
<a name="l00066"></a>00066                 <span class="keywordflow">case</span> ((0x06)&lt;&lt;4):
<a name="l00067"></a>00067                         buffer[9] = read[0];
<a name="l00068"></a>00068                         buffer[10] = read[1];
<a name="l00069"></a>00069                         <span class="keywordflow">break</span>;
<a name="l00070"></a>00070                 <span class="keywordflow">case</span> ((0x07)&lt;&lt;4):
<a name="l00071"></a>00071                         buffer[11] = read[0];
<a name="l00072"></a>00072                         buffer[12] = read[1];
<a name="l00073"></a>00073                         <span class="keywordflow">break</span>;
<a name="l00074"></a>00074                 }
<a name="l00075"></a>00075 }
<a name="l00076"></a>00076 
<a name="l00077"></a>00077 uint8_t co_ads1015_check_dataready(<span class="keywordtype">void</span>){
<a name="l00078"></a>00078         uint8_t request = CO_ADS1015_CONF_REG ;
<a name="l00079"></a>00079         uint8_t read[] = {0,0} ;
<a name="l00080"></a>00080 
<a name="l00081"></a>00081         i2c_transmitinit( CO_ADS1015_I2C_ADDR, 1, &amp;request ) ;
<a name="l00082"></a>00082         <span class="keywordflow">while</span>(!i2c_transferred()) <span class="comment">/* Wait for transfer */</span> ;
<a name="l00083"></a>00083 
<a name="l00084"></a>00084         i2c_receiveinit( CO_ADS1015_I2C_ADDR, 2, read ) ;
<a name="l00085"></a>00085         <span class="keywordflow">while</span>(!i2c_transferred()) <span class="comment">/* Wait for transfer */</span> ;
<a name="l00086"></a>00086 
<a name="l00087"></a>00087         <span class="comment">//printf(&quot;0x%02X, &quot;, (char) read[0]);</span>
<a name="l00088"></a>00088         <span class="keywordflow">return</span> ((read[0]&amp;0x80)&gt;&gt;7);
<a name="l00089"></a>00089 }
<a name="l00090"></a>00090         
<a name="l00091"></a>00091 <span class="keywordtype">void</span> co_ads1015_decode_data(<span class="keyword">struct</span> co_ads1015_data *<span class="keyword">const</span> ba, uint8_t *buffer) {
<a name="l00092"></a>00092         int16_t temp_adc;
<a name="l00093"></a>00093         <span class="comment">// int16_t mask = 0x0800, mask_val = 0x7FF;</span>
<a name="l00094"></a>00094         <span class="comment">// TODO Jagun-In Graeme&#39;s code the mask values are different</span>
<a name="l00095"></a>00095         <span class="keyword">const</span> int16_t mask = 0x2000, mask_val = 0x3FFF;
<a name="l00096"></a>00096         temp_adc = ((buffer[5]&lt;&lt;4) + (buffer[6]&gt;&gt;4));
<a name="l00097"></a>00097         <span class="comment">//printf(&quot;Data[0]=0x%X, Data[1]=0x%X, temp_adc=0x%X\r\n&quot;,buffer[5], buffer[6], temp_adc );</span>
<a name="l00098"></a>00098         <span class="keywordflow">if</span> ((temp_adc &amp; mask) == mask){
<a name="l00099"></a>00099                 temp_adc = (((~(temp_adc) &amp; mask_val)+1) *-1) ;
<a name="l00100"></a>00100         }
<a name="l00101"></a>00101         ba-&gt;adc0 = temp_adc;
<a name="l00102"></a>00102 
<a name="l00103"></a>00103         temp_adc = ((buffer[7]&lt;&lt;4) + (buffer[8]&gt;&gt;4));
<a name="l00104"></a>00104         <span class="keywordflow">if</span> ((temp_adc &amp; mask) == mask){
<a name="l00105"></a>00105                 temp_adc = (((~(temp_adc) &amp; mask_val)+1) *-1) ;
<a name="l00106"></a>00106         }
<a name="l00107"></a>00107         ba-&gt;adc1 = temp_adc;
<a name="l00108"></a>00108 
<a name="l00109"></a>00109         temp_adc = ((buffer[9]&lt;&lt;4) + (buffer[10]&gt;&gt;4));
<a name="l00110"></a>00110         <span class="keywordflow">if</span> ((temp_adc &amp; mask) == mask){
<a name="l00111"></a>00111                 temp_adc = (((~(temp_adc) &amp; mask_val)+1)*-1) ;
<a name="l00112"></a>00112         }
<a name="l00113"></a>00113         ba-&gt;adc2 = temp_adc;
<a name="l00114"></a>00114 
<a name="l00115"></a>00115         temp_adc = ((buffer[11]&lt;&lt;4) + (buffer[12]&gt;&gt;4));
<a name="l00116"></a>00116         <span class="keywordflow">if</span> ((temp_adc &amp; mask) == mask){
<a name="l00117"></a>00117                 temp_adc = (((~(temp_adc) &amp; mask_val)+1)*-1) ;
<a name="l00118"></a>00118         }
<a name="l00119"></a>00119         ba-&gt;adc3 = temp_adc;
<a name="l00120"></a>00120 <span class="preprocessor">#if 0</span>
<a name="l00121"></a>00121 <span class="preprocessor"></span>        temp_adc = (buffer[5]&lt;&lt;4) + (buffer[6]&gt;&gt;4);
<a name="l00122"></a>00122         <span class="keywordflow">if</span> ((buffer[5] &amp; 0x80) == 0x80){
<a name="l00123"></a>00123                 temp_adc = temp_adc | 0xF800;
<a name="l00124"></a>00124         }
<a name="l00125"></a>00125 
<a name="l00126"></a>00126         ba-&gt;adc0 = temp_adc;
<a name="l00127"></a>00127 <span class="preprocessor">#endif</span>
<a name="l00128"></a>00128 <span class="preprocessor"></span><span class="comment">//end</span>
<a name="l00129"></a>00129 }
<a name="l00130"></a>00130 
<a name="l00131"></a>00131 <span class="keywordtype">void</span> co_ads1015_start_adc(<span class="keywordtype">void</span>) {
<a name="l00132"></a>00132 
<a name="l00133"></a>00133         uint8_t request = CO_ADS1015_CONV_REG ;
<a name="l00134"></a>00134         i2c_transmitinit( CO_ADS1015_I2C_ADDR, 1, &amp;request ) ;
<a name="l00135"></a>00135         <span class="keywordflow">while</span>(!i2c_transferred()) <span class="comment">/* Wait for transfer */</span> ;
<a name="l00136"></a>00136         <a class="code" href="a01892.html#ga08450c50f5e6f4cf056d39ed340313e6" title="Delay up to 65535 milliseconds.">clock_delay_msec</a>(50);
<a name="l00137"></a>00137 }
<a name="l00138"></a>00138 
<a name="l00139"></a>00139 
<a name="l00140"></a>00140 <span class="comment">// Jagun: 20 Aug 2012: added the following to comply with</span>
<a name="l00141"></a>00141 <span class="comment">// Contiki sensor interface structure</span>
<a name="l00142"></a>00142 
<a name="l00143"></a>00143 <span class="comment">// TODO make these less visible to others...</span>
<a name="l00144"></a>00144 <span class="keyword">struct </span>co_ads1015_data co_adc_data;
<a name="l00145"></a>00145 uint8_t co_ads1015_data_buffer[15];
<a name="l00146"></a>00146 
<a name="l00147"></a>00147 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00148"></a>00148 getCOadc(<span class="keywordtype">void</span>)
<a name="l00149"></a>00149 {
<a name="l00150"></a>00150 <span class="comment">//    co_ads1015_start_adc();</span>
<a name="l00151"></a>00151         co_ads1015_init(CO_ADS1015_AIN0,CO_ADS1015_GAIN2);
<a name="l00152"></a>00152     co_ads1015_get_data(CO_ADS1015_AIN0, co_ads1015_data_buffer);
<a name="l00153"></a>00153     set_fletcher_ck(&amp;co_ads1015_data_buffer[2],11);
<a name="l00154"></a>00154     co_ads1015_decode_data(&amp;co_adc_data, co_ads1015_data_buffer);
<a name="l00155"></a>00155     <span class="comment">//PRINTF(&quot;ADC0 value = %d\n&quot;, co_adc_data.adc0);</span>
<a name="l00156"></a>00156     <span class="keywordflow">return</span> co_adc_data.adc0;
<a name="l00157"></a>00157 }
<a name="l00158"></a>00158 
<a name="l00159"></a>00159 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00160"></a>00160 value(<span class="keywordtype">int</span> type)
<a name="l00161"></a>00161 {
<a name="l00162"></a>00162         <span class="comment">// TODO Cater for RAW and DECODED values</span>
<a name="l00163"></a>00163         <span class="keywordflow">switch</span>(type) {
<a name="l00164"></a>00164                 <span class="keywordflow">case</span> 0:
<a name="l00165"></a>00165                 <span class="keywordflow">default</span>:
<a name="l00166"></a>00166                         <span class="keywordflow">return</span> getCOadc();
<a name="l00167"></a>00167         }
<a name="l00168"></a>00168 }
<a name="l00169"></a>00169 
<a name="l00170"></a>00170 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00171"></a>00171 status(<span class="keywordtype">int</span> type)
<a name="l00172"></a>00172 {
<a name="l00173"></a>00173         <span class="comment">// TODO We don&#39;t seem to have an equivalent for this</span>
<a name="l00174"></a>00174         <span class="keywordflow">return</span> 1;
<a name="l00175"></a>00175 }
<a name="l00176"></a>00176 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00177"></a>00177 configure(<span class="keywordtype">int</span> type, <span class="keywordtype">int</span> c)
<a name="l00178"></a>00178 {
<a name="l00179"></a>00179         <span class="comment">// TODO Check if these are necessary: Jagun: didn&#39;t make any difference</span>
<a name="l00180"></a>00180         <span class="comment">/*</span>
<a name="l00181"></a>00181 <span class="comment">        //what are these parameters fNEWor - we can do without?</span>
<a name="l00182"></a>00182 <span class="comment">    co_ads1015_data_buffer[0] = 0xBF;</span>
<a name="l00183"></a>00183 <span class="comment">    co_ads1015_data_buffer[1] = 0x3F;</span>
<a name="l00184"></a>00184 <span class="comment">    co_ads1015_data_buffer[2] = 0x06;</span>
<a name="l00185"></a>00185 <span class="comment">    co_ads1015_data_buffer[3] = 0x01;</span>
<a name="l00186"></a>00186 <span class="comment">    co_ads1015_data_buffer[4] = 0x0F;</span>
<a name="l00187"></a>00187 <span class="comment">    co_ads1015_data_buffer[12] = 0x00;</span>
<a name="l00188"></a>00188 <span class="comment">        */</span>
<a name="l00189"></a>00189 
<a name="l00190"></a>00190         co_ads1015_init(CO_ADS1015_AIN0,CO_ADS1015_GAIN2);
<a name="l00191"></a>00191         <span class="keywordflow">return</span> 1;
<a name="l00192"></a>00192 }
<a name="l00193"></a>00193 
<a name="l00194"></a>00194 <span class="comment">// Instantiate the sensor </span>
<a name="l00195"></a>00195 SENSORS_SENSOR(co_sensor, <span class="stringliteral">&quot;CO-Sensor&quot;</span>, value, configure, status);
<a name="l00196"></a>00196 
<a name="l00197"></a>00197 
</pre></div></div><!-- contents -->


<hr class="footer"/><address class="footer"><small>
Generated on Sun Jan 13 2013 10:57:27 for Contiki 2.6 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.7.6.1
</small></address>

</body>
</html>
