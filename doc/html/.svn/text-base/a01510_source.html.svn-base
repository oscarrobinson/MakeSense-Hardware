<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>Contiki 2.6: platform/OrisenPrime/contiki-prime-main.c Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />



</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">Contiki 2.6
   
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.html"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.html"><span>Modules</span></a></li>
      <li><a href="annotated.html"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li><a href="dirs.html"><span>Directories</span></a></li>
      <li><a href="examples.html"><span>Examples</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>Globals</span></a></li>
    </ul>
  </div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="dir_da81161b528b307837d2c2604d1aafcb.html">platform</a>      </li>
      <li class="navelem"><a class="el" href="dir_61c1519dc7c64251c41b08c597bd4931.html">OrisenPrime</a>      </li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">contiki-prime-main.c</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment"> * Copyright (c) 2010, Mariano Alvira &lt;mar@devl.org&gt; and other contributors</span>
<a name="l00003"></a>00003 <span class="comment"> * to the MC1322x project (http://mc1322x.devl.org) and Contiki.</span>
<a name="l00004"></a>00004 <span class="comment"> *</span>
<a name="l00005"></a>00005 <span class="comment"> * Copyright (c) 2006, Technical University of Munich</span>
<a name="l00006"></a>00006 <span class="comment"> * All rights reserved.</span>
<a name="l00007"></a>00007 <span class="comment"> *</span>
<a name="l00008"></a>00008 <span class="comment"> * Redistribution and use in source and binary forms, with or without</span>
<a name="l00009"></a>00009 <span class="comment"> * modification, are permitted provided that the following conditions</span>
<a name="l00010"></a>00010 <span class="comment"> * are met:</span>
<a name="l00011"></a>00011 <span class="comment"> * 1. Redistributions of source code must retain the above copyright</span>
<a name="l00012"></a>00012 <span class="comment"> *    notice, this list of conditions and the following disclaimer.</span>
<a name="l00013"></a>00013 <span class="comment"> * 2. Redistributions in binary form must reproduce the above copyright</span>
<a name="l00014"></a>00014 <span class="comment"> *    notice, this list of conditions and the following disclaimer in the</span>
<a name="l00015"></a>00015 <span class="comment"> *    documentation and/or other materials provided with the distribution.</span>
<a name="l00016"></a>00016 <span class="comment"> * 3. Neither the name of the Institute nor the names of its contributors</span>
<a name="l00017"></a>00017 <span class="comment"> *    may be used to endorse or promote products derived from this software</span>
<a name="l00018"></a>00018 <span class="comment"> *    without specific prior written permission.</span>
<a name="l00019"></a>00019 <span class="comment"> *</span>
<a name="l00020"></a>00020 <span class="comment"> * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS&#39;&#39; AND</span>
<a name="l00021"></a>00021 <span class="comment"> * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</span>
<a name="l00022"></a>00022 <span class="comment"> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE</span>
<a name="l00023"></a>00023 <span class="comment"> * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE</span>
<a name="l00024"></a>00024 <span class="comment"> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</span>
<a name="l00025"></a>00025 <span class="comment"> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS</span>
<a name="l00026"></a>00026 <span class="comment"> * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)</span>
<a name="l00027"></a>00027 <span class="comment"> * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT</span>
<a name="l00028"></a>00028 <span class="comment"> * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY</span>
<a name="l00029"></a>00029 <span class="comment"> * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF</span>
<a name="l00030"></a>00030 <span class="comment"> * SUCH DAMAGE.</span>
<a name="l00031"></a>00031 <span class="comment"> *</span>
<a name="l00032"></a>00032 <span class="comment"> * This file is part of the Contiki operating system.</span>
<a name="l00033"></a>00033 <span class="comment"> *</span>
<a name="l00034"></a>00034 <span class="comment"> * Adapted by Graeme McPhillips, Jagun Kwon and Stephen Hailes 2012-13, Orisen Ltd.</span>
<a name="l00035"></a>00035 <span class="comment"> *</span>
<a name="l00036"></a>00036 <span class="comment"> * @(#)$$</span>
<a name="l00037"></a>00037 <span class="comment"> */</span>
<a name="l00038"></a>00038 
<a name="l00039"></a>00039 <span class="preprocessor">#include &lt;signal.h&gt;</span>
<a name="l00040"></a>00040 <span class="preprocessor">#include &lt;stdio.h&gt;</span>
<a name="l00041"></a>00041 <span class="preprocessor">#include &lt;string.h&gt;</span>
<a name="l00042"></a>00042 
<a name="l00043"></a>00043 <span class="preprocessor">#include &quot;contiki.h&quot;</span>
<a name="l00044"></a>00044 
<a name="l00045"></a>00045 <span class="preprocessor">#include &quot;dev/leds.h&quot;</span>
<a name="l00046"></a>00046 <span class="preprocessor">#include &quot;<a class="code" href="a00177.html" title="Generic serial I/O process header filer.">dev/serial-line.h</a>&quot;</span>
<a name="l00047"></a>00047 <span class="preprocessor">#include &quot;dev/slip.h&quot;</span>
<a name="l00048"></a>00048 <span class="preprocessor">#include &quot;dev/xmem.h&quot;</span>
<a name="l00049"></a>00049 <span class="preprocessor">#include &quot;button-sensors.h&quot;</span>
<a name="l00050"></a>00050 <span class="preprocessor">#include &quot;lib/random.h&quot;</span>
<a name="l00051"></a>00051 <span class="preprocessor">#include &quot;<a class="code" href="a00303.html" title="Include file for the Contiki low-layer network stack (NETSTACK)">net/netstack.h</a>&quot;</span>
<a name="l00052"></a>00052 <span class="preprocessor">#include &quot;<a class="code" href="a00270.html" title="802.15.4 frame creation and parsing functions">net/mac/frame802154.h</a>&quot;</span>
<a name="l00053"></a>00053 <span class="preprocessor">#include &quot;adc.h&quot;</span>
<a name="l00054"></a>00054 <span class="preprocessor">#include &quot;lib/include/gpio.h&quot;</span>
<a name="l00055"></a>00055 <span class="preprocessor">#include &quot;lib/include/i2c.h&quot;</span>
<a name="l00056"></a>00056 
<a name="l00057"></a>00057 <span class="preprocessor">#if WITH_UIP6</span>
<a name="l00058"></a>00058 <span class="preprocessor"></span><span class="preprocessor">#include &quot;<a class="code" href="a00398.html" title="Header file for the 6lowpan implementation (RFC4944 and draft-hui-6lowpan-hc-01)">net/sicslowpan.h</a>&quot;</span>
<a name="l00059"></a>00059 <span class="preprocessor">#include &quot;<a class="code" href="a00415.html" title="Network interface and stateless autoconfiguration (RFC 4862)">net/uip-ds6.h</a>&quot;</span>
<a name="l00060"></a>00060 <span class="preprocessor">#include &quot;<a class="code" href="a00292.html" title="MAC interface for packaging radio packets into 802.15.4 frames.">net/mac/sicslowmac.h</a>&quot;</span>
<a name="l00061"></a>00061 <span class="preprocessor">#endif </span><span class="comment">/* WITH_UIP6 */</span>
<a name="l00062"></a>00062 
<a name="l00063"></a>00063 <span class="preprocessor">#include &quot;<a class="code" href="a00317.html" title="Header file for the Rime stack.">net/rime.h</a>&quot;</span>
<a name="l00064"></a>00064 <span class="preprocessor">#if TIMESYNCH_CONF_ENABLED</span>
<a name="l00065"></a>00065 <span class="preprocessor"></span><span class="preprocessor">#include &quot;<a class="code" href="a00382.html" title="Header file for a simple time synchronization mechanism.">net/rime/timesynch.h</a>&quot;</span>
<a name="l00066"></a>00066 <span class="preprocessor">#endif</span>
<a name="l00067"></a>00067 <span class="preprocessor"></span>
<a name="l00068"></a>00068 <span class="preprocessor">#include &quot;<a class="code" href="a00446.html" title="Header file for module for automatically starting and exiting a list of processes.">sys/autostart.h</a>&quot;</span>
<a name="l00069"></a>00069 <span class="preprocessor">#include &quot;<a class="code" href="a00472.html" title="Header file for the Contiki profiling system.">sys/profile.h</a>&quot;</span>
<a name="l00070"></a>00070 
<a name="l00071"></a>00071 <span class="comment">/* from libmc1322x */</span>
<a name="l00072"></a>00072 <span class="preprocessor">#include &quot;mc1322x.h&quot;</span>
<a name="l00073"></a>00073 <span class="preprocessor">#include &quot;default_lowlevel.h&quot;</span>
<a name="l00074"></a>00074 <span class="preprocessor">#include &quot;contiki-maca.h&quot;</span>
<a name="l00075"></a>00075 <span class="preprocessor">#include &quot;contiki-uart.h&quot;</span>
<a name="l00076"></a>00076 
<a name="l00077"></a>00077 <span class="preprocessor">#include &lt;board.h&gt;</span>
<a name="l00078"></a>00078 <span class="comment">//#include &quot;prime_software_defines.h&quot;</span>
<a name="l00079"></a>00079 <span class="preprocessor">#include &quot;dev/include/button-ints.h&quot;</span>
<a name="l00080"></a>00080 
<a name="l00081"></a>00081 <span class="preprocessor">#define DEBUG 0</span>
<a name="l00082"></a>00082 <span class="preprocessor"></span><span class="preprocessor">#if DEBUG</span>
<a name="l00083"></a>00083 <span class="preprocessor"></span><span class="preprocessor">#include &lt;stdio.h&gt;</span>
<a name="l00084"></a>00084 <span class="preprocessor">#define PRINTF(...) printf(__VA_ARGS__)</span>
<a name="l00085"></a>00085 <span class="preprocessor"></span><span class="preprocessor">#define PRINT6ADDR(addr) PRINTF(&quot; %02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x &quot;, ((u8_t *)addr)[0], ((u8_t *)addr)[1], ((u8_t *)addr)[2], ((u8_t *)addr)[3], ((u8_t *)addr)[4], ((u8_t *)addr)[5], ((u8_t *)addr)[6], ((u8_t *)addr)[7], ((u8_t *)addr)[8], ((u8_t *)addr)[9], ((u8_t *)addr)[10], ((u8_t *)addr)[11], ((u8_t *)addr)[12], ((u8_t *)addr)[13], ((u8_t *)addr)[14], ((u8_t *)addr)[15])</span>
<a name="l00086"></a>00086 <span class="preprocessor"></span><span class="preprocessor">#define PRINTLLADDR(lladdr) PRINTF(&quot; %02x:%02x:%02x:%02x:%02x:%02x &quot;,(lladdr)-&gt;addr[0], (lladdr)-&gt;addr[1], (lladdr)-&gt;addr[2], (lladdr)-&gt;addr[3],(lladdr)-&gt;addr[4], (lladdr)-&gt;addr[5])</span>
<a name="l00087"></a>00087 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00088"></a>00088 <span class="preprocessor"></span><span class="preprocessor">#define PRINTF(...)</span>
<a name="l00089"></a>00089 <span class="preprocessor"></span><span class="preprocessor">#define PRINT6ADDR(addr)</span>
<a name="l00090"></a>00090 <span class="preprocessor"></span><span class="preprocessor">#define PRINTLLADDR(addr)</span>
<a name="l00091"></a>00091 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00092"></a>00092 <span class="preprocessor"></span>
<a name="l00093"></a>00093 <span class="preprocessor">#ifndef RIMEADDR_NVM</span>
<a name="l00094"></a>00094 <span class="preprocessor"></span><span class="preprocessor">#define RIMEADDR_NVM 0x1E000</span>
<a name="l00095"></a>00095 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00096"></a>00096 <span class="preprocessor"></span>
<a name="l00097"></a>00097 <span class="preprocessor">#ifndef RIMEADDR_NBYTES</span>
<a name="l00098"></a>00098 <span class="preprocessor"></span><span class="preprocessor">#define RIMEADDR_NBYTES 8</span>
<a name="l00099"></a>00099 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00100"></a>00100 <span class="preprocessor"></span>
<a name="l00101"></a>00101 <span class="comment">/*</span>
<a name="l00102"></a>00102 <span class="comment">#define PLATFORM_DEBUG 0</span>
<a name="l00103"></a>00103 <span class="comment">#if PLATFORM_DEBUG</span>
<a name="l00104"></a>00104 <span class="comment">#define PRINTF(...) printf(__VA_ARGS__)</span>
<a name="l00105"></a>00105 <span class="comment">#else</span>
<a name="l00106"></a>00106 <span class="comment">#define PRINTF(...)</span>
<a name="l00107"></a>00107 <span class="comment">#endif</span>
<a name="l00108"></a>00108 <span class="comment">*/</span>
<a name="l00109"></a>00109 
<a name="l00110"></a>00110 <span class="preprocessor">#if UIP_CONF_ROUTER</span>
<a name="l00111"></a>00111 <span class="preprocessor"></span>
<a name="l00112"></a>00112 <span class="preprocessor">#ifndef UIP_ROUTER_MODULE</span>
<a name="l00113"></a>00113 <span class="preprocessor"></span><span class="preprocessor">#ifdef UIP_CONF_ROUTER_MODULE</span>
<a name="l00114"></a>00114 <span class="preprocessor"></span><span class="preprocessor">#define UIP_ROUTER_MODULE UIP_CONF_ROUTER_MODULE</span>
<a name="l00115"></a>00115 <span class="preprocessor"></span><span class="preprocessor">#else </span><span class="comment">/* UIP_CONF_ROUTER_MODULE */</span>
<a name="l00116"></a>00116 <span class="preprocessor">#define UIP_ROUTER_MODULE rimeroute</span>
<a name="l00117"></a>00117 <span class="preprocessor"></span><span class="preprocessor">#endif </span><span class="comment">/* UIP_CONF_ROUTER_MODULE */</span>
<a name="l00118"></a>00118 <span class="preprocessor">#endif </span><span class="comment">/* UIP_ROUTER_MODULE */</span>
<a name="l00119"></a>00119 
<a name="l00120"></a>00120 <span class="keyword">extern</span> <span class="keyword">const</span> <span class="keyword">struct </span>uip_router UIP_ROUTER_MODULE;
<a name="l00121"></a>00121 
<a name="l00122"></a>00122 <span class="preprocessor">#endif </span><span class="comment">/* UIP_CONF_ROUTER */</span>
<a name="l00123"></a>00123 
<a name="l00124"></a>00124 <span class="preprocessor">#if DCOSYNCH_CONF_ENABLED</span>
<a name="l00125"></a>00125 <span class="preprocessor"></span><span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="a00092.html" title="A timer.">timer</a> mgt_timer;
<a name="l00126"></a>00126 <span class="preprocessor">#endif</span>
<a name="l00127"></a>00127 <span class="preprocessor"></span>
<a name="l00128"></a>00128 <span class="preprocessor">#ifndef WITH_UIP</span>
<a name="l00129"></a>00129 <span class="preprocessor"></span><span class="preprocessor">#define WITH_UIP 0</span>
<a name="l00130"></a>00130 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00131"></a>00131 <span class="preprocessor"></span>
<a name="l00132"></a>00132 <span class="preprocessor">#if WITH_UIP</span>
<a name="l00133"></a>00133 <span class="preprocessor"></span><span class="preprocessor">#include &quot;<a class="code" href="a00435.html" title="Header file for the uIP TCP/IP stack.">net/uip.h</a>&quot;</span>
<a name="l00134"></a>00134 <span class="preprocessor">#include &quot;<a class="code" href="a00419.html" title="uIP packet forwarding header file.">net/uip-fw.h</a>&quot;</span>
<a name="l00135"></a>00135 <span class="preprocessor">#include &quot;net/uip-fw-drv.h&quot;</span>
<a name="l00136"></a>00136 <span class="preprocessor">#include &quot;<a class="code" href="a00427.html" title="Header file for tunnelling uIP over Rime mesh.">net/uip-over-mesh.h</a>&quot;</span>
<a name="l00137"></a>00137 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="a00110.html" title="Representation of a uIP network interface.">uip_fw_netif</a> slipif =
<a name="l00138"></a>00138   {<a class="code" href="a01809.html#ga6bdb97e217db4401d4433eb330293eaf" title="Instantiating macro for a uIP network interface.">UIP_FW_NETIF</a>(192,168,1,2, 255,255,255,255, slip_send)};
<a name="l00139"></a>00139 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="a00110.html" title="Representation of a uIP network interface.">uip_fw_netif</a> meshif =
<a name="l00140"></a>00140   {<a class="code" href="a01809.html#ga6bdb97e217db4401d4433eb330293eaf" title="Instantiating macro for a uIP network interface.">UIP_FW_NETIF</a>(172,16,0,0, 255,255,0,0, uip_over_mesh_send)};
<a name="l00141"></a>00141 
<a name="l00142"></a>00142 <span class="preprocessor">#endif </span><span class="comment">/* WITH_UIP */</span>
<a name="l00143"></a>00143 
<a name="l00144"></a>00144 <span class="preprocessor">#define UIP_OVER_MESH_CHANNEL 8</span>
<a name="l00145"></a>00145 <span class="preprocessor"></span><span class="preprocessor">#if WITH_UIP</span>
<a name="l00146"></a>00146 <span class="preprocessor"></span><span class="keyword">static</span> uint8_t is_gateway;
<a name="l00147"></a>00147 <span class="preprocessor">#endif </span><span class="comment">/* WITH_UIP */</span>
<a name="l00148"></a>00148 
<a name="l00149"></a>00149 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00150"></a><a class="code" href="a01828.html#gab58e1ceb7cb73ca2bcd73146b6c1b4e7">00150</a> <span class="keywordtype">void</span> <a class="code" href="a01828.html#gab58e1ceb7cb73ca2bcd73146b6c1b4e7" title="Print out a uIP log message.">uip_log</a>(<span class="keywordtype">char</span> *msg) { printf(<span class="stringliteral">&quot;%c&quot;</span>,msg); }
<a name="l00151"></a>00151 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00152"></a>00152 <span class="preprocessor">#ifndef RF_CHANNEL</span>
<a name="l00153"></a>00153 <span class="preprocessor"></span><span class="preprocessor">#define RF_CHANNEL              26</span>
<a name="l00154"></a>00154 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00155"></a>00155 <span class="preprocessor"></span><span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00156"></a>00156 <span class="preprocessor">#if WITH_UIP</span>
<a name="l00157"></a>00157 <span class="preprocessor"></span><span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00158"></a>00158 set_gateway(<span class="keywordtype">void</span>)
<a name="l00159"></a>00159 {
<a name="l00160"></a>00160   <span class="keywordflow">if</span>(!is_gateway) {
<a name="l00161"></a>00161     printf(<span class="stringliteral">&quot;%d.%d: making myself the IP network gateway.\n\n&quot;</span>,
<a name="l00162"></a>00162            <a class="code" href="a01845.html#gaade5a80096fb3b4296cf89eeaca3087d" title="The Rime address of the node.">rimeaddr_node_addr</a>.u8[0], <a class="code" href="a01845.html#gaade5a80096fb3b4296cf89eeaca3087d" title="The Rime address of the node.">rimeaddr_node_addr</a>.u8[1]);
<a name="l00163"></a>00163     printf(<span class="stringliteral">&quot;IPv4 address of the gateway: %d.%d.%d.%d\n\n&quot;</span>,
<a name="l00164"></a>00164            <a class="code" href="a01815.html#gab6ae63b3e36da2ea6598ea91ad049516" title="Convert an IP address to four bytes separated by commas.">uip_ipaddr_to_quad</a>(&amp;uip_hostaddr));
<a name="l00165"></a>00165     uip_over_mesh_set_gateway(&amp;<a class="code" href="a01845.html#gaade5a80096fb3b4296cf89eeaca3087d" title="The Rime address of the node.">rimeaddr_node_addr</a>);
<a name="l00166"></a>00166     uip_over_mesh_make_announced_gateway();
<a name="l00167"></a>00167     is_gateway = 1;
<a name="l00168"></a>00168   }
<a name="l00169"></a>00169 }
<a name="l00170"></a>00170 <span class="preprocessor">#endif </span><span class="comment">/* WITH_UIP */</span>
<a name="l00171"></a>00171 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00172"></a>00172 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00173"></a>00173 print_processes(<span class="keyword">struct</span> process * <span class="keyword">const</span> processes[])
<a name="l00174"></a>00174 {
<a name="l00175"></a>00175   <span class="comment">/*  const struct process * const * p = processes;*/</span>
<a name="l00176"></a>00176   PRINTF(<span class="stringliteral">&quot;Starting&quot;</span>);
<a name="l00177"></a>00177   <span class="keywordflow">while</span>(*processes != <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>) {
<a name="l00178"></a>00178           PRINTF(<span class="stringliteral">&quot; &#39;%s&#39;&quot;</span>, (*processes)-&gt;name);
<a name="l00179"></a>00179     processes++;
<a name="l00180"></a>00180   }
<a name="l00181"></a>00181   PRINTF(<span class="stringliteral">&quot;\r\n&quot;</span>);
<a name="l00182"></a>00182 }
<a name="l00183"></a>00183 <span class="comment">/*--------------------------------------------------------------------------*/</span>
<a name="l00184"></a>00184 
<a name="l00185"></a>00185 
<a name="l00186"></a>00186 
<a name="l00187"></a>00187 <span class="keyword">extern</span> <span class="keyword">volatile</span> int16_t temp_val;
<a name="l00188"></a>00188 
<a name="l00189"></a>00189 <span class="keyword">volatile</span> uint8_t kbi4_flag;
<a name="l00190"></a>00190 <span class="keyword">volatile</span> uint8_t kbi5_flag;
<a name="l00191"></a>00191 <span class="keyword">volatile</span> uint8_t kbi6_flag;
<a name="l00192"></a>00192 <span class="keyword">volatile</span> uint8_t kbi7_flag;
<a name="l00193"></a>00193 <span class="keyword">volatile</span> uint8_t tmr1_count = 0;
<a name="l00194"></a>00194 <span class="keyword">volatile</span> uint8_t timer_delay;
<a name="l00195"></a>00195 <span class="keyword">volatile</span> uint8_t count;
<a name="l00196"></a>00196 
<a name="l00197"></a>00197 <span class="comment">// tmr0_init(void): This is done in cpu/mc1322x/clock.c::clock_init()</span>
<a name="l00198"></a>00198 
<a name="l00199"></a>00199 <span class="keywordtype">void</span> tmr1_init(<span class="keywordtype">void</span>) {
<a name="l00200"></a>00200         *TMR_ENBL     &amp;= ~(TMR1);                    <span class="comment">/* tmrs reset to enabled */</span>
<a name="l00201"></a>00201         *TMR1_SCTRL   = 0;
<a name="l00202"></a>00202         *TMR1_CSCTRL  = 0x0040;
<a name="l00203"></a>00203         *TMR1_LOAD    = 0;                    <span class="comment">/* reload to zero */</span>
<a name="l00204"></a>00204 <span class="comment">//      *TMR1_COMP_UP = 7500;                /* trigger a reload at the end */</span>
<a name="l00205"></a>00205 <span class="comment">//      *TMR1_CMPLD1  = 7500;                /* compare 1 triggered reload level, 25Hz */</span>
<a name="l00206"></a>00206         *TMR1_COMP_UP = 37500;                <span class="comment">/* trigger a reload at the end */</span>
<a name="l00207"></a>00207         *TMR1_CMPLD1  = 37500;                <span class="comment">/* compare 1 triggered reload level, 5Hz */</span>
<a name="l00208"></a>00208         *TMR1_CNTR    = 0;                    <span class="comment">/* reset count register */</span>
<a name="l00209"></a>00209         *TMR1_CTRL    = (COUNT_MODE1&lt;&lt;13) | (PRIME_SRC1&lt;&lt;9) | (SEC_SRC1&lt;&lt;7) | (ONCE1&lt;&lt;6) | (LEN1&lt;&lt;5) | (DIR1&lt;&lt;4) | (CO_INIT1&lt;&lt;3) | (OUT_MODE1);
<a name="l00210"></a>00210         *TMR_ENBL     |= TMR1;                  <span class="comment">/* enable tmr1 */</span>
<a name="l00211"></a>00211 }
<a name="l00212"></a>00212 
<a name="l00213"></a>00213 <span class="keywordtype">void</span> io_bus_init(<span class="keywordtype">void</span>) {
<a name="l00214"></a>00214         GPIO-&gt;FUNC_SEL.IO_0_OUT = 0;
<a name="l00215"></a>00215         GPIO-&gt;PAD_DIR.IO_0_OUT  = 1;
<a name="l00216"></a>00216         GPIO-&gt;FUNC_SEL.IO_1_OUT = 0;
<a name="l00217"></a>00217         GPIO-&gt;PAD_DIR.IO_1_OUT  = 1;
<a name="l00218"></a>00218         GPIO-&gt;FUNC_SEL.IO_2_OUT = 0;
<a name="l00219"></a>00219         GPIO-&gt;PAD_DIR.IO_2_OUT  = 1;
<a name="l00220"></a>00220         GPIO-&gt;FUNC_SEL.IO_3_OUT = 0;
<a name="l00221"></a>00221         GPIO-&gt;PAD_DIR.IO_3_OUT  = 1;
<a name="l00222"></a>00222 }
<a name="l00223"></a>00223 
<a name="l00224"></a>00224 <span class="keywordtype">void</span> sd_card_switch_init(<span class="keywordtype">void</span>) {
<a name="l00225"></a>00225         GPIO-&gt;FUNC_SEL.SD_CARD_SWITCH    = 1;
<a name="l00226"></a>00226         GPIO-&gt;PAD_DIR.SD_CARD_SWITCH     = 0;
<a name="l00227"></a>00227         GPIO-&gt;PAD_PU_SEL.SD_CARD_SWITCH  = 1;
<a name="l00228"></a>00228         GPIO-&gt;PAD_PU_EN.SD_CARD_SWITCH   = 1;
<a name="l00229"></a>00229         GPIO-&gt;PAD_HYST_EN.SD_CARD_SWITCH = 1;
<a name="l00230"></a>00230 }
<a name="l00231"></a>00231 
<a name="l00232"></a>00232 <span class="keywordtype">void</span> port1_enable_init(<span class="keywordtype">void</span>) {
<a name="l00233"></a>00233         GPIO-&gt;FUNC_SEL.PORT1_ENABLE_PIN = 1;
<a name="l00234"></a>00234         GPIO-&gt;PAD_DIR.PORT1_ENABLE_PIN  = 1;
<a name="l00235"></a>00235 }
<a name="l00236"></a>00236 
<a name="l00237"></a>00237 <span class="keywordtype">void</span> port2_enable_init(<span class="keywordtype">void</span>) {
<a name="l00238"></a>00238         GPIO-&gt;FUNC_SEL.PORT2_ENABLE_PIN = 1;
<a name="l00239"></a>00239         GPIO-&gt;PAD_DIR.PORT2_ENABLE_PIN  = 1;
<a name="l00240"></a>00240 }
<a name="l00241"></a>00241 
<a name="l00242"></a>00242 <span class="keywordtype">void</span> port1_io_init(<span class="keywordtype">void</span>) {
<a name="l00243"></a>00243         GPIO-&gt;FUNC_SEL.PORT1_IO_1 = 0;          <span class="comment">/* 00 is for the default mode which for most is GPIO - I2C and others will configure this differently  */</span>
<a name="l00244"></a>00244         GPIO-&gt;PAD_DIR.PORT1_IO_1  = 1;          <span class="comment">/* 1 is an output - configure as required */</span>
<a name="l00245"></a>00245         GPIO-&gt;FUNC_SEL.PORT1_IO_2 = 0;
<a name="l00246"></a>00246         GPIO-&gt;PAD_DIR.PORT1_IO_2  = 1;
<a name="l00247"></a>00247         GPIO-&gt;FUNC_SEL.PORT1_IO_3 = 0;
<a name="l00248"></a>00248         GPIO-&gt;PAD_DIR.PORT1_IO_3  = 1;
<a name="l00249"></a>00249         GPIO-&gt;FUNC_SEL.PORT1_IO_4 = 0;
<a name="l00250"></a>00250         GPIO-&gt;PAD_DIR.PORT1_IO_4  = 1;
<a name="l00251"></a>00251         GPIO-&gt;FUNC_SEL.PORT1_IO_5 = 0;
<a name="l00252"></a>00252         GPIO-&gt;PAD_DIR.PORT1_IO_5  = 1;
<a name="l00253"></a>00253         GPIO-&gt;FUNC_SEL.PORT1_IO_6 = 0;
<a name="l00254"></a>00254         GPIO-&gt;PAD_DIR.PORT1_IO_6  = 1;
<a name="l00255"></a>00255 
<a name="l00256"></a>00256         <span class="comment">/* These are ADC1 and ADC2 */</span>
<a name="l00257"></a>00257         <span class="comment">/* Not for using as IO */</span>
<a name="l00258"></a>00258         <span class="comment">/*</span>
<a name="l00259"></a>00259 <span class="comment">        GPIO-&gt;FUNC_SEL.PORT1_IO_7 = 00;</span>
<a name="l00260"></a>00260 <span class="comment">        GPIO-&gt;PAD_DIR.PORT1_IO_7 = 1;</span>
<a name="l00261"></a>00261 <span class="comment">        GPIO-&gt;FUNC_SEL.PORT1_IO_8 = 00;</span>
<a name="l00262"></a>00262 <span class="comment">        GPIO-&gt;PAD_DIR.PORT1_IO_8 = 1;</span>
<a name="l00263"></a>00263 <span class="comment">        */</span>
<a name="l00264"></a>00264 }
<a name="l00265"></a>00265 
<a name="l00266"></a>00266 <span class="keywordtype">void</span> port2_io_init(<span class="keywordtype">void</span>) {
<a name="l00267"></a>00267         GPIO-&gt;FUNC_SEL.PORT2_IO_1 = 0;
<a name="l00268"></a>00268         GPIO-&gt;PAD_DIR.PORT2_IO_1  = 0;          <span class="comment">/* 0 is an input - configure as required */</span>
<a name="l00269"></a>00269         GPIO-&gt;FUNC_SEL.PORT2_IO_2 = 0;
<a name="l00270"></a>00270         GPIO-&gt;PAD_DIR.PORT2_IO_2  = 0;
<a name="l00271"></a>00271         GPIO-&gt;FUNC_SEL.PORT2_IO_3 = 0;
<a name="l00272"></a>00272         GPIO-&gt;PAD_DIR.PORT2_IO_3  = 0;
<a name="l00273"></a>00273         GPIO-&gt;FUNC_SEL.PORT2_IO_4 = 0;
<a name="l00274"></a>00274         GPIO-&gt;PAD_DIR.PORT2_IO_4  = 0;
<a name="l00275"></a>00275         GPIO-&gt;FUNC_SEL.PORT2_IO_5 = 0;
<a name="l00276"></a>00276         GPIO-&gt;PAD_DIR.PORT2_IO_5  = 0;
<a name="l00277"></a>00277         GPIO-&gt;FUNC_SEL.PORT2_IO_6 = 0;
<a name="l00278"></a>00278         GPIO-&gt;PAD_DIR.PORT2_IO_6  = 0;
<a name="l00279"></a>00279         GPIO-&gt;FUNC_SEL.PORT2_IO_7 = 0;
<a name="l00280"></a>00280         GPIO-&gt;PAD_DIR.PORT2_IO_7  = 0;
<a name="l00281"></a>00281         GPIO-&gt;FUNC_SEL.PORT2_IO_8 = 0;
<a name="l00282"></a>00282         GPIO-&gt;PAD_DIR.PORT2_IO_8  = 0;
<a name="l00283"></a>00283 }
<a name="l00284"></a>00284 
<a name="l00285"></a>00285 <span class="keywordtype">void</span> gyro_data_enable_init(<span class="keywordtype">void</span>) {
<a name="l00286"></a>00286         GPIO-&gt;FUNC_SEL.DEN_G_PIN = 01;
<a name="l00287"></a>00287         GPIO-&gt;PAD_DIR.DEN_G_PIN = 1;
<a name="l00288"></a>00288 }
<a name="l00289"></a>00289 
<a name="l00290"></a>00290 <span class="comment">/* I/O 1 Interrupt Initialisation */</span>
<a name="l00291"></a>00291 <span class="keywordtype">void</span> kbi4_init(<span class="keywordtype">void</span>) {
<a name="l00292"></a>00292         kbi_edge(4);
<a name="l00293"></a>00293         enable_ext_wu(4);
<a name="l00294"></a>00294         kbi_pol_neg(4);
<a name="l00295"></a>00295         GPIO-&gt;PAD_DIR.IO_1_IN     = 0;
<a name="l00296"></a>00296         GPIO-&gt;PAD_PU_SEL.IO_1_IN  = 1;
<a name="l00297"></a>00297         GPIO-&gt;PAD_PU_EN.IO_1_IN   = 1;
<a name="l00298"></a>00298         GPIO-&gt;PAD_HYST_EN.IO_1_IN = 1;
<a name="l00299"></a>00299         clear_kbi_evnt(4);
<a name="l00300"></a>00300 }
<a name="l00301"></a>00301 
<a name="l00302"></a>00302 <span class="comment">/* I/O 0 Interrupt  Initialisation */</span>
<a name="l00303"></a>00303 <span class="keywordtype">void</span> kbi5_init(<span class="keywordtype">void</span>) {
<a name="l00304"></a>00304         kbi_edge(5);
<a name="l00305"></a>00305         enable_ext_wu(5);
<a name="l00306"></a>00306         kbi_pol_neg(5);
<a name="l00307"></a>00307         GPIO-&gt;PAD_DIR.IO_0_IN     = 0;
<a name="l00308"></a>00308         GPIO-&gt;PAD_PU_SEL.IO_0_IN  = 1;
<a name="l00309"></a>00309         GPIO-&gt;PAD_PU_EN.IO_0_IN   = 1;
<a name="l00310"></a>00310         GPIO-&gt;PAD_HYST_EN.IO_0_IN = 1;
<a name="l00311"></a>00311         clear_kbi_evnt(5);
<a name="l00312"></a>00312 }
<a name="l00313"></a>00313 
<a name="l00314"></a>00314 <span class="comment">/* I/O 2 Interrupt Initialisation  */</span>
<a name="l00315"></a>00315 <span class="keywordtype">void</span> kbi6_init(<span class="keywordtype">void</span>) {
<a name="l00316"></a>00316         kbi_edge(6);
<a name="l00317"></a>00317         enable_ext_wu(6);
<a name="l00318"></a>00318         kbi_pol_neg(6);
<a name="l00319"></a>00319         GPIO-&gt;PAD_DIR.IO_2_IN     = 0;
<a name="l00320"></a>00320         GPIO-&gt;PAD_PU_SEL.IO_2_IN  = 1;
<a name="l00321"></a>00321         GPIO-&gt;PAD_PU_EN.IO_2_IN   = 1;
<a name="l00322"></a>00322         GPIO-&gt;PAD_HYST_EN.IO_2_IN = 1;
<a name="l00323"></a>00323         clear_kbi_evnt(6);
<a name="l00324"></a>00324 }
<a name="l00325"></a>00325 
<a name="l00326"></a>00326 <span class="comment">/* I/O 3 Interrupt Initialisation  */</span>
<a name="l00327"></a>00327 <span class="keywordtype">void</span> kbi7_init(<span class="keywordtype">void</span>) {
<a name="l00328"></a>00328         kbi_edge(7);
<a name="l00329"></a>00329         enable_ext_wu(7);
<a name="l00330"></a>00330         kbi_pol_neg(7);
<a name="l00331"></a>00331         GPIO-&gt;PAD_DIR.IO_3_IN     = 0;
<a name="l00332"></a>00332         GPIO-&gt;PAD_PU_SEL.IO_3_IN  = 1;
<a name="l00333"></a>00333         GPIO-&gt;PAD_PU_EN.IO_3_IN   = 1;
<a name="l00334"></a>00334         GPIO-&gt;PAD_HYST_EN.IO_3_IN = 1;
<a name="l00335"></a>00335         clear_kbi_evnt(7);
<a name="l00336"></a>00336 }
<a name="l00337"></a>00337 
<a name="l00338"></a>00338 <span class="comment">/* tmr0_isr exists in cpu/mc1322x/clock.c */</span>
<a name="l00339"></a>00339 
<a name="l00340"></a>00340 <span class="keywordtype">void</span> tmr1_isr(<span class="keywordtype">void</span>) {
<a name="l00341"></a>00341         <span class="keywordflow">if</span> (*TMR1_SCTRL &amp; TCF){
<a name="l00342"></a>00342                 tmr1_count++;
<a name="l00343"></a>00343                 *TMR1_SCTRL &amp;= ~TCF;
<a name="l00344"></a>00344                 *TMR1_CSCTRL = *TMR1_CSCTRL &amp; ~(TCF1);
<a name="l00345"></a>00345         }
<a name="l00346"></a>00346 }
<a name="l00347"></a>00347 
<a name="l00348"></a>00348 <span class="comment">/* I/O 1 Interrupt Service Routine */</span>
<a name="l00349"></a>00349 <span class="keywordtype">void</span> kbi4_isr(<span class="keywordtype">void</span>) {
<a name="l00350"></a>00350         kbi4_flag = 1;
<a name="l00351"></a>00351         <span class="comment">// Code here</span>
<a name="l00352"></a>00352         clear_kbi_evnt(4);
<a name="l00353"></a>00353 }
<a name="l00354"></a>00354 
<a name="l00355"></a>00355 <span class="comment">/* I/O 0 Interrupt Service Routine */</span>
<a name="l00356"></a>00356 <span class="keywordtype">void</span> kbi5_isr(<span class="keywordtype">void</span>) {
<a name="l00357"></a>00357         kbi5_flag = 1;
<a name="l00358"></a>00358         <span class="comment">// Code here</span>
<a name="l00359"></a>00359         clear_kbi_evnt(5);
<a name="l00360"></a>00360 }
<a name="l00361"></a>00361 
<a name="l00362"></a>00362 <span class="comment">/* I/O 2 Interrupt Service Routine attached to Button S2 - in button-sensor.c  */</span>
<a name="l00363"></a>00363 <span class="comment">/* I/O 3 Interrupt Service Routine attached to Button S3 - in button2-sensor.c */</span>
<a name="l00364"></a>00364 
<a name="l00365"></a>00365 <span class="comment">/****************************************************/</span>
<a name="l00366"></a>00366 <span class="comment">/*******  Start of hardware init function  **********/</span>
<a name="l00367"></a>00367 <span class="comment">/****************************************************/</span>
<a name="l00368"></a>00368 
<a name="l00369"></a>00369 <span class="keywordtype">void</span> prime_init(<span class="keywordtype">void</span>) {
<a name="l00370"></a>00370         <span class="comment">/***********************************************************/</span>
<a name="l00371"></a>00371         <span class="comment">/***************** INITIALISE PERIPHERALS ******************/</span>
<a name="l00372"></a>00372         <span class="comment">/***********************************************************/</span>
<a name="l00373"></a>00373 
<a name="l00374"></a>00374         trim_xtal();            <span class="comment">/* trim the reference osc. to 24MHz */</span>
<a name="l00375"></a>00375         vreg_init();
<a name="l00376"></a>00376 
<a name="l00377"></a>00377         uart_init(NODE_INC, NODE_MOD, NODE_SAMP);       <span class="comment">/* uart setup */</span>
<a name="l00378"></a>00378 
<a name="l00379"></a>00379         leds_init();            <span class="comment">/* led setup */</span>
<a name="l00380"></a>00380         io_bus_init();
<a name="l00381"></a>00381         sd_card_switch_init();  <span class="comment">/* prime hardware functions */</span>
<a name="l00382"></a>00382         port1_enable_init();
<a name="l00383"></a>00383         port1_io_init();
<a name="l00384"></a>00384         port2_enable_init();
<a name="l00385"></a>00385         port2_io_init();
<a name="l00386"></a>00386         gyro_data_enable_init();
<a name="l00387"></a>00387 
<a name="l00388"></a>00388         <span class="comment">//tmr0_init();  /* happens in cpu/mc1322x/clock.c */</span>
<a name="l00389"></a>00389         tmr1_init();    <span class="comment">/* timer setup */</span>
<a name="l00390"></a>00390         kbi4_init();    <span class="comment">/* push button setup */</span>
<a name="l00391"></a>00391         kbi5_init();    <span class="comment">/* push button setup */</span>
<a name="l00392"></a>00392         kbi6_init();    <span class="comment">/* push button setup */</span>
<a name="l00393"></a>00393         kbi7_init();    <span class="comment">/* io bus setup */</span>
<a name="l00394"></a>00394 
<a name="l00395"></a>00395     <span class="comment">// SPI initialization</span>
<a name="l00396"></a>00396 <span class="comment">//      ssi_init();</span>
<a name="l00397"></a>00397 <span class="comment">//      GPIO-&gt;FUNC_SEL.IMU_EN = 0;</span>
<a name="l00398"></a>00398 <span class="comment">//      GPIO-&gt;PAD_DIR.IMU_EN = 1;</span>
<a name="l00399"></a>00399 
<a name="l00400"></a>00400 <span class="comment">//      ssi_init();</span>
<a name="l00401"></a>00401 
<a name="l00402"></a>00402         enable_irq(TMR);        <span class="comment">/* start various interrupts */</span>
<a name="l00403"></a>00403         enable_irq_kbi(4);
<a name="l00404"></a>00404         enable_irq_kbi(5);
<a name="l00405"></a>00405         enable_irq_kbi(6);
<a name="l00406"></a>00406         enable_irq_kbi(7);
<a name="l00407"></a>00407         enable_irq(CRM);
<a name="l00408"></a>00408 <span class="comment">//      enable_irq(SSI);</span>
<a name="l00409"></a>00409 
<a name="l00410"></a>00410 
<a name="l00411"></a>00411         *I2CCR |= I2C_RSTA;
<a name="l00412"></a>00412         i2c_enable();
<a name="l00413"></a>00413 
<a name="l00414"></a>00414         <span class="comment">/****************************************************/</span>
<a name="l00415"></a>00415         <span class="comment">/*******      Start of sensor buffers      **********/</span>
<a name="l00416"></a>00416         <span class="comment">/****************************************************/</span>
<a name="l00417"></a>00417 
<a name="l00418"></a>00418         kbi4_flag = 0;
<a name="l00419"></a>00419 
<a name="l00420"></a>00420         PORT1_ENABLE;
<a name="l00421"></a>00421         PORT2_ENABLE;
<a name="l00422"></a>00422 }
<a name="l00423"></a>00423 
<a name="l00424"></a>00424 
<a name="l00425"></a>00425 SENSORS(&amp;button_sensor, &amp;button2_sensor);
<a name="l00426"></a>00426 
<a name="l00427"></a>00427 <span class="keywordtype">void</span>
<a name="l00428"></a>00428 init_lowlevel(<span class="keywordtype">void</span>)
<a name="l00429"></a>00429 {
<a name="l00430"></a>00430         prime_init();   <span class="comment">// Prime board specific initialisation</span>
<a name="l00431"></a>00431 
<a name="l00432"></a>00432         <span class="comment">// FIXME - tidy up unused code</span>
<a name="l00433"></a>00433         <span class="comment">//gpio_sel0_pullup(26);</span>
<a name="l00434"></a>00434         <span class="comment">//gpio_pu0_enable(26);</span>
<a name="l00435"></a>00435 
<a name="l00436"></a>00436         maca_init();
<a name="l00437"></a>00437 
<a name="l00438"></a>00438         set_channel(RF_CHANNEL - 11); <span class="comment">/* channel 11 */</span>
<a name="l00439"></a>00439         set_power(0x12); <span class="comment">/* 0x12 is the highest, not documented */</span>
<a name="l00440"></a>00440 
<a name="l00441"></a>00441 <span class="preprocessor">#if USE_ADC</span>
<a name="l00442"></a>00442 <span class="preprocessor"></span>        <span class="comment">/* ADC2 setup */</span>
<a name="l00443"></a>00443         *GPIO_FUNC_SEL2 |= (0x01 &lt;&lt; ((36 -16*2)*2)); <span class="comment">//set GPIO36 to function 1</span>
<a name="l00444"></a>00444         <span class="comment">/* for 24Mhz clock */</span>
<a name="l00445"></a>00445         *(<span class="keyword">volatile</span> uint16_t *)ADC_CLOCK_DIVIDER = 0x50;
<a name="l00446"></a>00446         *(<span class="keyword">volatile</span> uint16_t *)ADC_PRESCALE = 0x17;
<a name="l00447"></a>00447         *(<span class="keyword">volatile</span> uint16_t *)ADC_ON_TIME = 0xa;
<a name="l00448"></a>00448         *(<span class="keyword">volatile</span> uint16_t *)ADC_CONVERT_TIME = 0x14;
<a name="l00449"></a>00449         *(<span class="keyword">volatile</span> uint16_t *)ADC_MODE = 0x1;  <span class="comment">//manual override mode</span>
<a name="l00450"></a>00450         <span class="comment">//*(volatile uint16_t *)ADC_OVERRIDE = 0x365;</span>
<a name="l00451"></a>00451         *(<span class="keyword">volatile</span> uint16_t *)ADC_OVERRIDE = 0x368;  <span class="comment">//use ADC2 channel 6, ADC1 channel 8 (batt)</span>
<a name="l00452"></a>00452         <span class="comment">//*(volatile uint16_t *)ADC_CONTROL = 0x1;</span>
<a name="l00453"></a>00453         *(<span class="keyword">volatile</span> uint16_t *)ADC_CONTROL = 0x21; <span class="comment">//external ref. for ADC2 (bit 5), ADC enable (bit 0)</span>
<a name="l00454"></a>00454 <span class="preprocessor">#endif</span>
<a name="l00455"></a>00455 <span class="preprocessor"></span>
<a name="l00456"></a>00456 
<a name="l00457"></a>00457 <span class="preprocessor">#if USE_32KHZ_XTAL</span>
<a name="l00458"></a>00458 <span class="preprocessor"></span>        enable_32khz_xtal();
<a name="l00459"></a>00459 <span class="preprocessor">#else</span>
<a name="l00460"></a>00460 <span class="preprocessor"></span>        cal_ring_osc();
<a name="l00461"></a>00461 <span class="preprocessor">#endif</span>
<a name="l00462"></a>00462 <span class="preprocessor"></span>
<a name="l00463"></a>00463 <span class="preprocessor">#if USE_32KHZ_XTAL</span>
<a name="l00464"></a>00464 <span class="preprocessor"></span>        *CRM_RTC_TIMEOUT = 32768 * 10; 
<a name="l00465"></a>00465 <span class="preprocessor">#else </span>
<a name="l00466"></a>00466 <span class="preprocessor"></span>        *CRM_RTC_TIMEOUT = cal_rtc_secs * 10;
<a name="l00467"></a>00467 <span class="preprocessor">#endif</span>
<a name="l00468"></a>00468 <span class="preprocessor"></span>
<a name="l00469"></a>00469         <span class="comment">/* XXX debug */</span>
<a name="l00470"></a>00470         <span class="comment">/* trigger periodic rtc int */</span>
<a name="l00471"></a>00471 <span class="comment">//      clear_rtc_wu_evt();</span>
<a name="l00472"></a>00472 <span class="comment">//      enable_rtc_wu();</span>
<a name="l00473"></a>00473 <span class="comment">//      enable_rtc_wu_irq();</span>
<a name="l00474"></a>00474 }
<a name="l00475"></a>00475 
<a name="l00476"></a>00476 <span class="preprocessor">#if RIMEADDR_SIZE == 1</span>
<a name="l00477"></a>00477 <span class="preprocessor"></span><span class="keyword">const</span> rimeaddr_t addr_ff = { { 0xff } };
<a name="l00478"></a>00478 <span class="preprocessor">#else </span><span class="comment">/*RIMEADDR_SIZE == 2*/</span>
<a name="l00479"></a>00479 <span class="preprocessor">#if RIMEADDR_SIZE == 2</span>
<a name="l00480"></a>00480 <span class="preprocessor"></span><span class="keyword">const</span> rimeaddr_t addr_ff = { { 0xff, 0xff } };
<a name="l00481"></a>00481 <span class="preprocessor">#else </span><span class="comment">/*RIMEADDR_SIZE == 2*/</span>
<a name="l00482"></a>00482 <span class="preprocessor">#if RIMEADDR_SIZE == 8</span>
<a name="l00483"></a>00483 <span class="preprocessor"></span><span class="keyword">const</span> rimeaddr_t addr_ff = { { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } };
<a name="l00484"></a>00484 <span class="preprocessor">#endif </span><span class="comment">/*RIMEADDR_SIZE == 8*/</span>
<a name="l00485"></a>00485 <span class="preprocessor">#endif </span><span class="comment">/*RIMEADDR_SIZE == 2*/</span>
<a name="l00486"></a>00486 <span class="preprocessor">#endif </span><span class="comment">/*RIMEADDR_SIZE == 1*/</span>
<a name="l00487"></a>00487 
<a name="l00488"></a>00488 <span class="keywordtype">void</span> iab_to_eui64(rimeaddr_t *eui64, uint32_t oui, uint16_t iab, uint32_t ext) {
<a name="l00489"></a>00489         <span class="comment">/* OUI for IABs */</span>
<a name="l00490"></a>00490         eui64-&gt;u8[0] =  0x00;
<a name="l00491"></a>00491         eui64-&gt;u8[1] =  0x50;
<a name="l00492"></a>00492         eui64-&gt;u8[2] =  0xc2;
<a name="l00493"></a>00493 
<a name="l00494"></a>00494         <span class="comment">/* EUI64 field */</span>
<a name="l00495"></a>00495         eui64-&gt;u8[3] = 0xff;
<a name="l00496"></a>00496         eui64-&gt;u8[4] = 0xfe;
<a name="l00497"></a>00497 
<a name="l00498"></a>00498         <span class="comment">/* IAB */</span>
<a name="l00499"></a>00499         eui64-&gt;u8[5] = (iab &gt;&gt; 4)  &amp; 0xff;      
<a name="l00500"></a>00500         eui64-&gt;u8[6] = (iab &amp; 0xf) &lt;&lt; 4;
<a name="l00501"></a>00501 
<a name="l00502"></a>00502         <span class="comment">/* EXT */</span>
<a name="l00503"></a>00503         eui64-&gt;u8[6] |= ((ext &gt;&gt; 8) &amp;  0xf);    
<a name="l00504"></a>00504         eui64-&gt;u8[7] =    ext       &amp; 0xff;
<a name="l00505"></a>00505 }
<a name="l00506"></a>00506 
<a name="l00507"></a>00507 <span class="keywordtype">void</span> oui_to_eui64(rimeaddr_t *eui64, uint32_t oui, uint32_t ext) {
<a name="l00508"></a>00508         <span class="comment">/* OUI */</span>
<a name="l00509"></a>00509         eui64-&gt;u8[0] = (oui &gt;&gt; 16) &amp; 0xff;
<a name="l00510"></a>00510         eui64-&gt;u8[1] = (oui &gt;&gt; 8)  &amp; 0xff;
<a name="l00511"></a>00511         eui64-&gt;u8[2] =  oui        &amp; 0xff;
<a name="l00512"></a>00512 
<a name="l00513"></a>00513         <span class="comment">/* EUI64 field */</span>
<a name="l00514"></a>00514         eui64-&gt;u8[3] = 0xff;
<a name="l00515"></a>00515         eui64-&gt;u8[4] = 0xfe;
<a name="l00516"></a>00516 
<a name="l00517"></a>00517         <span class="comment">/* EXT */</span>
<a name="l00518"></a>00518         eui64-&gt;u8[5] = (ext &gt;&gt; 16) &amp; 0xff;
<a name="l00519"></a>00519         eui64-&gt;u8[6] = (ext &gt;&gt; 8)  &amp; 0xff;
<a name="l00520"></a>00520         eui64-&gt;u8[7] =  ext        &amp; 0xff;
<a name="l00521"></a>00521 }
<a name="l00522"></a>00522 
<a name="l00523"></a>00523 <span class="keywordtype">void</span>
<a name="l00524"></a>00524 set_rimeaddr(rimeaddr_t *addr) 
<a name="l00525"></a>00525 {
<a name="l00526"></a>00526         nvmType_t type=0;
<a name="l00527"></a>00527         nvmErr_t err;   
<a name="l00528"></a>00528         <span class="keyword">volatile</span> uint8_t buf[RIMEADDR_NBYTES];
<a name="l00529"></a>00529         rimeaddr_t eui64;
<a name="l00530"></a>00530         <span class="keywordtype">int</span> i;
<a name="l00531"></a>00531                 
<a name="l00532"></a>00532         err = nvm_detect(gNvmInternalInterface_c, &amp;type);
<a name="l00533"></a>00533 
<a name="l00534"></a>00534         err = nvm_read(gNvmInternalInterface_c, type, (uint8_t *)buf, RIMEADDR_NVM, RIMEADDR_NBYTES);
<a name="l00535"></a>00535 
<a name="l00536"></a>00536         <a class="code" href="a01845.html#gacd6a22e93c7a4eb02d901743c958c2b2" title="Copy a Rime address.">rimeaddr_copy</a>(addr,&amp;<a class="code" href="a01845.html#gaa96ae7849482147440e77751444faa6d" title="The null Rime address.">rimeaddr_null</a>);
<a name="l00537"></a>00537 
<a name="l00538"></a>00538 
<a name="l00539"></a>00539         <span class="keywordflow">for</span>(i=0; i&lt;RIMEADDR_CONF_SIZE; i++) {           
<a name="l00540"></a>00540                 addr-&gt;u8[i] = buf[i];
<a name="l00541"></a>00541         }
<a name="l00542"></a>00542 
<a name="l00543"></a>00543         <span class="keywordflow">if</span> (memcmp(addr, &amp;addr_ff, RIMEADDR_CONF_SIZE)==0) {
<a name="l00544"></a>00544                 <span class="comment">//set addr to EUI64</span>
<a name="l00545"></a>00545 <span class="preprocessor">#ifdef IAB              </span>
<a name="l00546"></a>00546 <span class="preprocessor"></span><span class="preprocessor">   #ifdef EXT_ID</span>
<a name="l00547"></a>00547 <span class="preprocessor"></span>                PRINTF(<span class="stringliteral">&quot;address in flash blank, setting to defined IAB and extension.\n\r&quot;</span>);
<a name="l00548"></a>00548                 iab_to_eui64(&amp;eui64, OUI, IAB, EXT_ID);
<a name="l00549"></a>00549 <span class="preprocessor">   #else  </span><span class="comment">/* ifdef EXT_ID */</span>
<a name="l00550"></a>00550                 PRINTF(<span class="stringliteral">&quot;address in flash blank, setting to defined IAB with a random extension.\n\r&quot;</span>);
<a name="l00551"></a>00551                 iab_to_eui64(&amp;eui64, OUI, IAB, *MACA_RANDOM &amp; 0xfff);
<a name="l00552"></a>00552 <span class="preprocessor">   #endif </span><span class="comment">/* ifdef EXT_ID */</span>
<a name="l00553"></a>00553 
<a name="l00554"></a>00554 <span class="preprocessor">#else  </span><span class="comment">/* ifdef IAB */</span>
<a name="l00555"></a>00555 
<a name="l00556"></a>00556 <span class="preprocessor">   #ifdef EXT_ID</span>
<a name="l00557"></a>00557 <span class="preprocessor"></span>                PRINTF(<span class="stringliteral">&quot;address in flash blank, setting to defined OUI and extension.\n\r&quot;</span>);
<a name="l00558"></a>00558                 oui_to_eui64(&amp;eui64, OUI, EXT_ID);
<a name="l00559"></a>00559 <span class="preprocessor">   #else  </span><span class="comment">/*ifdef EXT_ID */</span>
<a name="l00560"></a>00560                 PRINTF(<span class="stringliteral">&quot;address in flash blank, setting to defined OUI with a random extension.\n\r&quot;</span>);
<a name="l00561"></a>00561                 oui_to_eui64(&amp;eui64, OUI, *MACA_RANDOM &amp; 0xffffff);
<a name="l00562"></a>00562 <span class="preprocessor">   #endif </span><span class="comment">/*endif EXTID */</span>
<a name="l00563"></a>00563 
<a name="l00564"></a>00564 <span class="preprocessor">#endif </span><span class="comment">/* ifdef IAB */</span>
<a name="l00565"></a>00565 
<a name="l00566"></a>00566                 <a class="code" href="a01845.html#gacd6a22e93c7a4eb02d901743c958c2b2" title="Copy a Rime address.">rimeaddr_copy</a>(addr, &amp;eui64);            
<a name="l00567"></a>00567 <span class="preprocessor">#ifdef FLASH_BLANK_ADDR</span>
<a name="l00568"></a>00568 <span class="preprocessor"></span>                PRINTF(<span class="stringliteral">&quot;flashing blank address\n\r&quot;</span>);
<a name="l00569"></a>00569                 err = nvm_write(gNvmInternalInterface_c, type, &amp;(eui64.u8), RIMEADDR_NVM, RIMEADDR_NBYTES);             
<a name="l00570"></a>00570 <span class="preprocessor">#endif </span><span class="comment">/* ifdef FLASH_BLANK_ADDR */</span>
<a name="l00571"></a>00571         } <span class="keywordflow">else</span> {
<a name="l00572"></a>00572                 PRINTF(<span class="stringliteral">&quot;loading rime address from flash.\n\r&quot;</span>);
<a name="l00573"></a>00573         }
<a name="l00574"></a>00574 
<a name="l00575"></a>00575         <a class="code" href="a01845.html#gac4080b66cb1791df683e694f70ee31f2" title="Set the address of the current node.">rimeaddr_set_node_addr</a>(addr);
<a name="l00576"></a>00576 }
<a name="l00577"></a>00577 
<a name="l00578"></a>00578 <span class="keywordtype">void</span> print_welcome(<span class="keywordtype">void</span>)
<a name="l00579"></a>00579 {
<a name="l00580"></a>00580         printf(<span class="stringliteral">&quot;\r\n\n\n\n&quot;</span>);
<a name="l00581"></a>00581         printf(<span class="stringliteral">&quot;********************************\r\n&quot;</span>);
<a name="l00582"></a>00582         printf(<span class="stringliteral">&quot;Firmware version 1.2\r\n&quot;</span>);
<a name="l00583"></a>00583         printf(<span class="stringliteral">&quot;********************************\r\n&quot;</span>);
<a name="l00584"></a>00584 }
<a name="l00585"></a>00585 
<a name="l00586"></a>00586 <span class="keywordtype">int</span>
<a name="l00587"></a>00587 <a class="code" href="a01924.html#ga840291bc02cba5474a4cb46a9b9566fe" title="This is main...">main</a>(<span class="keywordtype">void</span>)
<a name="l00588"></a>00588 {
<a name="l00589"></a>00589         <span class="keyword">volatile</span> uint32_t i;
<a name="l00590"></a>00590         rimeaddr_t addr;
<a name="l00591"></a>00591 
<a name="l00592"></a>00592         <span class="comment">/* Initialize hardware and */</span>
<a name="l00593"></a>00593         <span class="comment">/* go into user mode */</span>
<a name="l00594"></a>00594         init_lowlevel();
<a name="l00595"></a>00595 
<a name="l00596"></a>00596         <span class="comment">/* Clock */</span>
<a name="l00597"></a>00597         <a class="code" href="a01859.html#ga78ab77b57cf2e00089f0a3a22508524c" title="Initialize the clock library.">clock_init</a>();   
<a name="l00598"></a>00598 
<a name="l00599"></a>00599         <span class="comment">/* Process subsystem */</span>
<a name="l00600"></a>00600         <a class="code" href="a01866.html#gaab238b68c176e90138159f41af9133f1" title="Initialize the process module.">process_init</a>();
<a name="l00601"></a>00601         <a class="code" href="a01866.html#ga1ecfc797b48072142b3e22ac1f0bbfdd" title="Start a process.">process_start</a>(&amp;etimer_process, <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>);
<a name="l00602"></a>00602         <a class="code" href="a01866.html#ga1ecfc797b48072142b3e22ac1f0bbfdd" title="Start a process.">process_start</a>(&amp;contiki_maca_process, <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>);
<a name="l00603"></a>00603 
<a name="l00604"></a>00604         <span class="comment">// vshum:these 2 lines are for enabling serial input? for Shell use</span>
<a name="l00605"></a>00605         uart1_set_input(serial_line_input_byte);
<a name="l00606"></a>00606         serial_line_init();
<a name="l00607"></a>00607 
<a name="l00608"></a>00608         <a class="code" href="a01861.html#ga0b183fdc4a1b4be0630a29dfe4fbf3a2" title="Initialize the callback timer library.">ctimer_init</a>();
<a name="l00609"></a>00609 
<a name="l00610"></a>00610         set_rimeaddr(&amp;addr);
<a name="l00611"></a>00611 
<a name="l00612"></a>00612         print_welcome();
<a name="l00613"></a>00613         printf(<span class="stringliteral">&quot;Rime started with address &quot;</span>);
<a name="l00614"></a>00614         <span class="keywordflow">for</span> (i = <span class="keyword">sizeof</span>(addr.u8)-1; i &gt; 0; i--) {
<a name="l00615"></a>00615                 printf(<span class="stringliteral">&quot;%02X:&quot;</span>, addr.u8[i]);
<a name="l00616"></a>00616         }
<a name="l00617"></a>00617         printf(<span class="stringliteral">&quot;%02X\r\n&quot;</span>, addr.u8[i]);
<a name="l00618"></a>00618 
<a name="l00619"></a>00619 <span class="preprocessor">#if WITH_UIP6</span>
<a name="l00620"></a>00620 <span class="preprocessor"></span>  memcpy(&amp;<a class="code" href="a01926.html#ga89bf167a9f1014d2d78754742eb7e06d" title="Host L2 address.">uip_lladdr</a>.addr, &amp;addr.u8, <span class="keyword">sizeof</span>(<a class="code" href="a01926.html#ga89bf167a9f1014d2d78754742eb7e06d" title="Host L2 address.">uip_lladdr</a>.addr));
<a name="l00621"></a>00621   <span class="comment">/* Setup nullmac-like MAC for 802.15.4 */</span>
<a name="l00622"></a>00622 <span class="comment">/*   sicslowpan_init(sicslowmac_init(&amp;cc2420_driver)); */</span>
<a name="l00623"></a>00623 <span class="comment">/*   printf(&quot; %s channel %u\n&quot;, sicslowmac_driver.name, RF_CHANNEL); */</span>
<a name="l00624"></a>00624 
<a name="l00625"></a>00625   <span class="comment">/* Setup X-MAC for 802.15.4 */</span>
<a name="l00626"></a>00626   queuebuf_init();
<a name="l00627"></a>00627   NETSTACK_RDC.<a class="code" href="a00074.html#a9f0a8093092a78b1fd1f0ae00c595ece" title="Initialize the RDC driver.">init</a>();
<a name="l00628"></a>00628   NETSTACK_MAC.<a class="code" href="a00061.html#a8d70b9d00bde293223c72b8dc92466f2" title="Initialize the MAC driver.">init</a>();
<a name="l00629"></a>00629   NETSTACK_NETWORK.<a class="code" href="a00066.html#af1528d41c178519fdc135214827262fd" title="Initialize the network driver.">init</a>();
<a name="l00630"></a>00630 
<a name="l00631"></a>00631   PRINTF(<span class="stringliteral">&quot;%s %s, channel check rate %lu Hz, radio channel %u\n&quot;</span>,
<a name="l00632"></a>00632          NETSTACK_MAC.name, NETSTACK_RDC.name,
<a name="l00633"></a>00633          <a class="code" href="a01859.html#gae3ced0551b26c9b99cb45a86f34d100a" title="A second, measured in system clock time.">CLOCK_SECOND</a> / (NETSTACK_RDC.<a class="code" href="a00074.html#ad23ce4d601bb33cdcab875647f7cd093" title="Returns the channel check interval, expressed in clock_time_t ticks.">channel_check_interval</a>() == 0 ? 1:
<a name="l00634"></a>00634                          NETSTACK_RDC.<a class="code" href="a00074.html#ad23ce4d601bb33cdcab875647f7cd093" title="Returns the channel check interval, expressed in clock_time_t ticks.">channel_check_interval</a>()),
<a name="l00635"></a>00635          RF_CHANNEL);
<a name="l00636"></a>00636 
<a name="l00637"></a>00637   <a class="code" href="a01866.html#ga1ecfc797b48072142b3e22ac1f0bbfdd" title="Start a process.">process_start</a>(&amp;tcpip_process, <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>);
<a name="l00638"></a>00638 
<a name="l00639"></a>00639   PRINTF(<span class="stringliteral">&quot;Tentative link-local IPv6 address &quot;</span>);
<a name="l00640"></a>00640   {
<a name="l00641"></a>00641     <span class="keywordtype">int</span> i, a;
<a name="l00642"></a>00642     <span class="keywordflow">for</span>(a = 0; a &lt; UIP_DS6_ADDR_NB; a++) {
<a name="l00643"></a>00643       <span class="keywordflow">if</span> (<a class="code" href="a01929.html#gaecc8ec9970a01951fd9eec36e07884ef">uip_ds6_if</a>.addr_list[a].isused) {
<a name="l00644"></a>00644         <span class="keywordflow">for</span>(i = 0; i &lt; 7; ++i) {
<a name="l00645"></a>00645           printf(<span class="stringliteral">&quot;%02x%02x:&quot;</span>,
<a name="l00646"></a>00646                  <a class="code" href="a01929.html#gaecc8ec9970a01951fd9eec36e07884ef">uip_ds6_if</a>.addr_list[a].ipaddr.u8[i * 2],
<a name="l00647"></a>00647                  <a class="code" href="a01929.html#gaecc8ec9970a01951fd9eec36e07884ef">uip_ds6_if</a>.addr_list[a].ipaddr.u8[i * 2 + 1]);
<a name="l00648"></a>00648         }
<a name="l00649"></a>00649         PRINTF(<span class="stringliteral">&quot;%02x%02x\n&quot;</span>,
<a name="l00650"></a>00650                <a class="code" href="a01929.html#gaecc8ec9970a01951fd9eec36e07884ef">uip_ds6_if</a>.addr_list[a].ipaddr.u8[14],
<a name="l00651"></a>00651                <a class="code" href="a01929.html#gaecc8ec9970a01951fd9eec36e07884ef">uip_ds6_if</a>.addr_list[a].ipaddr.u8[15]);
<a name="l00652"></a>00652       }
<a name="l00653"></a>00653     }
<a name="l00654"></a>00654   }
<a name="l00655"></a>00655   
<a name="l00656"></a>00656   <span class="keywordflow">if</span>(1) {
<a name="l00657"></a>00657     <a class="code" href="a00112.html" title="Representation of an IP address.">uip_ipaddr_t</a> <a class="code" href="a00110.html#aa58fe487e6f75104ec38a6724a5ddc34" title="The IP address of this interface.">ipaddr</a>;
<a name="l00658"></a>00658     <span class="keywordtype">int</span> i;
<a name="l00659"></a>00659     <a class="code" href="a01815.html#ga53fbda0e8c31d4882294c8dc3cb5f487" title="Construct an IPv6 address from eight 16-bit words.">uip_ip6addr</a>(&amp;ipaddr, 0xaaaa, 0, 0, 0, 0, 0, 0, 0);
<a name="l00660"></a>00660     <a class="code" href="a01929.html#gabbe961bbeaea80289fddf448a542fea9" title="set the last 64 bits of an IP address based on the MAC address">uip_ds6_set_addr_iid</a>(&amp;ipaddr, &amp;<a class="code" href="a01926.html#ga89bf167a9f1014d2d78754742eb7e06d" title="Host L2 address.">uip_lladdr</a>);
<a name="l00661"></a>00661     <a class="code" href="a01929.html#ga801390b5dced9a4601cc1c4f9baa08be">uip_ds6_addr_add</a>(&amp;ipaddr, 0, <a class="code" href="a01929.html#gae64653a0bf71369f18219aa494e362d7" title="Possible states for the an address (RFC 4862)">ADDR_TENTATIVE</a>);
<a name="l00662"></a>00662     PRINTF(<span class="stringliteral">&quot;Tentative global IPv6 address &quot;</span>);
<a name="l00663"></a>00663     <span class="keywordflow">for</span>(i = 0; i &lt; 7; ++i) {
<a name="l00664"></a>00664         PRINTF(<span class="stringliteral">&quot;%02x%02x:&quot;</span>,
<a name="l00665"></a>00665              ipaddr.u8[i * 2], ipaddr.u8[i * 2 + 1]);
<a name="l00666"></a>00666     }
<a name="l00667"></a>00667     PRINTF(<span class="stringliteral">&quot;%02x%02x\n&quot;</span>,
<a name="l00668"></a>00668            ipaddr.u8[7 * 2], ipaddr.u8[7 * 2 + 1]);
<a name="l00669"></a>00669   }
<a name="l00670"></a>00670 
<a name="l00671"></a>00671   
<a name="l00672"></a>00672 <span class="preprocessor">#else </span><span class="comment">/* WITH_UIP6 */</span>
<a name="l00673"></a>00673 
<a name="l00674"></a>00674 <span class="preprocessor">#define STRING2(x) #x</span>
<a name="l00675"></a>00675 <span class="preprocessor"></span><span class="preprocessor">#define STRING(x) STRING2(x)</span>
<a name="l00676"></a>00676 <span class="preprocessor"></span><span class="preprocessor">#pragma message(&quot;NETSTACK_RDC &quot; STRING(NETSTACK_RDC))</span>
<a name="l00677"></a>00677 <span class="preprocessor"></span><span class="preprocessor">#pragma message(&quot;NETSTACK_MAC &quot; STRING(NETSTACK_MAC))</span>
<a name="l00678"></a>00678 <span class="preprocessor"></span><span class="preprocessor">#pragma message(&quot;NETSTACK_NETWORK &quot; STRING(NETSTACK_NETWORK))</span>
<a name="l00679"></a>00679 <span class="preprocessor"></span>
<a name="l00680"></a>00680   NETSTACK_RDC.<a class="code" href="a00074.html#a9f0a8093092a78b1fd1f0ae00c595ece" title="Initialize the RDC driver.">init</a>();
<a name="l00681"></a>00681   NETSTACK_MAC.<a class="code" href="a00061.html#a8d70b9d00bde293223c72b8dc92466f2" title="Initialize the MAC driver.">init</a>();
<a name="l00682"></a>00682   NETSTACK_NETWORK.<a class="code" href="a00066.html#af1528d41c178519fdc135214827262fd" title="Initialize the network driver.">init</a>();
<a name="l00683"></a>00683 
<a name="l00684"></a>00684   PRINTF(<span class="stringliteral">&quot;%s %s, channel check rate %lu Hz, radio channel %u\r\n&quot;</span>,
<a name="l00685"></a>00685          NETSTACK_MAC.name, NETSTACK_RDC.name,
<a name="l00686"></a>00686          <a class="code" href="a01859.html#gae3ced0551b26c9b99cb45a86f34d100a" title="A second, measured in system clock time.">CLOCK_SECOND</a> / (NETSTACK_RDC.<a class="code" href="a00074.html#ad23ce4d601bb33cdcab875647f7cd093" title="Returns the channel check interval, expressed in clock_time_t ticks.">channel_check_interval</a>() == 0? 1:
<a name="l00687"></a>00687                          NETSTACK_RDC.<a class="code" href="a00074.html#ad23ce4d601bb33cdcab875647f7cd093" title="Returns the channel check interval, expressed in clock_time_t ticks.">channel_check_interval</a>()),
<a name="l00688"></a>00688          RF_CHANNEL);
<a name="l00689"></a>00689 <span class="preprocessor">#endif </span><span class="comment">/* WITH_UIP6 */</span>
<a name="l00690"></a>00690 
<a name="l00691"></a>00691 <span class="preprocessor">#if PROFILE_CONF_ON</span>
<a name="l00692"></a>00692 <span class="preprocessor"></span>  profile_init();
<a name="l00693"></a>00693 <span class="preprocessor">#endif </span><span class="comment">/* PROFILE_CONF_ON */</span>
<a name="l00694"></a>00694 
<a name="l00695"></a>00695 <span class="preprocessor">#if TIMESYNCH_CONF_ENABLED</span>
<a name="l00696"></a>00696 <span class="preprocessor"></span>  <a class="code" href="a01855.html#ga3cbbb613755e88445d1430660ee4f8cf" title="Initialize the timesynch module.">timesynch_init</a>();
<a name="l00697"></a>00697   <a class="code" href="a01855.html#ga4a498e965d3fb88281bee77efc30fcc5" title="Set the authority level of the current time.">timesynch_set_authority_level</a>(<a class="code" href="a01845.html#gaade5a80096fb3b4296cf89eeaca3087d" title="The Rime address of the node.">rimeaddr_node_addr</a>.u8[0]);
<a name="l00698"></a>00698 <span class="preprocessor">#endif </span><span class="comment">/* TIMESYNCH_CONF_ENABLED */</span>
<a name="l00699"></a>00699 
<a name="l00700"></a>00700 <span class="preprocessor">#if WITH_UIP</span>
<a name="l00701"></a>00701 <span class="preprocessor"></span>  <a class="code" href="a01866.html#ga1ecfc797b48072142b3e22ac1f0bbfdd" title="Start a process.">process_start</a>(&amp;tcpip_process, <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>);
<a name="l00702"></a>00702   <a class="code" href="a01866.html#ga1ecfc797b48072142b3e22ac1f0bbfdd" title="Start a process.">process_start</a>(&amp;uip_fw_process, <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>); <span class="comment">/* Start IP output */</span>
<a name="l00703"></a>00703   <a class="code" href="a01866.html#ga1ecfc797b48072142b3e22ac1f0bbfdd" title="Start a process.">process_start</a>(&amp;slip_process, <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>);
<a name="l00704"></a>00704 
<a name="l00705"></a>00705   slip_set_input_callback(set_gateway);
<a name="l00706"></a>00706 
<a name="l00707"></a>00707   {
<a name="l00708"></a>00708     <a class="code" href="a00112.html" title="Representation of an IP address.">uip_ipaddr_t</a> hostaddr, <a class="code" href="a00110.html#a1d6231758b0ee95a0b1f851cbecd9d2a" title="The netmask of the interface.">netmask</a>;
<a name="l00709"></a>00709 
<a name="l00710"></a>00710     <a class="code" href="a01926.html#gac48ed5f0d27721ef62a3ed02a5ad8d2e" title="uIP initialization function.">uip_init</a>();
<a name="l00711"></a>00711 
<a name="l00712"></a>00712     <a class="code" href="a01815.html#ga87f0b54ade0d159fba495089128a4932" title="Construct an IP address from four bytes.">uip_ipaddr</a>(&amp;hostaddr, 172,16,
<a name="l00713"></a>00713                <a class="code" href="a01845.html#gaade5a80096fb3b4296cf89eeaca3087d" title="The Rime address of the node.">rimeaddr_node_addr</a>.u8[0],<a class="code" href="a01845.html#gaade5a80096fb3b4296cf89eeaca3087d" title="The Rime address of the node.">rimeaddr_node_addr</a>.u8[1]);
<a name="l00714"></a>00714     <a class="code" href="a01815.html#ga87f0b54ade0d159fba495089128a4932" title="Construct an IP address from four bytes.">uip_ipaddr</a>(&amp;netmask, 255,255,0,0);
<a name="l00715"></a>00715     uip_ipaddr_copy(&amp;meshif.<a class="code" href="a00110.html#aa58fe487e6f75104ec38a6724a5ddc34" title="The IP address of this interface.">ipaddr</a>, &amp;hostaddr);
<a name="l00716"></a>00716 
<a name="l00717"></a>00717     <a class="code" href="a01811.html#ga12b467f314489259dd718228d0827a51" title="Set the IP address of this host.">uip_sethostaddr</a>(&amp;hostaddr);
<a name="l00718"></a>00718     <a class="code" href="a01811.html#gaeb79c914cf137e6d27fd7583e5a66679" title="Set the netmask.">uip_setnetmask</a>(&amp;netmask);
<a name="l00719"></a>00719     uip_over_mesh_set_net(&amp;hostaddr, &amp;netmask);
<a name="l00720"></a>00720     <span class="comment">/*    uip_fw_register(&amp;slipif);*/</span>
<a name="l00721"></a>00721     uip_over_mesh_set_gateway_netif(&amp;slipif);
<a name="l00722"></a>00722     <a class="code" href="a01809.html#ga94dcf0fa8bff34949a37fbde77786f82" title="Register a default network interface.">uip_fw_default</a>(&amp;meshif);
<a name="l00723"></a>00723     uip_over_mesh_init(UIP_OVER_MESH_CHANNEL);
<a name="l00724"></a>00724     printf(<span class="stringliteral">&quot;uIP started with IP address %d.%d.%d.%d\n&quot;</span>,
<a name="l00725"></a>00725            <a class="code" href="a01815.html#gab6ae63b3e36da2ea6598ea91ad049516" title="Convert an IP address to four bytes separated by commas.">uip_ipaddr_to_quad</a>(&amp;hostaddr));
<a name="l00726"></a>00726   }
<a name="l00727"></a>00727 <span class="preprocessor">#endif </span><span class="comment">/* WITH_UIP */</span>
<a name="l00728"></a>00728 
<a name="l00729"></a>00729   <a class="code" href="a01866.html#ga1ecfc797b48072142b3e22ac1f0bbfdd" title="Start a process.">process_start</a>(&amp;sensors_process, <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>);
<a name="l00730"></a>00730 
<a name="l00731"></a>00731   print_processes(autostart_processes);
<a name="l00732"></a>00732   autostart_start(autostart_processes);
<a name="l00733"></a>00733 
<a name="l00734"></a>00734   <span class="comment">/* Main scheduler loop */</span>
<a name="l00735"></a>00735   <span class="keywordflow">while</span>(1) {
<a name="l00736"></a>00736           check_maca();
<a name="l00737"></a>00737 
<a name="l00738"></a>00738           <span class="comment">/* TODO: replace this with a uart rx interrupt */</span>
<a name="l00739"></a>00739 
<a name="l00740"></a>00740           <span class="keywordflow">if</span>(uart1_input_handler != <a class="code" href="a01956.html#ga070d2ce7b6bb7e5c05602aa8c308d0c4" title="The null pointer.">NULL</a>) {
<a name="l00741"></a>00741                   <span class="keywordflow">if</span>(uart1_can_get()) {
<a name="l00742"></a>00742                           uart1_input_handler(uart1_getc());
<a name="l00743"></a>00743                   }
<a name="l00744"></a>00744           }
<a name="l00745"></a>00745 
<a name="l00746"></a>00746           <a class="code" href="a01866.html#ga4968157ca91c28e26075ab78a1a4fb56" title="Run the system once - call poll handlers and process one event.">process_run</a>();
<a name="l00747"></a>00747   }
<a name="l00748"></a>00748   
<a name="l00749"></a>00749   <span class="keywordflow">return</span> 0;
<a name="l00750"></a>00750 }
<a name="l00751"></a>00751 
<a name="l00752"></a>00752 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00753"></a>00753 <span class="preprocessor">#if LOG_CONF_ENABLED</span>
<a name="l00754"></a>00754 <span class="preprocessor"></span><span class="keywordtype">void</span>
<a name="l00755"></a>00755 log_message(<span class="keywordtype">char</span> *m1, <span class="keywordtype">char</span> *m2)
<a name="l00756"></a>00756 {
<a name="l00757"></a>00757   printf(<span class="stringliteral">&quot;%s%s\n&quot;</span>, m1, m2);
<a name="l00758"></a>00758 }
<a name="l00759"></a>00759 <span class="preprocessor">#endif </span><span class="comment">/* LOG_CONF_ENABLED */</span>
</pre></div></div><!-- contents -->


<hr class="footer"/><address class="footer"><small>
Generated on Sun Jan 13 2013 10:57:27 for Contiki 2.6 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.7.6.1
</small></address>

</body>
</html>
