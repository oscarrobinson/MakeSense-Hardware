<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>Contiki 2.6: platform/sensinode/apps/batmon/batmon.c Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />



</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">Contiki 2.6
   
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.html"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.html"><span>Modules</span></a></li>
      <li><a href="annotated.html"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li><a href="dirs.html"><span>Directories</span></a></li>
      <li><a href="examples.html"><span>Examples</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>Globals</span></a></li>
    </ul>
  </div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="dir_da81161b528b307837d2c2604d1aafcb.html">platform</a>      </li>
      <li class="navelem"><a class="el" href="dir_9f7c3ae195d7387d42137819fe980698.html">sensinode</a>      </li>
      <li class="navelem"><a class="el" href="dir_0f12c5b5f8d7fa2acf42d46636a04907.html">apps</a>      </li>
      <li class="navelem"><a class="el" href="dir_b45ec88915563d0c6e5900c848f9f140.html">batmon</a>      </li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">batmon.c</div>  </div>
</div><!--header-->
<div class="contents">
<a href="a01617.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment"> * Copyright (c) 2010, Loughborough University - Computer Science</span>
<a name="l00003"></a>00003 <span class="comment"> * All rights reserved.</span>
<a name="l00004"></a>00004 <span class="comment"> *</span>
<a name="l00005"></a>00005 <span class="comment"> * Redistribution and use in source and binary forms, with or without</span>
<a name="l00006"></a>00006 <span class="comment"> * modification, are permitted provided that the following conditions</span>
<a name="l00007"></a>00007 <span class="comment"> * are met:</span>
<a name="l00008"></a>00008 <span class="comment"> * 1. Redistributions of source code must retain the above copyright</span>
<a name="l00009"></a>00009 <span class="comment"> *    notice, this list of conditions and the following disclaimer.</span>
<a name="l00010"></a>00010 <span class="comment"> * 2. Redistributions in binary form must reproduce the above copyright</span>
<a name="l00011"></a>00011 <span class="comment"> *    notice, this list of conditions and the following disclaimer in the</span>
<a name="l00012"></a>00012 <span class="comment"> *    documentation and/or other materials provided with the distribution.</span>
<a name="l00013"></a>00013 <span class="comment"> * 3. Neither the name of the Institute nor the names of its contributors</span>
<a name="l00014"></a>00014 <span class="comment"> *    may be used to endorse or promote products derived from this software</span>
<a name="l00015"></a>00015 <span class="comment"> *    without specific prior written permission.</span>
<a name="l00016"></a>00016 <span class="comment"> *</span>
<a name="l00017"></a>00017 <span class="comment"> * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS&#39;&#39; AND</span>
<a name="l00018"></a>00018 <span class="comment"> * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</span>
<a name="l00019"></a>00019 <span class="comment"> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE</span>
<a name="l00020"></a>00020 <span class="comment"> * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE</span>
<a name="l00021"></a>00021 <span class="comment"> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</span>
<a name="l00022"></a>00022 <span class="comment"> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS</span>
<a name="l00023"></a>00023 <span class="comment"> * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)</span>
<a name="l00024"></a>00024 <span class="comment"> * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT</span>
<a name="l00025"></a>00025 <span class="comment"> * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY</span>
<a name="l00026"></a>00026 <span class="comment"> * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF</span>
<a name="l00027"></a>00027 <span class="comment"> * SUCH DAMAGE.</span>
<a name="l00028"></a>00028 <span class="comment"> *</span>
<a name="l00029"></a>00029 <span class="comment"> * This file is part of the Contiki operating system.</span>
<a name="l00030"></a>00030 <span class="comment"> */</span>
<a name="l00031"></a>00031 <span class="comment"></span>
<a name="l00032"></a>00032 <span class="comment">/**</span>
<a name="l00033"></a>00033 <span class="comment"> * \file</span>
<a name="l00034"></a>00034 <span class="comment"> *         Sources for the BATtery MONitor app. It dumps a log entry to the</span>
<a name="l00035"></a>00035 <span class="comment"> *         external flash periodically as well as upon external trigger.</span>
<a name="l00036"></a>00036 <span class="comment"> *</span>
<a name="l00037"></a>00037 <span class="comment"> *         It started off as a VDD and battery logger but now it also stores</span>
<a name="l00038"></a>00038 <span class="comment"> *         energest values and other goodies.</span>
<a name="l00039"></a>00039 <span class="comment"> *</span>
<a name="l00040"></a>00040 <span class="comment"> * \author</span>
<a name="l00041"></a>00041 <span class="comment"> *         George Oikonomou - &lt;oikonomou@users.sourceforge.net&gt;</span>
<a name="l00042"></a>00042 <span class="comment"> */</span>
<a name="l00043"></a>00043 
<a name="l00044"></a>00044 <span class="preprocessor">#include &quot;contiki.h&quot;</span>
<a name="l00045"></a>00045 
<a name="l00046"></a>00046 <span class="preprocessor">#define DEBUG 0</span>
<a name="l00047"></a>00047 <span class="preprocessor"></span><span class="preprocessor">#if DEBUG</span>
<a name="l00048"></a>00048 <span class="preprocessor"></span><span class="preprocessor">#include &lt;stdio.h&gt;</span>
<a name="l00049"></a>00049 <span class="preprocessor">#define PRINTF(...) printf(__VA_ARGS__)</span>
<a name="l00050"></a>00050 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00051"></a>00051 <span class="preprocessor"></span><span class="preprocessor">#define PRINTF(...)</span>
<a name="l00052"></a>00052 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00053"></a>00053 <span class="preprocessor"></span>
<a name="l00054"></a>00054 <span class="preprocessor">#include &quot;<a class="code" href="a00457.html" title="Event timer header file.">sys/etimer.h</a>&quot;</span>
<a name="l00055"></a>00055 <span class="preprocessor">#include &quot;<a class="code" href="a00455.html" title="Header file for the energy estimation mechanism.">sys/energest.h</a>&quot;</span>
<a name="l00056"></a>00056 <span class="preprocessor">#include &quot;<a class="code" href="a01629.html" title="Defines for the sensors on the various Sensinode models.">dev/sensinode-sensors.h</a>&quot;</span>
<a name="l00057"></a>00057 <span class="preprocessor">#include &quot;<a class="code" href="a01627.html" title="Header File for the module which controls the Sensinode N740 8-bit serial-in/serial or parallel-out s...">dev/n740.h</a>&quot;</span>
<a name="l00058"></a>00058 <span class="preprocessor">#include &quot;<a class="code" href="a01622.html" title="Header file for the control of the M25P16 on sensinode N740s.">dev/m25p16.h</a>&quot;</span>
<a name="l00059"></a>00059 
<a name="l00060"></a>00060 <span class="preprocessor">#define BATMON_LOG_PERIOD 60 </span><span class="comment">/* in seconds */</span>
<a name="l00061"></a>00061 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00062"></a>00062 <span class="keyword">static</span> <span class="keyword">const</span> uint8_t magic[3] = { 0x0B, 0xEE, 0xF0 };
<a name="l00063"></a>00063 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00064"></a>00064 <span class="keyword">struct </span>record {
<a name="l00065"></a>00065   uint8_t magic[3];
<a name="l00066"></a>00066   uint8_t trigger;
<a name="l00067"></a>00067   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> c; <span class="comment">/* uptime */</span>
<a name="l00068"></a>00068   <span class="keywordtype">int</span> v; <span class="comment">/* VDD (reference) */</span>
<a name="l00069"></a>00069   <span class="keywordtype">int</span> b; <span class="comment">/* Voltage ADC */</span>
<a name="l00070"></a>00070 <span class="preprocessor">#if ENERGEST_CONF_ON</span>
<a name="l00071"></a>00071 <span class="preprocessor"></span>  <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> mcu;
<a name="l00072"></a>00072   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> lpm;
<a name="l00073"></a>00073   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> irq;
<a name="l00074"></a>00074   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> tx;
<a name="l00075"></a>00075   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> rx;
<a name="l00076"></a>00076   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> f_write;
<a name="l00077"></a>00077   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> f_read;
<a name="l00078"></a>00078 <span class="preprocessor">#endif</span>
<a name="l00079"></a>00079 <span class="preprocessor"></span>};
<a name="l00080"></a>00080 
<a name="l00081"></a>00081 <span class="preprocessor">#define RECORD_SIZE 64</span>
<a name="l00082"></a>00082 <span class="preprocessor"></span><span class="preprocessor">#define LAST_WRITE (0xFFFF - RECORD_SIZE)</span>
<a name="l00083"></a>00083 <span class="preprocessor"></span>
<a name="l00084"></a>00084 <span class="preprocessor">#define LOG_TRIGGER_PERIODIC 0xFF</span>
<a name="l00085"></a>00085 <span class="preprocessor"></span><span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00086"></a>00086 <span class="keyword">struct </span>flash_address {
<a name="l00087"></a>00087   uint8_t s; <span class="comment">/* sector */</span>
<a name="l00088"></a>00088   uint8_t p; <span class="comment">/* page */</span>
<a name="l00089"></a>00089   uint8_t a; <span class="comment">/* address */</span>
<a name="l00090"></a>00090 };
<a name="l00091"></a>00091 <span class="keyword">static</span> <span class="keyword">struct </span>flash_address f;
<a name="l00092"></a>00092 
<a name="l00093"></a>00093 <span class="keyword">static</span> <span class="keyword">struct </span>record r;
<a name="l00094"></a>00094 <span class="keyword">static</span> <span class="keyword">struct </span>sensors_sensor * s;
<a name="l00095"></a>00095 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="a00047.html" title="A timer.">etimer</a> et;
<a name="l00096"></a>00096 <span class="preprocessor">#define FLASH_START_ADDR 0x1E0000</span>
<a name="l00097"></a>00097 <span class="preprocessor"></span><span class="preprocessor">#define FLASH_END_ADDR   0x1FFFFF</span>
<a name="l00098"></a>00098 <span class="preprocessor"></span><span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00099"></a>00099 <a class="code" href="a01866.html#ga27e9b6fc13f0438e37a198f69b38b4cf" title="Declare a process.">PROCESS</a>(batmon_process, <span class="stringliteral">&quot;Logger Process&quot;</span>);
<a name="l00100"></a>00100 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00101"></a>00101 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00102"></a>00102 find_gap() CC_NON_BANKED
<a name="l00103"></a>00103 {
<a name="l00104"></a>00104   uint8_t seq[3];
<a name="l00105"></a>00105   uint32_t address = FLASH_START_ADDR;
<a name="l00106"></a>00106   memset(&amp;f, 0, <span class="keyword">sizeof</span>(f));
<a name="l00107"></a>00107 
<a name="l00108"></a>00108   <span class="keywordflow">for</span>(address = FLASH_START_ADDR; address &lt;= FLASH_END_ADDR; address +=
<a name="l00109"></a>00109       RECORD_SIZE) {
<a name="l00110"></a>00110     n740_analog_deactivate();
<a name="l00111"></a>00111     f.s = ((address &amp; 0xFF0000) &gt;&gt; 16);
<a name="l00112"></a>00112     f.p = ((address &amp; 0xFF00) &gt;&gt; 8);
<a name="l00113"></a>00113     f.a = address &amp; 0xFF;
<a name="l00114"></a>00114     m25p16_read_fast((uint8_t *)&amp;f, seq, <span class="keyword">sizeof</span>(magic));
<a name="l00115"></a>00115     n740_analog_activate();
<a name="l00116"></a>00116     <span class="keywordflow">if</span>(memcmp(seq, magic, <span class="keyword">sizeof</span>(magic)) != 0) {
<a name="l00117"></a>00117       PRINTF(<span class="stringliteral">&quot;BatMon: Resume write @ 0x%02x%02x%02x\n&quot;</span>, f.s, f.p, f.a);
<a name="l00118"></a>00118       <span class="keywordflow">return</span> 1;
<a name="l00119"></a>00119     }
<a name="l00120"></a>00120   }
<a name="l00121"></a>00121 
<a name="l00122"></a>00122   <span class="comment">/* If we reach here, we ran out of flash */</span>
<a name="l00123"></a>00123   <span class="keywordflow">return</span> -1;
<a name="l00124"></a>00124 }
<a name="l00125"></a>00125 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00126"></a>00126 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00127"></a>00127 abort() CC_NON_BANKED
<a name="l00128"></a>00128 {
<a name="l00129"></a>00129   PRINTF(<span class="stringliteral">&quot;BatMon: Abort\n&quot;</span>);
<a name="l00130"></a>00130   <a class="code" href="a01862.html#ga94628979920ab92a3cc0e69e537bef7d" title="Stop a pending event timer.">etimer_stop</a>(&amp;et);
<a name="l00131"></a>00131   <a class="code" href="a01866.html#ga7f3c7706ec62fbcbdf018f799b21cd66" title="Cause a process to exit.">process_exit</a>(&amp;batmon_process);
<a name="l00132"></a>00132 }
<a name="l00133"></a>00133 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00134"></a>00134 <span class="keywordtype">void</span>
<a name="l00135"></a>00135 batmon_log(uint8_t trigger)
<a name="l00136"></a>00136 {
<a name="l00137"></a>00137   uint32_t next;
<a name="l00138"></a>00138 
<a name="l00139"></a>00139   <span class="comment">/* Only continue if the process (us) is running */</span>
<a name="l00140"></a>00140   <span class="keywordflow">if</span>(!<a class="code" href="a01866.html#ga45108066f1eabfd536782f7a19c7da6e" title="Check if a process is running.">process_is_running</a>(&amp;batmon_process)) {
<a name="l00141"></a>00141     <span class="keywordflow">return</span>;
<a name="l00142"></a>00142   }
<a name="l00143"></a>00143 
<a name="l00144"></a>00144   next = f.a;
<a name="l00145"></a>00145   next |= (((uint32_t) f.p) &lt;&lt; 8);
<a name="l00146"></a>00146   next |= (((uint32_t) f.s) &lt;&lt; 16);
<a name="l00147"></a>00147 
<a name="l00148"></a>00148   memcpy(r.magic, magic, <span class="keyword">sizeof</span>(magic));
<a name="l00149"></a>00149   r.trigger = trigger;
<a name="l00150"></a>00150   r.c = <a class="code" href="a01859.html#ga8bbd5d5a773349139eee79d365af36ab" title="Get the current value of the platform seconds.">clock_seconds</a>();
<a name="l00151"></a>00151 
<a name="l00152"></a>00152   <span class="comment">/* Read VDD and use as ADC reference */</span>
<a name="l00153"></a>00153   r.v = s-&gt;value(ADC_SENSOR_TYPE_VDD);
<a name="l00154"></a>00154 
<a name="l00155"></a>00155   <span class="comment">/* And then carry on with battery */</span>
<a name="l00156"></a>00156   r.b = s-&gt;value(ADC_SENSOR_TYPE_BATTERY);
<a name="l00157"></a>00157 
<a name="l00158"></a>00158 <span class="preprocessor">#if ENERGEST_CONF_ON</span>
<a name="l00159"></a>00159 <span class="preprocessor"></span>  <span class="comment">/* ENERGEST values */</span>
<a name="l00160"></a>00160   r.mcu = energest_type_time(ENERGEST_TYPE_CPU);
<a name="l00161"></a>00161   r.lpm = energest_type_time(ENERGEST_TYPE_LPM);
<a name="l00162"></a>00162   r.irq = energest_type_time(ENERGEST_TYPE_IRQ);
<a name="l00163"></a>00163   r.tx = energest_type_time(ENERGEST_TYPE_TRANSMIT);
<a name="l00164"></a>00164   r.rx = energest_type_time(ENERGEST_TYPE_LISTEN);
<a name="l00165"></a>00165   r.f_write = energest_type_time(ENERGEST_TYPE_FLASH_WRITE);
<a name="l00166"></a>00166   r.f_read = energest_type_time(ENERGEST_TYPE_FLASH_READ);
<a name="l00167"></a>00167 <span class="preprocessor">#endif</span>
<a name="l00168"></a>00168 <span class="preprocessor"></span>
<a name="l00169"></a>00169   n740_analog_deactivate();
<a name="l00170"></a>00170   <span class="comment">/* Make sure we&#39;re on */</span>
<a name="l00171"></a>00171   <span class="keywordflow">if</span>(<a class="code" href="a01622.html#af926e36d0c91beb2651e2eca14034b5c" title="Check for Write in Progress.">M25P16_WIP</a>()) {
<a name="l00172"></a>00172     <a class="code" href="a01621.html#af894e635b54a8626d9a129c8c87dcbfb" title="Release from Deep Power Down (RES) instruction.">m25p16_res</a>();
<a name="l00173"></a>00173   }
<a name="l00174"></a>00174   <a class="code" href="a01621.html#a405e8e8161d16e1579f926421c96e760" title="Program Page (PP) instruction.">m25p16_pp</a>((uint8_t *)&amp;f, (uint8_t *)&amp;r, <span class="keyword">sizeof</span>(r));
<a name="l00175"></a>00175   n740_analog_activate();
<a name="l00176"></a>00176 
<a name="l00177"></a>00177   PRINTF(<span class="stringliteral">&quot;BatMon: @%lu [%u] &quot;</span>, r.c, r.trigger);
<a name="l00178"></a>00178   PRINTF(<span class="stringliteral">&quot;BatMon: 0x%02x%02x%02x\n&quot;</span>, f.s, f.p, f.a);
<a name="l00179"></a>00179 
<a name="l00180"></a>00180   next += RECORD_SIZE;
<a name="l00181"></a>00181 
<a name="l00182"></a>00182   <span class="keywordflow">if</span>(next &gt;= FLASH_END_ADDR) {
<a name="l00183"></a>00183     abort();
<a name="l00184"></a>00184     <span class="keywordflow">return</span>;
<a name="l00185"></a>00185   }
<a name="l00186"></a>00186 
<a name="l00187"></a>00187   f.s = ((next &amp; 0xFF0000) &gt;&gt; 16);
<a name="l00188"></a>00188   f.p = ((next &amp; 0xFF00) &gt;&gt; 8);
<a name="l00189"></a>00189   f.a = next &amp; 0xFF;
<a name="l00190"></a>00190 
<a name="l00191"></a>00191   <span class="keywordflow">if</span>(trigger == LOG_TRIGGER_PERIODIC) {
<a name="l00192"></a>00192     <a class="code" href="a01862.html#ga4f73b01caad4528df4ddadc9fbd30eac" title="Reset an event timer with the same interval as was previously set.">etimer_reset</a>(&amp;et);
<a name="l00193"></a>00193   }
<a name="l00194"></a>00194 }
<a name="l00195"></a>00195 <span class="comment">/*---------------------------------------------------------------------------*/</span>
<a name="l00196"></a>00196 <a class="code" href="a01866.html#gaa4cff8e4f3abc50c74619a90ae347200" title="Define the body of a process.">PROCESS_THREAD</a>(batmon_process, ev, data)
<a name="l00197"></a>00197 {
<a name="l00198"></a>00198 
<a name="l00199"></a>00199   <a class="code" href="a01866.html#ga8efc62947f2ca2c870f52896e0dc1a81" title="Define the beginning of a process.">PROCESS_BEGIN</a>();
<a name="l00200"></a>00200 
<a name="l00201"></a>00201   PRINTF(<span class="stringliteral">&quot;BatMon\n&quot;</span>, <span class="keyword">sizeof</span>(r));
<a name="l00202"></a>00202 
<a name="l00203"></a>00203   s = sensors_find(ADC_SENSOR);
<a name="l00204"></a>00204   <span class="keywordflow">if</span> (!s) {
<a name="l00205"></a>00205     PRINTF(<span class="stringliteral">&quot;BatMon: ADC not found\n&quot;</span>);
<a name="l00206"></a>00206     <a class="code" href="a01866.html#ga479c3ebc58ecef0c027d627433c65862" title="Exit the currently running process.">PROCESS_EXIT</a>();
<a name="l00207"></a>00207   }
<a name="l00208"></a>00208 
<a name="l00209"></a>00209   n740_analog_deactivate();
<a name="l00210"></a>00210   <a class="code" href="a01621.html#af894e635b54a8626d9a129c8c87dcbfb" title="Release from Deep Power Down (RES) instruction.">m25p16_res</a>();
<a name="l00211"></a>00211   n740_analog_activate();
<a name="l00212"></a>00212 
<a name="l00213"></a>00213   <span class="comment">/* Find last written location */</span>
<a name="l00214"></a>00214   <span class="keywordflow">if</span>(find_gap() == -1) {
<a name="l00215"></a>00215     PRINTF(<span class="stringliteral">&quot;BatMon: Flash storage full\n&quot;</span>);
<a name="l00216"></a>00216     <a class="code" href="a01866.html#ga479c3ebc58ecef0c027d627433c65862" title="Exit the currently running process.">PROCESS_EXIT</a>();
<a name="l00217"></a>00217   }
<a name="l00218"></a>00218 
<a name="l00219"></a>00219   <a class="code" href="a01862.html#gadb6c83643bbca82b614c50b27c586302" title="Set an event timer.">etimer_set</a>(&amp;et, BATMON_LOG_PERIOD * <a class="code" href="a01859.html#gae3ced0551b26c9b99cb45a86f34d100a" title="A second, measured in system clock time.">CLOCK_SECOND</a>);
<a name="l00220"></a>00220 
<a name="l00221"></a>00221   <span class="keywordflow">while</span>(1) {
<a name="l00222"></a>00222     <a class="code" href="a01866.html#gad78fc20c14b0b03c3b2412742f5f416f" title="Yield the currently running process.">PROCESS_YIELD</a>();
<a name="l00223"></a>00223     <span class="keywordflow">if</span>(ev == PROCESS_EVENT_TIMER &amp;&amp; <a class="code" href="a01862.html#gada74975ee3bc980472df748b373d8636" title="Check if an event timer has expired.">etimer_expired</a>(&amp;et)) {
<a name="l00224"></a>00224       batmon_log(LOG_TRIGGER_PERIODIC);
<a name="l00225"></a>00225     }
<a name="l00226"></a>00226   }
<a name="l00227"></a>00227 
<a name="l00228"></a>00228   <a class="code" href="a01866.html#ga9c2681a0070eba8a7c9fdf4dbb6db05e" title="Define the end of a process.">PROCESS_END</a>();
<a name="l00229"></a>00229 }
<a name="l00230"></a>00230 <span class="comment">/*---------------------------------------------------------------------------*/</span>
</pre></div></div><!-- contents -->


<hr class="footer"/><address class="footer"><small>
Generated on Sun Jan 13 2013 10:57:28 for Contiki 2.6 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.7.6.1
</small></address>

</body>
</html>
